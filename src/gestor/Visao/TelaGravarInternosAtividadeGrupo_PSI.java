/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestor.Visao;

import gestor.Controle.ControleAtendimentoGrupoPsicologia;
import gestor.Controle.ControleLogSistema;
import gestor.Dao.ConexaoBancoDados;
import gestor.Dao.ModeloTabela;
import gestor.Modelo.AtividadesGrupoPsicologia;
import gestor.Modelo.LogSistema;
import static gestor.Visao.TelaAtendimentoGrupoPSI.count1;
import static gestor.Visao.TelaAtendimentoGrupoPSI.jBtAlterarParticipantes;
import static gestor.Visao.TelaAtendimentoGrupoPSI.jBtAuditoriaParticipantes;
import static gestor.Visao.TelaAtendimentoGrupoPSI.jBtCancelarParticipantes;
import static gestor.Visao.TelaAtendimentoGrupoPSI.jBtExcluirParticipantes;
import static gestor.Visao.TelaAtendimentoGrupoPSI.jBtNovoParticipantes;
import static gestor.Visao.TelaAtendimentoGrupoPSI.jBtPesquisarPart;
import static gestor.Visao.TelaAtendimentoGrupoPSI.jBtSalvarParticipantes;
import static gestor.Visao.TelaAtendimentoGrupoPSI.jCNC;
import static gestor.Visao.TelaAtendimentoGrupoPSI.jCela;
import static gestor.Visao.TelaAtendimentoGrupoPSI.jCodigoAtend;
import static gestor.Visao.TelaAtendimentoGrupoPSI.jDataNascimento;
import static gestor.Visao.TelaAtendimentoGrupoPSI.jIdInternoGrp;
import static gestor.Visao.TelaAtendimentoGrupoPSI.jNomeInternoGrp;
import static gestor.Visao.TelaAtendimentoGrupoPSI.jNomeMae;
import static gestor.Visao.TelaAtendimentoGrupoPSI.jPavilhao;
import static gestor.Visao.TelaAtendimentoGrupoPSI.jRegime;
import static gestor.Visao.TelaAtendimentoGrupoPSI.jTabelaInternos;
import static gestor.Visao.TelaAtendimentoGrupoPSI.jtotalRegistrosInternos;
import static gestor.Visao.TelaAtendimentoGrupoPSI.pCODIGO_ITEM_PARTICIPANTE;
import static gestor.Visao.TelaLoginSenha.nameUser;
import static gestor.Visao.TelaModuloPrincipal.jDataSistema;
import static gestor.Visao.TelaModuloPrincipal.jHoraSistema;
import static gestor.Visao.TelaSelecaoLoteInternosAG.jTabelaInternosDestino;
import static gestor.Visao.TelaSelecaoLoteInternosAG.qtdInternos;
import java.awt.Rectangle;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author ronal
 */
public class TelaGravarInternosAtividadeGrupo_PSI extends javax.swing.JDialog {

    ConexaoBancoDados conecta = new ConexaoBancoDados();
    AtividadesGrupoPsicologia objAvalia = new AtividadesGrupoPsicologia();
    ControleAtendimentoGrupoPsicologia control = new ControleAtendimentoGrupoPsicologia();
    //
    ControleLogSistema controlLog = new ControleLogSistema();
    LogSistema objLogSys = new LogSistema();
    // Vari√°veis para gravar o log   
    String nomeModuloTela3 = "Psicologia:Atendimento em Grupo:Participantes";
    //    
    int IdRegInternosKC = 0;
    int codigoPavilhao = 0;
    String statusMov = "";
    String horaMov = "";
    String dataModFinal = "";
    int pGravado = 1;
    String pUtili = "Sim";
    int codigoInterno = 0;
    int codigoRegistro = 0;
    int tipoKit = 0; // 0 - COMPLETO E 1 INCOMPLETO
    int pTOTAL_REGISTROS = 0;

    /**
     * Creates new form TelaGravarInternosKitCompleto
     */
    public static TelaSelecaoLoteInternosAG montaKitIntComp;

    public TelaGravarInternosAtividadeGrupo_PSI(TelaSelecaoLoteInternosAG parent, boolean modal) {
        this.montaKitIntComp = parent;
        this.setModal(modal);
        setLocationRelativeTo(montaKitIntComp);
        initComponents();
        gravarDadosBanco();
        setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE); //Impedir que a janela seja fechada pelo X  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jProgressBar2 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("...::: Gravar Internos Atendimento em Grupo :::...");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Gravando Internos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(204, 0, 0))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Aguarde....");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/191216082327_48.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        jProgressBar1.setStringPainted(true);

        jProgressBar2.setStringPainted(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(jProgressBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaGravarInternosAtividadeGrupo_PSI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaGravarInternosAtividadeGrupo_PSI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaGravarInternosAtividadeGrupo_PSI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaGravarInternosAtividadeGrupo_PSI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TelaGravarInternosAtividadeGrupo_PSI dialog = new TelaGravarInternosAtividadeGrupo_PSI(montaKitIntComp, true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    // End of variables declaration//GEN-END:variables

    public void gravarDadosBanco() {
        //THREAD DE GRAVA√á√ÉO
        try {
            Thread t0 = new Thread() {
                public void run() {
                    statusMov = "Incluiu";
                    horaMov = jHoraSistema.getText();
                    dataModFinal = jDataSistema.getText();
                    // GRAVAR NA TABELA ITENS_INTERNOS_AGRUPADOS_KIT_COMPLETO                    
                    for (int i = 0; i < jTabelaInternosDestino.getRowCount(); i++) {//  
                        objAvalia.setIdAtGrupoPsi(Integer.valueOf(jCodigoAtend.getText()));
                        objAvalia.setIdInternoCrc((int) jTabelaInternosDestino.getValueAt(i, 0));
//                        objAvalia.setNomeInternoCrc((String) jTabelaInternosDestino.getValueAt(i, 2));
                        // log de usuario
                        objAvalia.setUsuarioInsert(nameUser);
                        objAvalia.setDataInsert(dataModFinal);
                        objAvalia.setHorarioInsert(horaMov);
                        //
                        control.incluirAGrupoPP(objAvalia);
                        buscarCodigoParticipantes();
                        objLog3();
                        controlLog.incluirLogSistema(objLogSys); // Grava o log da opera√ß√£o
                        preencherTabelaParticipantes("SELECT * FROM PARTICIPANTES_ATENDIMENTO_GRUPO_PSICOLOGIA "
                                + "INNER JOIN ATENDIMENTO_GRUPO_PSICOLOGIA "
                                + "ON PARTICIPANTES_ATENDIMENTO_GRUPO_PSICOLOGIA.IdAtGrupoPsi=ATENDIMENTO_GRUPO_PSICOLOGIA.IdAtGrupoPsi "
                                + "INNER JOIN PRONTUARIOSCRC "
                                + "ON PARTICIPANTES_ATENDIMENTO_GRUPO_PSICOLOGIA.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                                + "INNER JOIN DADOSPENAISINTERNOS "
                                + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                                + "WHERE PARTICIPANTES_ATENDIMENTO_GRUPO_PSICOLOGIA.IdAtGrupoPsi='" + jCodigoAtend.getText() + "'");
                        pTOTAL_REGISTROS = i;
                    }
//                    try {
//                        Thread.sleep(10);
//                    } catch (InterruptedException ex) {
//                    }
                }
            };
            t0.start();
//            t0.join(); //EXECUTAR ESSA THREAD PRIMEIRO
        } catch (Exception e) {
        }
        // THREAD DA BARRA DE EXECU√á√ÉO
        try {
            Thread t1 = new Thread() {
                public void run() {
                    jProgressBar1.setMaximum(jTabelaInternosDestino.getRowCount());
                    Rectangle rect;
                    for (int a = 0; a < jTabelaInternosDestino.getRowCount(); a++) {
                        rect = jTabelaInternosDestino.getCellRect(a, 0, true);
                        try {
                            jTabelaInternosDestino.scrollRectToVisible(rect);
                        } catch (java.lang.ClassCastException e) {
                        }
                        if (a == 0) {
                            jTabelaInternosDestino.setRowSelectionInterval(a, 0);
                            jProgressBar1.setValue((a + 1));
                        } else if (a > 0) {
                            jTabelaInternosDestino.setRowSelectionInterval(a, 1);
                            jProgressBar1.setValue((a + 1));
                        }
                        try {
                            Thread.sleep(100);
                        } catch (InterruptedException ex) {
                        }
                    }
                    jProgressBar1.setValue(100);
                    if (pTOTAL_REGISTROS == qtdInternos) {
                        JOptionPane.showMessageDialog(rootPane, "Opera√ß√£o Conclu√≠da com sucesso...");
                        bloquearTodosCampos();
                        bloquearTodosBotoes();
                        dispose();
                    } else if (pTOTAL_REGISTROS < qtdInternos) {
                        // THREAD DA BARRA DE EXECU√á√ÉO
                        try {
                            Thread t2 = new Thread() {
                                public void run() {
                                    jProgressBar2.setMaximum(jTabelaInternosDestino.getRowCount());
                                    Rectangle rect;
                                    for (int b = 0; b < jTabelaInternosDestino.getRowCount(); b++) {
                                        rect = jTabelaInternosDestino.getCellRect(b, 0, true);
                                        try {
                                            jTabelaInternosDestino.scrollRectToVisible(rect);
                                        } catch (java.lang.ClassCastException e) {
                                        }
                                        if (b == 0) {
                                            jTabelaInternosDestino.setRowSelectionInterval(b, 0);
                                            jProgressBar2.setValue((b + 1));
                                        } else if (b > 0) {
                                            jTabelaInternosDestino.setRowSelectionInterval(b, 1);
                                            jProgressBar2.setValue((b + 1));
                                        }
                                        try {
                                            Thread.sleep(1000);
                                        } catch (InterruptedException ex) {
                                        }
                                    }
                                    jProgressBar2.setValue(0);
                                    try {
                                    } catch (Exception e) {
                                    }
                                }
                            };
                            t2.start();
                        } catch (Exception e) {
                        }
                    } else if (pTOTAL_REGISTROS != qtdInternos) {
                        // THREAD DA BARRA DE EXECU√á√ÉO
                        try {
                            Thread t2 = new Thread() {
                                public void run() {
                                    jProgressBar2.setMaximum(jTabelaInternosDestino.getRowCount());
                                    Rectangle rect;
                                    for (int b = 0; b < jTabelaInternosDestino.getRowCount(); b++) {
                                        rect = jTabelaInternosDestino.getCellRect(b, 0, true);
                                        try {
                                            jTabelaInternosDestino.scrollRectToVisible(rect);
                                        } catch (java.lang.ClassCastException e) {
                                        }
                                        if (b == 0) {
                                            jTabelaInternosDestino.setRowSelectionInterval(b, 0);
                                            jProgressBar2.setValue((b + 1));
                                        } else if (b > 0) {
                                            jTabelaInternosDestino.setRowSelectionInterval(b, 1);
                                            jProgressBar2.setValue((b + 1));
                                        }
                                        try {
                                            Thread.sleep(1000);
                                        } catch (InterruptedException ex) {
                                        }
                                    }
                                    jProgressBar2.setValue(0);
                                    try {
                                    } catch (Exception e) {
                                    }
                                }
                            };
                            t2.start();
                        } catch (Exception e) {
                        }
                    }
//                    JOptionPane.showMessageDialog(rootPane, "Opera√ß√£o Conclu√≠da com sucesso...");
//                    bloquearTodosCampos();
//                    bloquearTodosBotoes();
//                    dispose();
                    try {
                    } catch (Exception e) {
                    }
                }
            };
            t1.start();
        } catch (Exception e) {
        }
//        // THREAD DA BARRA DE EXECU√á√ÉO
//        try {
//            Thread t2 = new Thread() {
//                public void run() {
//                    jProgressBar2.setMaximum(jTabelaInternosDestino.getRowCount());
//                    Rectangle rect;
//                    for (int b = 0; b < jTabelaInternosDestino.getRowCount(); b++) {
//                        rect = jTabelaInternosDestino.getCellRect(b, 0, true);
//                        try {
//                            jTabelaInternosDestino.scrollRectToVisible(rect);
//                        } catch (java.lang.ClassCastException e) {
//                        }
//                        if (b == 0) {
//                            jTabelaInternosDestino.setRowSelectionInterval(b, 0);
//                            jProgressBar2.setValue((b + 1));
//                        } else if (b > 0) {
//                            jTabelaInternosDestino.setRowSelectionInterval(b, 1);
//                            jProgressBar2.setValue((b + 1));
//                        }
//                        try {
//                            Thread.sleep(1000);
//                        } catch (InterruptedException ex) {
//                        }
//                    }
//                    jProgressBar2.setValue(0);                    
//                    try {
//                    } catch (Exception e) {
//                    }
//                }
//            };
//            t2.start();
//        } catch (Exception e) {
//        }
    }

    public void bloquearTodosBotoes() {
        // ABA PARTICIPANTES
        jBtNovoParticipantes.setEnabled(!true);
        jBtAlterarParticipantes.setEnabled(!true);
        jBtExcluirParticipantes.setEnabled(!true);
        jBtSalvarParticipantes.setEnabled(!true);
        jBtCancelarParticipantes.setEnabled(!true);
        jBtAuditoriaParticipantes.setEnabled(!true);
        jBtPesquisarPart.setEnabled(!true);
    }

    public void bloquearTodosCampos() {
        // ABA PARTICIPANTES
        jIdInternoGrp.setEnabled(!true);
        jCNC.setEnabled(!true);
        jRegime.setEnabled(!true);
        jDataNascimento.setEnabled(!true);
        jNomeInternoGrp.setEnabled(!true);
        jNomeMae.setEnabled(!true);
        jPavilhao.setEnabled(!true);
        jCela.setEnabled(!true);
    }

    public void buscarCodigoParticipantes() {
        conecta.abrirConexao();
        try {
            conecta.executaSQL("SELECT * FROM PARTICIPANTES_ATENDIMENTO_GRUPO_PSICOLOGIA");
            conecta.rs.last();
            pCODIGO_ITEM_PARTICIPANTE = conecta.rs.getInt("IdItemPart");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "N√£o foi poss√≠vel obter c√≥digo do registro.");
        }
        conecta.desconecta();
    }

    //ABA PARTICIPANTES
    public void preencherTabelaParticipantes(String sql) {
        ArrayList dados = new ArrayList();
        String[] Colunas = new String[]{"Item", "C√≥digo", "CNC", "Nome do Interno", "Regime"};
        conecta.abrirConexao();
        try {
            conecta.executaSQL(sql);
            conecta.rs.first();
            count1 = 0;
            do {
                count1 = count1 + 1;
                jtotalRegistrosInternos.setText(Integer.toString(count1)); // Converter inteiro em string para exibir na tela
                dados.add(new Object[]{conecta.rs.getInt("IdItemPart"), conecta.rs.getInt("IdInternoCrc"), conecta.rs.getString("Cnc"), conecta.rs.getString("NomeInternoCrc"), conecta.rs.getString("Regime")});
            } while (conecta.rs.next());
        } catch (SQLException ex) {
        }
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTabelaInternos.setModel(modelo);
        jTabelaInternos.getColumnModel().getColumn(0).setPreferredWidth(70);
        jTabelaInternos.getColumnModel().getColumn(0).setResizable(false);
        jTabelaInternos.getColumnModel().getColumn(1).setPreferredWidth(70);
        jTabelaInternos.getColumnModel().getColumn(1).setResizable(false);
        jTabelaInternos.getColumnModel().getColumn(2).setPreferredWidth(80);
        jTabelaInternos.getColumnModel().getColumn(2).setResizable(false);
        jTabelaInternos.getColumnModel().getColumn(3).setPreferredWidth(350);
        jTabelaInternos.getColumnModel().getColumn(3).setResizable(false);
        jTabelaInternos.getColumnModel().getColumn(4).setPreferredWidth(100);
        jTabelaInternos.getColumnModel().getColumn(4).setResizable(false);
        jTabelaInternos.getTableHeader().setReorderingAllowed(false);
        jTabelaInternos.setAutoResizeMode(jTabelaInternos.AUTO_RESIZE_OFF);
        jTabelaInternos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        alinharCamposTabelaParticipantes();
        conecta.desconecta();
    }

    public void alinharCamposTabelaParticipantes() {
        DefaultTableCellRenderer esquerda = new DefaultTableCellRenderer();
        DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
        DefaultTableCellRenderer direita = new DefaultTableCellRenderer();
        esquerda.setHorizontalAlignment(SwingConstants.LEFT);
        centralizado.setHorizontalAlignment(SwingConstants.CENTER);
        direita.setHorizontalAlignment(SwingConstants.RIGHT);
        //
        jTabelaInternos.getColumnModel().getColumn(0).setCellRenderer(centralizado);
        jTabelaInternos.getColumnModel().getColumn(1).setCellRenderer(centralizado);
        jTabelaInternos.getColumnModel().getColumn(2).setCellRenderer(direita);
    }

    public void limparTabelaParticipantes() {
        ArrayList dados = new ArrayList();
        String[] Colunas = new String[]{"Item", "C√≥digo", "CNC", "Nome do Interno", "Regime"};
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTabelaInternos.setModel(modelo);
        jTabelaInternos.getColumnModel().getColumn(0).setPreferredWidth(70);
        jTabelaInternos.getColumnModel().getColumn(0).setResizable(false);
        jTabelaInternos.getColumnModel().getColumn(1).setPreferredWidth(70);
        jTabelaInternos.getColumnModel().getColumn(1).setResizable(false);
        jTabelaInternos.getColumnModel().getColumn(2).setPreferredWidth(80);
        jTabelaInternos.getColumnModel().getColumn(2).setResizable(false);
        jTabelaInternos.getColumnModel().getColumn(3).setPreferredWidth(350);
        jTabelaInternos.getColumnModel().getColumn(3).setResizable(false);
        jTabelaInternos.getColumnModel().getColumn(4).setPreferredWidth(100);
        jTabelaInternos.getColumnModel().getColumn(4).setResizable(false);
        jTabelaInternos.getTableHeader().setReorderingAllowed(false);
        jTabelaInternos.setAutoResizeMode(jTabelaInternos.AUTO_RESIZE_OFF);
        jTabelaInternos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        modelo.getLinhas().clear();
    }

    public void objLog3() {
        objLogSys.setDataMov(dataModFinal);
        objLogSys.setHorarioMov(horaMov);
        objLogSys.setNomeModuloTela(nomeModuloTela3);
        objLogSys.setIdLancMov(pCODIGO_ITEM_PARTICIPANTE);
        objLogSys.setNomeUsuarioLogado(nameUser);
        objLogSys.setStatusMov(statusMov);
    }
}
