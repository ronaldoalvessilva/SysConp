/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestor.Visao;

import gestor.Controle.ControleItensExamesMedicoPsiquiatricoSolicitado;
import gestor.Controle.ControleLogSistema;
import gestor.Controle.ControleSolicitacaoExamesMedicoPsiquiatrico;
import gestor.Dao.ConexaoBancoDados;
import gestor.Dao.ModeloTabela;
import gestor.Modelo.ItensExameMedicoPsiquiatricoSolicitado;
import gestor.Modelo.LogSistema;
import gestor.Modelo.SolicitacaoExamesMedicoPsiquiatrico;
import static gestor.Visao.TelaLoginSenha.nameUser;
import static gestor.Visao.TelaModuloEnfermaria.telaSolicitacaoExamesIntManuENF;
import static gestor.Visao.TelaModuloEnfermaria.telaSolicitacaoExamesIntManuExameENF;
import static gestor.Visao.TelaModuloPrincipal.jDataSistema;
import static gestor.Visao.TelaModuloPrincipal.jHoraSistema;
import java.awt.Color;
import java.awt.Image;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import static gestor.Visao.TelaModuloEnfermaria.codigoUserENF;
import static gestor.Visao.TelaModuloEnfermaria.codUserAcessoENF;
import static gestor.Visao.TelaModuloEnfermaria.codigoUserGroupENF;
import static gestor.Visao.TelaModuloEnfermaria.codAbrirENF;
import static gestor.Visao.TelaModuloEnfermaria.codIncluirENF;
import static gestor.Visao.TelaModuloEnfermaria.codAlterarENF;
import static gestor.Visao.TelaModuloEnfermaria.codExcluirENF;
import static gestor.Visao.TelaModuloEnfermaria.codGravarENF;
import static gestor.Visao.TelaModuloEnfermaria.codConsultarENF;
import static gestor.Visao.TelaModuloEnfermaria.codigoGrupoENF;
import static gestor.Visao.TelaModuloEnfermaria.nomeGrupoENF;
import static gestor.Visao.TelaModuloEnfermaria.nomeTelaENF;

/**
 *
 * @author ronaldo
 */
public class TelaSolicitacaoExamesMedicoPsiquiatrico extends javax.swing.JInternalFrame {

    ConexaoBancoDados conecta = new ConexaoBancoDados();
    SolicitacaoExamesMedicoPsiquiatrico objSoliEx = new SolicitacaoExamesMedicoPsiquiatrico();
    ControleSolicitacaoExamesMedicoPsiquiatrico control = new ControleSolicitacaoExamesMedicoPsiquiatrico();
    ItensExameMedicoPsiquiatricoSolicitado objItensExame = new ItensExameMedicoPsiquiatricoSolicitado();
    ControleItensExamesMedicoPsiquiatricoSolicitado controle = new ControleItensExamesMedicoPsiquiatricoSolicitado();
    //   
    ControleLogSistema controlLog = new ControleLogSistema();
    LogSistema objLogSys = new LogSistema();
    // Variáveis para gravar o log
    String nomeModuloTela = "Enfermaria:Solicitação de Exames de Internos:Manutenção";
    String nomeModuloTela1 = "Enfermaria:Solicitação de Exames de Internos:Exames";
    //
    int flag;
    int acao;
    String dataInicial, dataFinal, dataEmissao, dataValidade;
    String dataEntrada;
    String statusMov;
    String horaMov;
    String dataModFinal;
    int count;
    String caminho;
    String codSolExame;

    /**
     * Creates new form TelaSolicitacaoExamesMedicoPsiquiatrico
     */
    public TelaSolicitacaoExamesMedicoPsiquiatrico() {
        initComponents();
        formatarCampos();
        corCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel32 = new javax.swing.JPanel();
        jtotalRegistros = new javax.swing.JLabel();
        jPanel31 = new javax.swing.JPanel();
        jPanel30 = new javax.swing.JPanel();
        jLabel63 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel48 = new javax.swing.JLabel();
        jDataInicial = new com.toedter.calendar.JDateChooser();
        jLabel49 = new javax.swing.JLabel();
        jDataFinal = new com.toedter.calendar.JDateChooser();
        jBtPesqData = new javax.swing.JButton();
        jLabel36 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPesqNomeInternoOdonto = new javax.swing.JTextField();
        jBtPesqNomeInterno = new javax.swing.JButton();
        jLabel37 = new javax.swing.JLabel();
        jIDPesqAtend = new javax.swing.JTextField();
        jBtIdPesqAtend = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTabelaSolicitacaoExames = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jMatriculaPenal = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jCodigoSolExame = new javax.swing.JTextField();
        jStatusSolExame = new javax.swing.JTextField();
        jDataSolExame = new com.toedter.calendar.JDateChooser();
        jNomeInternoSolExame = new javax.swing.JTextField();
        jBtPesqInternoExame = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jDataNascInternoSolExame = new com.toedter.calendar.JDateChooser();
        jPanel6 = new javax.swing.JPanel();
        jFotoInternoSolExame = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jIdInternoSEMP = new javax.swing.JTextField();
        jSexoInternoSolExame = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jObservacaoSolExame = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jBtNovo = new javax.swing.JButton();
        jBtAlterar = new javax.swing.JButton();
        jBtExcluir = new javax.swing.JButton();
        jBtSalvar = new javax.swing.JButton();
        jBtCancelar = new javax.swing.JButton();
        jBtSair = new javax.swing.JButton();
        jBtAuditoria = new javax.swing.JButton();
        jBtFinalizar = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabelaExamesSolicitados = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jDescricaoExameSolicitado = new javax.swing.JTextField();
        jPrimeiraAmostra = new javax.swing.JTextField();
        jSegundaAmostra = new javax.swing.JTextField();
        jTerceiraAmostra = new javax.swing.JTextField();
        jBtPesqExame = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jIdItemExame = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jBtNovoExame = new javax.swing.JButton();
        jBtAlterarExame = new javax.swing.JButton();
        jBtExcluirExame = new javax.swing.JButton();
        jBtSalvarExame = new javax.swing.JButton();
        jBtCancelarExame = new javax.swing.JButton();
        jBtAuditoriaExame = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("...::: Solicitação de Exames Médicos/Psiquiatricos :::...");

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jPanel32.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        jtotalRegistros.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel32Layout = new javax.swing.GroupLayout(jPanel32);
        jPanel32.setLayout(jPanel32Layout);
        jPanel32Layout.setHorizontalGroup(
            jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtotalRegistros, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
        );
        jPanel32Layout.setVerticalGroup(
            jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtotalRegistros, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE)
        );

        jPanel31.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        javax.swing.GroupLayout jPanel31Layout = new javax.swing.GroupLayout(jPanel31);
        jPanel31.setLayout(jPanel31Layout);
        jPanel31Layout.setHorizontalGroup(
            jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel31Layout.setVerticalGroup(
            jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );

        jPanel30.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        jLabel63.setText("Total de Registros:");

        javax.swing.GroupLayout jPanel30Layout = new javax.swing.GroupLayout(jPanel30);
        jPanel30.setLayout(jPanel30Layout);
        jPanel30Layout.setHorizontalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel30Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel63))
        );
        jPanel30Layout.setVerticalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel63)
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true)));

        jLabel48.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel48.setText("Data Inicial:");

        jDataInicial.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel49.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel49.setText("Data Final:");

        jDataFinal.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jBtPesqData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtPesqData.setContentAreaFilled(false);
        jBtPesqData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtPesqDataActionPerformed(evt);
            }
        });

        jLabel36.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel36.setText("Nome :");

        jCheckBox1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBox1.setText("Todos");
        jCheckBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jPesqNomeInternoOdonto.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jBtPesqNomeInterno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtPesqNomeInterno.setContentAreaFilled(false);
        jBtPesqNomeInterno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtPesqNomeInternoActionPerformed(evt);
            }
        });

        jLabel37.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel37.setText("Código:");

        jIDPesqAtend.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jIDPesqAtend.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jBtIdPesqAtend.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtIdPesqAtend.setContentAreaFilled(false);
        jBtIdPesqAtend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtIdPesqAtendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel36, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel48, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel37, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jIDPesqAtend, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtIdPesqAtend, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel8Layout.createSequentialGroup()
                            .addComponent(jPesqNomeInternoOdonto, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jBtPesqNomeInterno, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel8Layout.createSequentialGroup()
                            .addComponent(jDataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel49)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jDataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jBtPesqData, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBox1))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jBtIdPesqAtend)
                    .addComponent(jIDPesqAtend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel37))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel48)
                            .addComponent(jDataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel49)
                            .addComponent(jDataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtPesqData))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jPesqNomeInternoOdonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel36)
                            .addComponent(jBtPesqNomeInterno)))
                    .addComponent(jCheckBox1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabelaSolicitacaoExames.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jTabelaSolicitacaoExames.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Código", "Data", "Status", "Nome Completo do Interno"
            }
        ));
        jTabelaSolicitacaoExames.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabelaSolicitacaoExamesMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTabelaSolicitacaoExames);
        if (jTabelaSolicitacaoExames.getColumnModel().getColumnCount() > 0) {
            jTabelaSolicitacaoExames.getColumnModel().getColumn(0).setMinWidth(70);
            jTabelaSolicitacaoExames.getColumnModel().getColumn(0).setMaxWidth(70);
            jTabelaSolicitacaoExames.getColumnModel().getColumn(1).setMinWidth(70);
            jTabelaSolicitacaoExames.getColumnModel().getColumn(1).setMaxWidth(70);
            jTabelaSolicitacaoExames.getColumnModel().getColumn(2).setMinWidth(80);
            jTabelaSolicitacaoExames.getColumnModel().getColumn(2).setMaxWidth(80);
            jTabelaSolicitacaoExames.getColumnModel().getColumn(3).setMinWidth(300);
            jTabelaSolicitacaoExames.getColumnModel().getColumn(3).setMaxWidth(300);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jPanel30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel31, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );

        jTabbedPane1.addTab("Listagem", jPanel1);

        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));

        jMatriculaPenal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jMatriculaPenal.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jMatriculaPenal.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Código");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Status");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Data");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Nome do Interno");

        jCodigoSolExame.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jCodigoSolExame.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jCodigoSolExame.setEnabled(false);

        jStatusSolExame.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jStatusSolExame.setForeground(new java.awt.Color(255, 0, 0));
        jStatusSolExame.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jStatusSolExame.setDisabledTextColor(new java.awt.Color(255, 0, 0));
        jStatusSolExame.setEnabled(false);

        jDataSolExame.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jDataSolExame.setEnabled(false);

        jNomeInternoSolExame.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jNomeInternoSolExame.setEnabled(false);

        jBtPesqInternoExame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtPesqInternoExame.setContentAreaFilled(false);
        jBtPesqInternoExame.setEnabled(false);
        jBtPesqInternoExame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtPesqInternoExameActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Dt. Nascimento");

        jDataNascInternoSolExame.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jDataNascInternoSolExame.setEnabled(false);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true), "Foto", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(255, 0, 0))); // NOI18N

        jFotoInternoSolExame.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFotoInternoSolExame, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFotoInternoSolExame, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
        );

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("Matricula");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setText("Código");

        jIdInternoSEMP.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jIdInternoSEMP.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jIdInternoSEMP.setEnabled(false);

        jSexoInternoSolExame.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jSexoInternoSolExame.setEnabled(false);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Sexo");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCodigoSolExame, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel14)
                            .addComponent(jIdInternoSEMP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jStatusSolExame, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jDataSolExame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jBtPesqInternoExame, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addComponent(jMatriculaPenal, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jSexoInternoSolExame))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jDataNascInternoSolExame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(jNomeInternoSolExame))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jCodigoSolExame, jIdInternoSEMP});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel13)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCodigoSolExame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jStatusSolExame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(24, 24, 24))
                                .addComponent(jDataSolExame, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jSexoInternoSolExame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDataNascInternoSolExame, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jMatriculaPenal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtPesqInternoExame)
                            .addComponent(jIdInternoSEMP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jNomeInternoSolExame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jObservacaoSolExame.setColumns(20);
        jObservacaoSolExame.setRows(5);
        jObservacaoSolExame.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jObservacaoSolExame.setEnabled(false);
        jScrollPane2.setViewportView(jObservacaoSolExame);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Observação");

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true)));

        jBtNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/page_add.png"))); // NOI18N
        jBtNovo.setText("Novo");
        jBtNovo.setContentAreaFilled(false);
        jBtNovo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBtNovo.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBtNovo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBtNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtNovoActionPerformed(evt);
            }
        });

        jBtAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/refresh-reload-icone-6258-16.png"))); // NOI18N
        jBtAlterar.setText("Alterar");
        jBtAlterar.setContentAreaFilled(false);
        jBtAlterar.setEnabled(false);
        jBtAlterar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBtAlterar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBtAlterar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBtAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtAlterarActionPerformed(evt);
            }
        });

        jBtExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/3630_16x16.png"))); // NOI18N
        jBtExcluir.setText("Excluir");
        jBtExcluir.setContentAreaFilled(false);
        jBtExcluir.setEnabled(false);
        jBtExcluir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBtExcluir.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBtExcluir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBtExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtExcluirActionPerformed(evt);
            }
        });

        jBtSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/1294_16x16.png"))); // NOI18N
        jBtSalvar.setText("Gravar");
        jBtSalvar.setContentAreaFilled(false);
        jBtSalvar.setEnabled(false);
        jBtSalvar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBtSalvar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBtSalvar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBtSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtSalvarActionPerformed(evt);
            }
        });

        jBtCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Button_Close_Icon_16.png"))); // NOI18N
        jBtCancelar.setText("Cancelar");
        jBtCancelar.setContentAreaFilled(false);
        jBtCancelar.setEnabled(false);
        jBtCancelar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBtCancelar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBtCancelar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBtCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtCancelarActionPerformed(evt);
            }
        });

        jBtSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Log_Out_Icon_16.png"))); // NOI18N
        jBtSair.setText("Sair");
        jBtSair.setContentAreaFilled(false);
        jBtSair.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBtSair.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBtSair.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBtSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtSairActionPerformed(evt);
            }
        });

        jBtAuditoria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/book_open.png"))); // NOI18N
        jBtAuditoria.setContentAreaFilled(false);
        jBtAuditoria.setEnabled(false);
        jBtAuditoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtAuditoriaActionPerformed(evt);
            }
        });

        jBtFinalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/low-security-breach-icone-4155-16.png"))); // NOI18N
        jBtFinalizar.setToolTipText("Finalizar");
        jBtFinalizar.setContentAreaFilled(false);
        jBtFinalizar.setEnabled(false);
        jBtFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtFinalizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jBtNovo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtExcluir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtCancelar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtSair)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtFinalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBtAuditoria, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBtNovo)
                        .addComponent(jBtAlterar)
                        .addComponent(jBtExcluir)
                        .addComponent(jBtSalvar)
                        .addComponent(jBtCancelar)
                        .addComponent(jBtSair))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBtFinalizar)
                            .addComponent(jBtAuditoria))))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(219, 219, 219))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Manutenção", jPanel2);

        jTabelaExamesSolicitados.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jTabelaExamesSolicitados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Registro", "Tipo de Exame", "1ª Amostra", "2 ª Amostra", "3 ª Amostra"
            }
        ));
        jTabelaExamesSolicitados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabelaExamesSolicitadosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTabelaExamesSolicitados);
        if (jTabelaExamesSolicitados.getColumnModel().getColumnCount() > 0) {
            jTabelaExamesSolicitados.getColumnModel().getColumn(0).setMinWidth(70);
            jTabelaExamesSolicitados.getColumnModel().getColumn(0).setMaxWidth(70);
            jTabelaExamesSolicitados.getColumnModel().getColumn(1).setMinWidth(250);
            jTabelaExamesSolicitados.getColumnModel().getColumn(1).setMaxWidth(250);
            jTabelaExamesSolicitados.getColumnModel().getColumn(2).setMinWidth(100);
            jTabelaExamesSolicitados.getColumnModel().getColumn(3).setMinWidth(100);
            jTabelaExamesSolicitados.getColumnModel().getColumn(3).setMaxWidth(100);
            jTabelaExamesSolicitados.getColumnModel().getColumn(4).setMinWidth(100);
            jTabelaExamesSolicitados.getColumnModel().getColumn(4).setMaxWidth(100);
        }

        jPanel4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Tipo Exame");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("1ª Amostra");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("2ª Amostra");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("3ª Amostra");

        jDescricaoExameSolicitado.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jDescricaoExameSolicitado.setEnabled(false);

        jPrimeiraAmostra.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPrimeiraAmostra.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPrimeiraAmostra.setEnabled(false);

        jSegundaAmostra.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jSegundaAmostra.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jSegundaAmostra.setEnabled(false);

        jTerceiraAmostra.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTerceiraAmostra.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jTerceiraAmostra.setEnabled(false);

        jBtPesqExame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtPesqExame.setContentAreaFilled(false);
        jBtPesqExame.setEnabled(false);
        jBtPesqExame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtPesqExameActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Registro");

        jIdItemExame.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jIdItemExame.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jIdItemExame.setEnabled(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPrimeiraAmostra, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jSegundaAmostra, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTerceiraAmostra, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBtPesqExame, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(28, 28, 28))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jIdItemExame, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jDescricaoExameSolicitado, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(14, 14, 14))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jPrimeiraAmostra, jSegundaAmostra, jTerceiraAmostra});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtPesqExame))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jIdItemExame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDescricaoExameSolicitado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jPrimeiraAmostra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSegundaAmostra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTerceiraAmostra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true)));

        jBtNovoExame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/page_add.png"))); // NOI18N
        jBtNovoExame.setToolTipText("Novo");
        jBtNovoExame.setEnabled(false);
        jBtNovoExame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtNovoExameActionPerformed(evt);
            }
        });

        jBtAlterarExame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/refresh-reload-icone-6258-16.png"))); // NOI18N
        jBtAlterarExame.setToolTipText("Alterar");
        jBtAlterarExame.setEnabled(false);
        jBtAlterarExame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtAlterarExameActionPerformed(evt);
            }
        });

        jBtExcluirExame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/3630_16x16.png"))); // NOI18N
        jBtExcluirExame.setToolTipText("Excluir");
        jBtExcluirExame.setEnabled(false);
        jBtExcluirExame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtExcluirExameActionPerformed(evt);
            }
        });

        jBtSalvarExame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/1294_16x16.png"))); // NOI18N
        jBtSalvarExame.setToolTipText("Gravar");
        jBtSalvarExame.setEnabled(false);
        jBtSalvarExame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtSalvarExameActionPerformed(evt);
            }
        });

        jBtCancelarExame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Button_Close_Icon_16.png"))); // NOI18N
        jBtCancelarExame.setToolTipText("Cancelar");
        jBtCancelarExame.setEnabled(false);
        jBtCancelarExame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtCancelarExameActionPerformed(evt);
            }
        });

        jBtAuditoriaExame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/book_open.png"))); // NOI18N
        jBtAuditoriaExame.setToolTipText("Auditoria");
        jBtAuditoriaExame.setContentAreaFilled(false);
        jBtAuditoriaExame.setEnabled(false);
        jBtAuditoriaExame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtAuditoriaExameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBtNovoExame, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtAlterarExame, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtExcluirExame, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtSalvarExame, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtCancelarExame, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBtAuditoriaExame, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel9Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBtAlterarExame, jBtCancelarExame, jBtExcluirExame, jBtNovoExame, jBtSalvarExame});

        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jBtAuditoriaExame)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jBtAlterarExame)
                        .addComponent(jBtExcluirExame, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jBtSalvarExame)
                        .addComponent(jBtCancelarExame, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jBtNovoExame)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel9Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jBtAlterarExame, jBtCancelarExame, jBtExcluirExame, jBtNovoExame, jBtSalvarExame});

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Exames", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 4, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setBounds(300, 40, 573, 430);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtPesqDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtPesqDataActionPerformed
        // TODO add your handling code here:
        flag = 1;
        if (jDataInicial.getDate() == null) {
            JOptionPane.showMessageDialog(rootPane, "Informe a data inicial para pesquisa.");
            jDataInicial.requestFocus();
        } else {
            if (jDataFinal.getDate() == null) {
                JOptionPane.showMessageDialog(rootPane, "Informe a data final para pesquisa.");
                jDataFinal.requestFocus();
            } else {
                if (jDataInicial.getDate().after(jDataFinal.getDate())) {
                    JOptionPane.showMessageDialog(rootPane, "Data Inicial não pode ser maior que data final");
                } else {
                    SimpleDateFormat formatoAmerica = new SimpleDateFormat("dd/MM/yyyy");
                    dataInicial = formatoAmerica.format(jDataInicial.getDate().getTime());
                    dataFinal = formatoAmerica.format(jDataFinal.getDate().getTime());
                    preencherTabelaExameMedicoPsiquiatrico("SELECT * FROM SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO "
                            + "INNER JOIN PRONTUARIOSCRC "
                            + "ON SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                            + "WHERE DataSolExame BETWEEN'" + dataInicial + "'AND '" + dataFinal + "'");
                }
            }
        }
    }//GEN-LAST:event_jBtPesqDataActionPerformed

    private void jCheckBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox1ItemStateChanged
        // TODO add your handling code here:
        count = 0;
        flag = 1;
        if (evt.getStateChange() == evt.SELECTED) {
            this.preencherTabelaExameMedicoPsiquiatrico("SELECT * FROM SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO "
                    + "INNER JOIN PRONTUARIOSCRC "
                    + "ON SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc");
        } else {
            jtotalRegistros.setText("");
            limparTabela();
        }
    }//GEN-LAST:event_jCheckBox1ItemStateChanged

    private void jBtPesqNomeInternoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtPesqNomeInternoActionPerformed
        // TODO add your handling code here:
        count = 0;
        flag = 1;
        preencherTabelaExameMedicoPsiquiatrico("SELECT * FROM SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO "
                + "INNER JOIN PRONTUARIOSCRC "
                + "ON SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                + "WHERE NomeInternoCrc LIKE'%" + jPesqNomeInternoOdonto.getText() + "%'");
    }//GEN-LAST:event_jBtPesqNomeInternoActionPerformed

    private void jBtIdPesqAtendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtIdPesqAtendActionPerformed
        // TODO add your handling code here:
        count = 0;
        flag = 1;
        preencherTabelaExameMedicoPsiquiatrico("SELECT * FROM SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO "
                + "INNER JOIN PRONTUARIOSCRC "
                + "ON SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                + "WHERE IdSolExame='" + jIDPesqAtend.getText() + "'");
    }//GEN-LAST:event_jBtIdPesqAtendActionPerformed

    private void jTabelaSolicitacaoExamesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabelaSolicitacaoExamesMouseClicked
        // TODO add your handling code here:
        flag = 1;
        if (flag == 1) {
            String IdLanc = "" + jTabelaSolicitacaoExames.getValueAt(jTabelaSolicitacaoExames.getSelectedRow(), 0);
            jIDPesqAtend.setText(IdLanc);
            //
            jBtNovo.setEnabled(true);
            jBtAlterar.setEnabled(true);
            jBtExcluir.setEnabled(true);
            jBtSalvar.setEnabled(!true);
            jBtCancelar.setEnabled(true);
            jBtFinalizar.setEnabled(true);
            jBtAuditoria.setEnabled(true);
//            jBtImprimir.setEnabled(true);
            jBtNovoExame.setEnabled(true);
            conecta.abrirConexao();
            try {
                conecta.executaSQL("SELECT * FROM SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO "
                        + "INNER JOIN PRONTUARIOSCRC "
                        + "ON SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                        + "WHERE SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdSolExame='" + IdLanc + "'");
                conecta.rs.first();
                jCodigoSolExame.setText(String.valueOf(conecta.rs.getInt("IdSolExame")));
                jStatusSolExame.setText(conecta.rs.getString("StatusSolExame"));
                jDataSolExame.setDate(conecta.rs.getDate("DataSolExame"));
                jNomeInternoSolExame.setText(conecta.rs.getString("NomeInternoCrc"));
                jMatriculaPenal.setText(conecta.rs.getString("MatriculaCrc"));
                jDataNascInternoSolExame.setDate(conecta.rs.getDate("DataNasciCrc"));
                jSexoInternoSolExame.setText(conecta.rs.getString("SexoCrc"));
                // FOTO DO INTERNO
                caminho = conecta.rs.getString("FotoInternoCrc");
                javax.swing.ImageIcon i = new javax.swing.ImageIcon(caminho);
                jFotoInternoSolExame.setIcon(i);
                jFotoInternoSolExame.setIcon(new ImageIcon(i.getImage().getScaledInstance(jFotoInternoSolExame.getWidth(), jFotoInternoSolExame.getHeight(), Image.SCALE_DEFAULT)));
                jObservacaoSolExame.setText(conecta.rs.getString("Observacao"));
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(rootPane, "Não foi possível exibir registro.\nERRO: " + e);
            }
            preencherTabelaItensExamesSolicitados("SELECT * FROM ITENS_SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO "
                    + "INNER JOIN TIPOS_EXAMES_MEDICO "
                    + "ON ITENS_SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdExame=TIPOS_EXAMES_MEDICO.IdExame "
                    + "INNER JOIN SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO "
                    + "ON ITENS_SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdSolExame=SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdSolExame "
                    + "WHERE ITENS_SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdSolExame='" + jCodigoSolExame.getText() + "'");
            conecta.desconecta();
        }
    }//GEN-LAST:event_jTabelaSolicitacaoExamesMouseClicked

    private void jBtPesqInternoExameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtPesqInternoExameActionPerformed
        // TODO add your handling code here:
        TelaPesqInternoSoliExamesPsiMedico objPesqInterno = new TelaPesqInternoSoliExamesPsiMedico();
        TelaModuloEnfermaria.jPainelMedico.add(objPesqInterno);
        objPesqInterno.show();
    }//GEN-LAST:event_jBtPesqInternoExameActionPerformed

    private void jBtNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtNovoActionPerformed
        // TODO add your handling code here:
        buscarAcessoUsuario(telaSolicitacaoExamesIntManuENF);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || nomeGrupoENF.equals("ADMINISTRADORES") || codigoUserENF == codUserAcessoENF && nomeTelaENF.equals(telaSolicitacaoExamesIntManuENF) && codIncluirENF == 1) {
            statusMov = "Incluiu";
            horaMov = jHoraSistema.getText();
            dataModFinal = jDataSistema.getText();
            acao = 1;
            Novo();
            corCampos();
            limparTabelaExamesSolicitado();
        } else {
            JOptionPane.showMessageDialog(null, "Acesso não autorizado, solicite liberação ao administrador.");
        }
    }//GEN-LAST:event_jBtNovoActionPerformed

    private void jBtAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtAlterarActionPerformed
        // TODO add your handling code here:
        buscarAcessoUsuario(telaSolicitacaoExamesIntManuENF);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || nomeGrupoENF.equals("ADMINISTRADORES") || codigoUserENF == codUserAcessoENF && nomeTelaENF.equals(telaSolicitacaoExamesIntManuENF) && codAlterarENF == 1) {
            objSoliEx.setStatusSolExame(jStatusSolExame.getText());
            if (jStatusSolExame.getText().equals("FINALIZADO")) {
                JOptionPane.showMessageDialog(rootPane, "Esse registro não poderá ser modificado, o mesmo encontra-se FINALIZADO");
            } else {
                acao = 2;
                Alterar();
                statusMov = "Alterou";
                horaMov = jHoraSistema.getText();
                dataModFinal = jDataSistema.getText();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Acesso não autorizado, solicite liberação ao administrador.");
        }
    }//GEN-LAST:event_jBtAlterarActionPerformed

    private void jBtExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtExcluirActionPerformed
        // TODO add your handling code here:
        buscarAcessoUsuario(telaSolicitacaoExamesIntManuENF);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || nomeGrupoENF.equals("ADMINISTRADORES") || codigoUserENF == codUserAcessoENF && nomeTelaENF.equals(telaSolicitacaoExamesIntManuENF) && codExcluirENF == 1) {
            verificarItens();
            statusMov = "Excluiu";
            horaMov = jHoraSistema.getText();
            dataModFinal = jDataSistema.getText();
            objSoliEx.setStatusSolExame(jStatusSolExame.getText());
            if (jStatusSolExame.getText().equals("FINALIZADO")) {
                JOptionPane.showMessageDialog(rootPane, "Esse registro não poderá ser excluído, o mesmo encontra-se FINALIZADO");
            } else {
                if (jCodigoSolExame.getText().equals(codSolExame)) {
                    JOptionPane.showMessageDialog(rootPane, "Esse registro não poderá ser excluído, existe exames para esse registro.");
                } else {
                    int resposta = JOptionPane.showConfirmDialog(this, "Deseja realmente excluir o registro selecionado?", "Confirmação",
                            JOptionPane.YES_NO_OPTION);
                    if (resposta == JOptionPane.YES_OPTION) {
                        objSoliEx.setIdSolExame(Integer.valueOf(jCodigoSolExame.getText()));
                        control.excluirExameMedicoPsiquiatrico(objSoliEx);
                        Excluir();
                        JOptionPane.showMessageDialog(rootPane, "Registro excluído com sucesso.");
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Acesso não autorizado, solicite liberação ao administrador.");
        }
    }//GEN-LAST:event_jBtExcluirActionPerformed

    private void jBtSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtSalvarActionPerformed
        // TODO add your handling code here:
        buscarAcessoUsuario(telaSolicitacaoExamesIntManuENF);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || nomeGrupoENF.equals("ADMINISTRADORES") || codigoUserENF == codUserAcessoENF && nomeTelaENF.equals(telaSolicitacaoExamesIntManuENF) && codGravarENF == 1) {
            if (jDataSolExame.getDate() == null) {
                JOptionPane.showMessageDialog(rootPane, "Informe a data da solicitação do exame.");
            } else if (jNomeInternoSolExame.getText().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Informe o nome do interno para solicitação do exame.");
            } else {
                objSoliEx.setStatusSolExame(jStatusSolExame.getText());
                objSoliEx.setDataSolExame(jDataSolExame.getDate());
                objSoliEx.setIdInternoCrc(Integer.valueOf(jIdInternoSEMP.getText()));
                objSoliEx.setNomeInternoCrc(jNomeInternoSolExame.getText());
                objSoliEx.setObservacao(jObservacaoSolExame.getText());
                if (acao == 1) {
                    objSoliEx.setUsuarioInsert(nameUser);
                    objSoliEx.setDataInsert(dataModFinal);
                    objSoliEx.setHorarioInsert(horaMov);
                    control.incluirExameMedicoPsiquiatrico(objSoliEx);
                    buscarCodigo();
                    //
                    objLog();
                    controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                    JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
                    Salvar();
                }
                if (acao == 2) {
                    objSoliEx.setUsuarioUp(nameUser);
                    objSoliEx.setDataUp(dataModFinal);
                    objSoliEx.setHorarioUp(horaMov);
                    objSoliEx.setIdSolExame(Integer.valueOf(jCodigoSolExame.getText()));
                    control.alterarExameMedicoPsiquiatrico(objSoliEx);
                    //
                    objLog();
                    controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                    JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
                    Salvar();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Acesso não autorizado, solicite liberação ao administrador.");
        }
    }//GEN-LAST:event_jBtSalvarActionPerformed

    private void jBtCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtCancelarActionPerformed
        // TODO add your handling code here:
        Cancelar();
    }//GEN-LAST:event_jBtCancelarActionPerformed

    private void jBtSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtSairActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jBtSairActionPerformed

    private void jBtAuditoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtAuditoriaActionPerformed
        // TODO add your handling code here:
        TelaAuditoriaSolicitacaoExame objAudiSoliEx = new TelaAuditoriaSolicitacaoExame();
        TelaModuloEnfermaria.jPainelMedico.add(objAudiSoliEx);
        objAudiSoliEx.show();
    }//GEN-LAST:event_jBtAuditoriaActionPerformed

    private void jBtPesqExameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtPesqExameActionPerformed
        // TODO add your handling code here:
        TelaPesqTipoExamePsiMedico objPesExame = new TelaPesqTipoExamePsiMedico();
        TelaModuloEnfermaria.jPainelMedico.add(objPesExame);
        objPesExame.show();
    }//GEN-LAST:event_jBtPesqExameActionPerformed

    private void jBtNovoExameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtNovoExameActionPerformed
        // TODO add your handling code here:
        buscarAcessoUsuario(telaSolicitacaoExamesIntManuExameENF);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || nomeGrupoENF.equals("ADMINISTRADORES") || codigoUserENF == codUserAcessoENF && nomeTelaENF.equals(telaSolicitacaoExamesIntManuExameENF) && codIncluirENF == 1) {
            statusMov = "Incluiu";
            horaMov = jHoraSistema.getText();
            dataModFinal = jDataSistema.getText();
            objSoliEx.setStatusSolExame(jStatusSolExame.getText());
            if (jStatusSolExame.getText().equals("FINALIZADO")) {
                JOptionPane.showMessageDialog(rootPane, "Esse registro não poderá ser modificado, o mesmo encontra-se FINALIZADO");
            } else {
                acao = 3;
                NovoExame();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Acesso não autorizado, solicite liberação ao administrador.");
        }
    }//GEN-LAST:event_jBtNovoExameActionPerformed

    private void jBtAlterarExameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtAlterarExameActionPerformed
        // TODO add your handling code here:
        buscarAcessoUsuario(telaSolicitacaoExamesIntManuExameENF);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || nomeGrupoENF.equals("ADMINISTRADORES") || codigoUserENF == codUserAcessoENF && nomeTelaENF.equals(telaSolicitacaoExamesIntManuExameENF) && codAlterarENF == 1) {
            statusMov = "Alterou";
            horaMov = jHoraSistema.getText();
            dataModFinal = jDataSistema.getText();
            objSoliEx.setStatusSolExame(jStatusSolExame.getText());
            if (jStatusSolExame.getText().equals("FINALIZADO")) {
                JOptionPane.showMessageDialog(rootPane, "Esse registro não poderá ser modificado, o mesmo encontra-se FINALIZADO");
            } else {
                acao = 4;
                AlterarExame();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Acesso não autorizado, solicite liberação ao administrador.");
        }
    }//GEN-LAST:event_jBtAlterarExameActionPerformed

    private void jBtExcluirExameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtExcluirExameActionPerformed
        // TODO add your handling code here:
        buscarAcessoUsuario(telaSolicitacaoExamesIntManuExameENF);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || nomeGrupoENF.equals("ADMINISTRADORES") || codigoUserENF == codUserAcessoENF && nomeTelaENF.equals(telaSolicitacaoExamesIntManuExameENF) && codExcluirENF == 1) {
            statusMov = "Excluiu";
            horaMov = jHoraSistema.getText();
            dataModFinal = jDataSistema.getText();
            objSoliEx.setStatusSolExame(jStatusSolExame.getText());
            if (jStatusSolExame.getText().equals("FINALIZADO")) {
                JOptionPane.showMessageDialog(rootPane, "Esse registro não poderá ser excluido, o mesmo encontra-se FINALIZADO");
            } else {
                if (jStatusSolExame.getText().equals("FINALIZADO")) {
                    JOptionPane.showMessageDialog(rootPane, "Esse registro não poderá ser excluído, o mesmo encontra-se FINALIZADO");
                } else {
                    int resposta = JOptionPane.showConfirmDialog(this, "Deseja realmente excluir o registro selecionado?", "Confirmação",
                            JOptionPane.YES_NO_OPTION);
                    if (resposta == JOptionPane.YES_OPTION) {
                        objItensExame.setIdItemExame(Integer.valueOf(jIdItemExame.getText()));
                        controle.excluirItensExameMedicoPsiquiatrico(objItensExame);
                        objLog1();
                        controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                        ExcluirExame();
                        preencherTabelaItensExamesSolicitados("SELECT * FROM ITENS_SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO "
                                + "INNER JOIN TIPOS_EXAMES_MEDICO "
                                + "ON ITENS_SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdExame=TIPOS_EXAMES_MEDICO.IdExame "
                                + "INNER JOIN SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO "
                                + "ON ITENS_SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdSolExame=SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdSolExame "
                                + "WHERE ITENS_SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdSolExame='" + jCodigoSolExame.getText() + "'");
                        JOptionPane.showMessageDialog(rootPane, "Registro excluído com sucesso.");
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Acesso não autorizado, solicite liberação ao administrador.");
        }
    }//GEN-LAST:event_jBtExcluirExameActionPerformed

    private void jBtSalvarExameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtSalvarExameActionPerformed
        // TODO add your handling code here:
        buscarAcessoUsuario(telaSolicitacaoExamesIntManuExameENF);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || nomeGrupoENF.equals("ADMINISTRADORES") || codigoUserENF == codUserAcessoENF && nomeTelaENF.equals(telaSolicitacaoExamesIntManuExameENF) && codGravarENF == 1) {
            if (jDescricaoExameSolicitado.getText().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Informe o tipo de exame do interno.");
            } else {
                objItensExame.setIdExame(Integer.valueOf(jCodigoSolExame.getText()));
                objItensExame.setIdSolExame(Integer.valueOf(jCodigoSolExame.getText()));
                objItensExame.setNomeInternoExame(jNomeInternoSolExame.getText());
                objItensExame.setDescricaoExame(jDescricaoExameSolicitado.getText());
                objItensExame.setPrimeiraAmostra(jPrimeiraAmostra.getText());
                objItensExame.setSegundaAmostra(jSegundaAmostra.getText());
                objItensExame.setTerceiraAmostra(jTerceiraAmostra.getText());
                if (acao == 3) {
                    objItensExame.setUsuarioInsert(nameUser);
                    objItensExame.setDataInsert(dataModFinal);
                    objItensExame.setHorarioInsert(horaMov);
                    controle.incluirItensExameMedicoPsiquiatrico(objItensExame);
                    buscarCodigoExame();
                    objLog1();
                    controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                    SalvarExame();
                    preencherTabelaItensExamesSolicitados("SELECT * FROM ITENS_SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO "
                            + "INNER JOIN TIPOS_EXAMES_MEDICO "
                            + "ON ITENS_SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdExame=TIPOS_EXAMES_MEDICO.IdExame "
                            + "INNER JOIN SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO "
                            + "ON ITENS_SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdSolExame=SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdSolExame "
                            + "WHERE ITENS_SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdSolExame='" + jCodigoSolExame.getText() + "'");
                    JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
                }
                if (acao == 4) {
                    objItensExame.setUsuarioUp(nameUser);
                    objItensExame.setDataUp(dataModFinal);
                    objItensExame.setHorarioUp(horaMov);
                    objItensExame.setIdItemExame(Integer.valueOf(jIdItemExame.getText()));
                    controle.alterarItensExameMedicoPsiquiatrico(objItensExame);
                    objLog1();
                    controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                    SalvarExame();
                    preencherTabelaItensExamesSolicitados("SELECT * FROM ITENS_SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO "
                            + "INNER JOIN TIPOS_EXAMES_MEDICO "
                            + "ON ITENS_SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdExame=TIPOS_EXAMES_MEDICO.IdExame "
                            + "INNER JOIN SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO "
                            + "ON ITENS_SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdSolExame=SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdSolExame "
                            + "WHERE ITENS_SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdSolExame='" + jCodigoSolExame.getText() + "'");
                    JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Acesso não autorizado, solicite liberação ao administrador.");
        }
    }//GEN-LAST:event_jBtSalvarExameActionPerformed

    private void jBtCancelarExameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtCancelarExameActionPerformed
        // TODO add your handling code here:
        CancelarExame();
    }//GEN-LAST:event_jBtCancelarExameActionPerformed

    private void jBtAuditoriaExameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtAuditoriaExameActionPerformed
        // TODO add your handling code here:
        TelaAuditoriaItensSoliExame objAutItensSoli = new TelaAuditoriaItensSoliExame();
        TelaModuloEnfermaria.jPainelMedico.add(objAutItensSoli);
        objAutItensSoli.show();
    }//GEN-LAST:event_jBtAuditoriaExameActionPerformed

    private void jTabelaExamesSolicitadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabelaExamesSolicitadosMouseClicked
        // TODO add your handling code here:
        if (flag == 1) {
            String idRegistro = "" + jTabelaExamesSolicitados.getValueAt(jTabelaExamesSolicitados.getSelectedRow(), 0);
            jIdItemExame.setText(idRegistro);
            //
            jBtNovoExame.setEnabled(true);
            jBtAlterarExame.setEnabled(true);
            jBtExcluirExame.setEnabled(true);
            jBtSalvarExame.setEnabled(!true);
            jBtCancelarExame.setEnabled(true);
            jBtAuditoriaExame.setEnabled(true);
            //
            conecta.abrirConexao();
            try {
                conecta.executaSQL("SELECT * FROM ITENS_SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO "
                        + "INNER JOIN TIPOS_EXAMES_MEDICO "
                        + "ON ITENS_SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdExame=TIPOS_EXAMES_MEDICO.IdExame "
                        + "INNER JOIN SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO "
                        + "ON ITENS_SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdSolExame=SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdSolExame "
                        + "WHERE ITENS_SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO.IdItemExame='" + idRegistro + "'");
                conecta.rs.first();
                jIdItemExame.setText(conecta.rs.getString("IdItemExame"));
                jDescricaoExameSolicitado.setText(conecta.rs.getString("DescricaoExame"));
                jPrimeiraAmostra.setText(conecta.rs.getString("PrimeiraAmostra"));
                jSegundaAmostra.setText(conecta.rs.getString("SegundaAmostra"));
                jTerceiraAmostra.setText(conecta.rs.getString("TerceiraAmostra"));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Não foi possível exibir registro.\nERRO: " + e);
            }
            conecta.desconecta();
        }
    }//GEN-LAST:event_jTabelaExamesSolicitadosMouseClicked

    private void jBtFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtFinalizarActionPerformed
        // TODO add your handling code here:
        conecta.abrirConexao();
        try {
            conecta.executaSQL("SELECT * FROM SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO WHERE IdSolExame='" + jCodigoSolExame.getText() + "'");
            conecta.rs.first();
            jStatusSolExame.setText(conecta.rs.getString("StatusSolExame"));
            if (jStatusSolExame.getText().equals("FINALIZADO")) {
                JOptionPane.showMessageDialog(rootPane, "Lançamento já foi finalizado");
            } else {
                Finalizar();
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Não foi possível verificar se lançamento foi finalizado\nERRO: " + ex);
        }
        conecta.desconecta();
    }//GEN-LAST:event_jBtFinalizarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtAlterar;
    private javax.swing.JButton jBtAlterarExame;
    private javax.swing.JButton jBtAuditoria;
    private javax.swing.JButton jBtAuditoriaExame;
    private javax.swing.JButton jBtCancelar;
    private javax.swing.JButton jBtCancelarExame;
    private javax.swing.JButton jBtExcluir;
    private javax.swing.JButton jBtExcluirExame;
    private javax.swing.JButton jBtFinalizar;
    private javax.swing.JButton jBtIdPesqAtend;
    private javax.swing.JButton jBtNovo;
    private javax.swing.JButton jBtNovoExame;
    private javax.swing.JButton jBtPesqData;
    private javax.swing.JButton jBtPesqExame;
    private javax.swing.JButton jBtPesqInternoExame;
    private javax.swing.JButton jBtPesqNomeInterno;
    private javax.swing.JButton jBtSair;
    private javax.swing.JButton jBtSalvar;
    private javax.swing.JButton jBtSalvarExame;
    private javax.swing.JCheckBox jCheckBox1;
    public static javax.swing.JTextField jCodigoSolExame;
    private com.toedter.calendar.JDateChooser jDataFinal;
    private com.toedter.calendar.JDateChooser jDataInicial;
    public static com.toedter.calendar.JDateChooser jDataNascInternoSolExame;
    private com.toedter.calendar.JDateChooser jDataSolExame;
    public static javax.swing.JTextField jDescricaoExameSolicitado;
    public static javax.swing.JLabel jFotoInternoSolExame;
    private javax.swing.JTextField jIDPesqAtend;
    public static javax.swing.JTextField jIdInternoSEMP;
    public static javax.swing.JTextField jIdItemExame;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    public static javax.swing.JTextField jMatriculaPenal;
    public static javax.swing.JTextField jNomeInternoSolExame;
    private javax.swing.JTextArea jObservacaoSolExame;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTextField jPesqNomeInternoOdonto;
    private javax.swing.JTextField jPrimeiraAmostra;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jSegundaAmostra;
    public static javax.swing.JTextField jSexoInternoSolExame;
    private javax.swing.JTextField jStatusSolExame;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTabelaExamesSolicitados;
    private javax.swing.JTable jTabelaSolicitacaoExames;
    private javax.swing.JTextField jTerceiraAmostra;
    private javax.swing.JLabel jtotalRegistros;
    // End of variables declaration//GEN-END:variables

    public void formatarCampos() {
        jObservacaoSolExame.setLineWrap(true);
        jObservacaoSolExame.setWrapStyleWord(true);
    }

    public void corCampos() {
        jCodigoSolExame.setBackground(Color.white);
        jStatusSolExame.setBackground(Color.white);
        jDataSolExame.setBackground(Color.white);
        jIdInternoSEMP.setBackground(Color.white);
        jNomeInternoSolExame.setBackground(Color.white);
        jMatriculaPenal.setBackground(Color.white);
        jDataNascInternoSolExame.setBackground(Color.white);
        jSexoInternoSolExame.setBackground(Color.white);
        jObservacaoSolExame.setBackground(Color.white);
        // ABA EXAMES
        jIdItemExame.setBackground(Color.white);
        jDescricaoExameSolicitado.setBackground(Color.white);
        jPrimeiraAmostra.setBackground(Color.white);
        jSegundaAmostra.setBackground(Color.white);
        jTerceiraAmostra.setBackground(Color.white);
    }

    public void Novo() {
        jCodigoSolExame.setText("");
        jStatusSolExame.setText("ABERTO");
        jDataSolExame.setCalendar(Calendar.getInstance());
        jIdInternoSEMP.setText("");
        jNomeInternoSolExame.setText("");
        jMatriculaPenal.setText("");
        jDataNascInternoSolExame.setDate(null);
        jSexoInternoSolExame.setText("");
        jObservacaoSolExame.setText("");
        //
        jDataSolExame.setEnabled(true);
        jObservacaoSolExame.setEnabled(true);
        jBtPesqInternoExame.setEnabled(true);
        //
        jBtNovo.setEnabled(!true);
        jBtAlterar.setEnabled(!true);
        jBtExcluir.setEnabled(!true);
        jBtSalvar.setEnabled(true);
        jBtCancelar.setEnabled(true);
        jBtAuditoria.setEnabled(!true);
        jBtFinalizar.setEnabled(!true);
        // ABA EXAMES
        jIdItemExame.setText("");
        jDescricaoExameSolicitado.setText("");
        jPrimeiraAmostra.setText("");
        jSegundaAmostra.setText("");
        jTerceiraAmostra.setText("");
        //
        jDescricaoExameSolicitado.setEnabled(!true);
        jPrimeiraAmostra.setEnabled(!true);
        jSegundaAmostra.setEnabled(!true);
        jTerceiraAmostra.setEnabled(!true);
        jBtPesqExame.setEnabled(!true);
        //
        jBtNovoExame.setEnabled(!true);
        jBtAlterarExame.setEnabled(!true);
        jBtExcluirExame.setEnabled(!true);
        jBtSalvarExame.setEnabled(!true);
        jBtCancelarExame.setEnabled(!true);
        jBtAuditoriaExame.setEnabled(!true);
    }

    public void Alterar() {
        jDataSolExame.setEnabled(true);
        jObservacaoSolExame.setEnabled(true);
        jBtPesqInternoExame.setEnabled(true);
        //
        jBtNovo.setEnabled(!true);
        jBtAlterar.setEnabled(!true);
        jBtExcluir.setEnabled(!true);
        jBtSalvar.setEnabled(true);
        jBtCancelar.setEnabled(true);
        jBtAuditoria.setEnabled(!true);
        jBtFinalizar.setEnabled(!true);
        // ABA EXAMES
        jIdItemExame.setText("");
        jDescricaoExameSolicitado.setText("");
        jPrimeiraAmostra.setText("");
        jSegundaAmostra.setText("");
        jTerceiraAmostra.setText("");
        //
        jDescricaoExameSolicitado.setEnabled(!true);
        jPrimeiraAmostra.setEnabled(!true);
        jSegundaAmostra.setEnabled(!true);
        jTerceiraAmostra.setEnabled(!true);
        jBtPesqExame.setEnabled(!true);
        //
        jBtNovoExame.setEnabled(!true);
        jBtAlterarExame.setEnabled(!true);
        jBtExcluirExame.setEnabled(!true);
        jBtSalvarExame.setEnabled(!true);
        jBtCancelarExame.setEnabled(!true);
        jBtAuditoriaExame.setEnabled(!true);
    }

    public void Excluir() {
        jCodigoSolExame.setText("");
        jStatusSolExame.setText("");
        jDataSolExame.setDate(null);
        jIdInternoSEMP.setText("");
        jNomeInternoSolExame.setText("");
        jMatriculaPenal.setText("");
        jDataNascInternoSolExame.setDate(null);
        jSexoInternoSolExame.setText("");
        jObservacaoSolExame.setText("");
        //
        jDataSolExame.setEnabled(!true);
        jObservacaoSolExame.setEnabled(!true);
        jBtPesqInternoExame.setEnabled(!true);
        //
        jBtNovo.setEnabled(true);
        jBtAlterar.setEnabled(!true);
        jBtExcluir.setEnabled(!true);
        jBtSalvar.setEnabled(!true);
        jBtCancelar.setEnabled(!true);
        jBtAuditoria.setEnabled(!true);
        jBtFinalizar.setEnabled(!true);
        // ABA EXAMES
        jIdItemExame.setText("");
        jDescricaoExameSolicitado.setText("");
        jPrimeiraAmostra.setText("");
        jSegundaAmostra.setText("");
        jTerceiraAmostra.setText("");
        //
        jDescricaoExameSolicitado.setEnabled(!true);
        jPrimeiraAmostra.setEnabled(!true);
        jSegundaAmostra.setEnabled(!true);
        jTerceiraAmostra.setEnabled(!true);
        jBtPesqExame.setEnabled(!true);
        //
        jBtNovoExame.setEnabled(!true);
        jBtAlterarExame.setEnabled(!true);
        jBtExcluirExame.setEnabled(!true);
        jBtSalvarExame.setEnabled(!true);
        jBtCancelarExame.setEnabled(!true);
        jBtAuditoriaExame.setEnabled(!true);
    }

    public void Salvar() {
        jDataSolExame.setEnabled(!true);
        jObservacaoSolExame.setEnabled(!true);
        jBtPesqInternoExame.setEnabled(true);
        //
        jBtNovo.setEnabled(true);
        jBtAlterar.setEnabled(true);
        jBtExcluir.setEnabled(true);
        jBtSalvar.setEnabled(!true);
        jBtCancelar.setEnabled(!true);
        jBtAuditoria.setEnabled(true);
        jBtFinalizar.setEnabled(true);
        // ABA EXAMES                   
        jBtNovoExame.setEnabled(true);
        jBtAlterarExame.setEnabled(!true);
        jBtExcluirExame.setEnabled(!true);
        jBtSalvarExame.setEnabled(!true);
        jBtCancelarExame.setEnabled(!true);
        jBtAuditoriaExame.setEnabled(!true);
    }

    public void Cancelar() {
        if (jCodigoSolExame.getText().equals("")) {
            jStatusSolExame.setText("");
            jDataSolExame.setDate(null);
            jIdInternoSEMP.setText("");
            jNomeInternoSolExame.setText("");
            jMatriculaPenal.setText("");
            jDataNascInternoSolExame.setDate(null);
            jSexoInternoSolExame.setText("");
            jObservacaoSolExame.setText("");
            //
            jDataSolExame.setEnabled(!true);
            jObservacaoSolExame.setEnabled(!true);
            jBtPesqInternoExame.setEnabled(!true);
            //
            jBtNovo.setEnabled(true);
            jBtAlterar.setEnabled(!true);
            jBtExcluir.setEnabled(!true);
            jBtSalvar.setEnabled(!true);
            jBtCancelar.setEnabled(!true);
            jBtAuditoria.setEnabled(!true);
            jBtFinalizar.setEnabled(!true);
        } else {
            jDataSolExame.setEnabled(!true);
            jObservacaoSolExame.setEnabled(!true);
            jBtPesqInternoExame.setEnabled(!true);
            //
            jBtNovo.setEnabled(true);
            jBtAlterar.setEnabled(true);
            jBtExcluir.setEnabled(true);
            jBtSalvar.setEnabled(!true);
            jBtCancelar.setEnabled(!true);
            jBtAuditoria.setEnabled(true);
            jBtFinalizar.setEnabled(true);
            // ABA EXAMES        
            jBtNovoExame.setEnabled(true);
            jBtAlterarExame.setEnabled(!true);
            jBtExcluirExame.setEnabled(!true);
            jBtSalvarExame.setEnabled(!true);
            jBtCancelarExame.setEnabled(!true);
            jBtAuditoriaExame.setEnabled(!true);
        }
    }

    public void Finalizar() {
        statusMov = "Finalizou";
        horaMov = jHoraSistema.getText();
        dataModFinal = jDataSistema.getText();
        String statusAtend = "FINALIZADO";
        JOptionPane.showMessageDialog(rootPane, "Se ess registro for finaliza,\nvocê não poderá mais excluir ou alterar.");
        int resposta = JOptionPane.showConfirmDialog(this, "Deseja realmente FINALIZA o regitro selecionado?", "Confirmação",
                JOptionPane.YES_NO_OPTION);
        if (resposta == JOptionPane.YES_OPTION) {
            objSoliEx.setStatusSolExame(statusAtend);
            objSoliEx.setIdSolExame(Integer.parseInt(jCodigoSolExame.getText()));
            control.finalizarExameMedicoPsiquiatrico(objSoliEx);
            jStatusSolExame.setText(statusAtend);
            objLog();
            controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
            JOptionPane.showMessageDialog(rootPane, "Registro FINALIZADO com sucesso !!!");
        }
    }

    public void buscarCodigo() {
        conecta.abrirConexao();
        try {
            conecta.executaSQL("SELECT * FROM SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO");
            conecta.rs.last();
            jCodigoSolExame.setText(conecta.rs.getString("IdSolExame"));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Não foi possível obter o código do registro.\nERRO: " + e);
        }
        conecta.desconecta();
    }

    public void verificarItens() {
        conecta.abrirConexao();
        try {
            conecta.executaSQL("SELECT * FROM ITENS_SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO WHERE IdSolExame='" + jCodigoSolExame.getText() + "'");
            conecta.rs.first();
            codSolExame = conecta.rs.getString("IdSolExame");
        } catch (Exception e) {
        }
        conecta.desconecta();
    }

    public void NovoExame() {
        // ABA EXAMES  
        jIdItemExame.setText("");
        jDescricaoExameSolicitado.setText("");
        jPrimeiraAmostra.setText("");
        jSegundaAmostra.setText("");
        jTerceiraAmostra.setText("");
        //        
        jPrimeiraAmostra.setEnabled(true);
        jSegundaAmostra.setEnabled(true);
        jTerceiraAmostra.setEnabled(true);
        jBtPesqExame.setEnabled(true);
        //
        jBtNovoExame.setEnabled(!true);
        jBtAlterarExame.setEnabled(!true);
        jBtExcluirExame.setEnabled(!true);
        jBtSalvarExame.setEnabled(true);
        jBtCancelarExame.setEnabled(true);
        jBtAuditoriaExame.setEnabled(!true);
        // ABA MANUTENÇÃO
        jDataSolExame.setEnabled(!true);
        jObservacaoSolExame.setEnabled(!true);
        jBtPesqInternoExame.setEnabled(!true);
        //
        jBtNovo.setEnabled(!true);
        jBtAlterar.setEnabled(!true);
        jBtExcluir.setEnabled(!true);
        jBtSalvar.setEnabled(!true);
        jBtCancelar.setEnabled(!true);
        jBtAuditoria.setEnabled(!true);
    }

    public void AlterarExame() {
        jPrimeiraAmostra.setEnabled(true);
        jSegundaAmostra.setEnabled(true);
        jTerceiraAmostra.setEnabled(true);
        jBtPesqExame.setEnabled(true);
        //
        jBtNovoExame.setEnabled(!true);
        jBtAlterarExame.setEnabled(!true);
        jBtExcluirExame.setEnabled(!true);
        jBtSalvarExame.setEnabled(true);
        jBtCancelarExame.setEnabled(true);
        jBtAuditoriaExame.setEnabled(!true);
        // ABA MANUTENÇÃO
        jDataSolExame.setEnabled(!true);
        jObservacaoSolExame.setEnabled(!true);
        jBtPesqInternoExame.setEnabled(!true);
        //
        jBtNovo.setEnabled(!true);
        jBtAlterar.setEnabled(!true);
        jBtExcluir.setEnabled(!true);
        jBtSalvar.setEnabled(!true);
        jBtCancelar.setEnabled(!true);
        jBtAuditoria.setEnabled(!true);
    }

    public void ExcluirExame() {
        jIdItemExame.setText("");
        jDescricaoExameSolicitado.setText("");
        jPrimeiraAmostra.setText("");
        jSegundaAmostra.setText("");
        jTerceiraAmostra.setText("");
        //        
        jPrimeiraAmostra.setEnabled(!true);
        jSegundaAmostra.setEnabled(!true);
        jTerceiraAmostra.setEnabled(!true);
        jBtPesqExame.setEnabled(!true);
        //
        jBtNovoExame.setEnabled(true);
        jBtAlterarExame.setEnabled(!true);
        jBtExcluirExame.setEnabled(!true);
        jBtSalvarExame.setEnabled(!true);
        jBtCancelarExame.setEnabled(!true);
        jBtAuditoriaExame.setEnabled(!true);
        // ABA MANUTENÇÃO
        jDataSolExame.setEnabled(!true);
        jObservacaoSolExame.setEnabled(!true);
        jBtPesqInternoExame.setEnabled(!true);
        //
        jBtNovo.setEnabled(true);
        jBtAlterar.setEnabled(true);
        jBtExcluir.setEnabled(true);
        jBtSalvar.setEnabled(!true);
        jBtCancelar.setEnabled(!true);
        jBtAuditoria.setEnabled(true);
    }

    public void SalvarExame() {
        jIdItemExame.setText("");
        jDescricaoExameSolicitado.setText("");
        jPrimeiraAmostra.setText("");
        jSegundaAmostra.setText("");
        jTerceiraAmostra.setText("");
        //        
        jPrimeiraAmostra.setEnabled(!true);
        jSegundaAmostra.setEnabled(!true);
        jTerceiraAmostra.setEnabled(!true);
        jBtPesqExame.setEnabled(!true);
        //
        jBtNovoExame.setEnabled(true);
        jBtAlterarExame.setEnabled(!true);
        jBtExcluirExame.setEnabled(!true);
        jBtSalvarExame.setEnabled(!true);
        jBtCancelarExame.setEnabled(!true);
        jBtAuditoriaExame.setEnabled(!true);
        // ABA MANUTENÇÃO
        jDataSolExame.setEnabled(!true);
        jObservacaoSolExame.setEnabled(!true);
        jBtPesqInternoExame.setEnabled(!true);
        //
        jBtNovo.setEnabled(true);
        jBtAlterar.setEnabled(true);
        jBtExcluir.setEnabled(true);
        jBtSalvar.setEnabled(!true);
        jBtCancelar.setEnabled(!true);
        jBtAuditoria.setEnabled(true);
    }

    public void CancelarExame() {
        jIdItemExame.setText("");
        jDescricaoExameSolicitado.setText("");
        jPrimeiraAmostra.setText("");
        jSegundaAmostra.setText("");
        jTerceiraAmostra.setText("");
        //        
        jPrimeiraAmostra.setEnabled(!true);
        jSegundaAmostra.setEnabled(!true);
        jTerceiraAmostra.setEnabled(!true);
        jBtPesqExame.setEnabled(!true);
        //
        jBtNovoExame.setEnabled(true);
        jBtAlterarExame.setEnabled(!true);
        jBtExcluirExame.setEnabled(!true);
        jBtSalvarExame.setEnabled(!true);
        jBtCancelarExame.setEnabled(!true);
        jBtAuditoriaExame.setEnabled(!true);
        // ABA MANUTENÇÃO
        jDataSolExame.setEnabled(!true);
        jObservacaoSolExame.setEnabled(!true);
        jBtPesqInternoExame.setEnabled(!true);
        //
        jBtNovo.setEnabled(true);
        jBtAlterar.setEnabled(true);
        jBtExcluir.setEnabled(true);
        jBtSalvar.setEnabled(!true);
        jBtCancelar.setEnabled(!true);
        jBtAuditoria.setEnabled(true);
    }

    public void buscarCodigoExame() {
        conecta.abrirConexao();
        try {
            conecta.executaSQL("SELECT * FROM ITENS_SOLICITACAO_EXAMES_MEDICO_PSIQUIATRICO");
            conecta.rs.last();
            jIdItemExame.setText(conecta.rs.getString("IdItemExame"));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Não foi possível obter o código do registro.\nERRO: " + e);
        }
        conecta.desconecta();
    }

    public void preencherTabelaItensExamesSolicitados(String sql) {
        ArrayList dados = new ArrayList();
        String[] Colunas = new String[]{"Registro", "Tipo de Exame", "1ª Amostra", "2ª Amostra", "3ª Amostra"};
        conecta.abrirConexao();
        try {
            conecta.executaSQL(sql);
            conecta.rs.first();
            do {
                dados.add(new Object[]{conecta.rs.getInt("IdItemExame"), conecta.rs.getString("DescricaoExame"), conecta.rs.getString("PrimeiraAmostra"), conecta.rs.getString("SegundaAmostra"), conecta.rs.getString("TerceiraAmostra")});
            } while (conecta.rs.next());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Não existem dados a serem EXIBIDOS !!!");
        }
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTabelaExamesSolicitados.setModel(modelo);
        jTabelaExamesSolicitados.getColumnModel().getColumn(0).setPreferredWidth(70);
        jTabelaExamesSolicitados.getColumnModel().getColumn(0).setResizable(false);
        jTabelaExamesSolicitados.getColumnModel().getColumn(1).setPreferredWidth(250);
        jTabelaExamesSolicitados.getColumnModel().getColumn(1).setResizable(false);
        jTabelaExamesSolicitados.getColumnModel().getColumn(2).setPreferredWidth(100);
        jTabelaExamesSolicitados.getColumnModel().getColumn(2).setResizable(false);
        jTabelaExamesSolicitados.getColumnModel().getColumn(3).setPreferredWidth(100);
        jTabelaExamesSolicitados.getColumnModel().getColumn(3).setResizable(false);
        jTabelaExamesSolicitados.getColumnModel().getColumn(4).setPreferredWidth(100);
        jTabelaExamesSolicitados.getColumnModel().getColumn(4).setResizable(false);
        jTabelaExamesSolicitados.getTableHeader().setReorderingAllowed(false);
        jTabelaExamesSolicitados.setAutoResizeMode(jTabelaExamesSolicitados.AUTO_RESIZE_OFF);
        jTabelaExamesSolicitados.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        alinharCamposTabelaExamesSolicitados();
        conecta.desconecta();
    }

    public void limparTabelaExamesSolicitado() {
        ArrayList dados = new ArrayList();
        String[] Colunas = new String[]{"Registro", "Tipo de Exame", "1ª Amostra", "2ª Amostra", "3ª Amostra"};
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTabelaExamesSolicitados.setModel(modelo);
        jTabelaExamesSolicitados.getColumnModel().getColumn(0).setPreferredWidth(70);
        jTabelaExamesSolicitados.getColumnModel().getColumn(0).setResizable(false);
        jTabelaExamesSolicitados.getColumnModel().getColumn(1).setPreferredWidth(250);
        jTabelaExamesSolicitados.getColumnModel().getColumn(1).setResizable(false);
        jTabelaExamesSolicitados.getColumnModel().getColumn(2).setPreferredWidth(100);
        jTabelaExamesSolicitados.getColumnModel().getColumn(2).setResizable(false);
        jTabelaExamesSolicitados.getColumnModel().getColumn(3).setPreferredWidth(100);
        jTabelaExamesSolicitados.getColumnModel().getColumn(3).setResizable(false);
        jTabelaExamesSolicitados.getColumnModel().getColumn(4).setPreferredWidth(100);
        jTabelaExamesSolicitados.getColumnModel().getColumn(4).setResizable(false);
        jTabelaExamesSolicitados.getTableHeader().setReorderingAllowed(false);
        jTabelaExamesSolicitados.setAutoResizeMode(jTabelaExamesSolicitados.AUTO_RESIZE_OFF);
        jTabelaExamesSolicitados.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        modelo.getLinhas().clear();
    }

    public void alinharCamposTabelaExamesSolicitados() {
        DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
        DefaultTableCellRenderer direita = new DefaultTableCellRenderer();
        centralizado.setHorizontalAlignment(SwingConstants.CENTER);
        direita.setHorizontalAlignment(SwingConstants.RIGHT);
        //
        jTabelaExamesSolicitados.getColumnModel().getColumn(0).setCellRenderer(centralizado);
    }

    public void preencherTabelaExameMedicoPsiquiatrico(String sql) {
        ArrayList dados = new ArrayList();
        String[] Colunas = new String[]{"Código", "Data", "Status", "Nome Completo do Interno"};
        conecta.abrirConexao();
        try {
            conecta.executaSQL(sql);
            conecta.rs.first();
            do {
                count = count + 1;
                // Formatar a data de emissão
                dataEmissao = conecta.rs.getString("DataSolExame");
                String dia = dataEmissao.substring(8, 10);
                String mes = dataEmissao.substring(5, 7);
                String ano = dataEmissao.substring(0, 4);
                dataEmissao = dia + "/" + mes + "/" + ano;
                //
                jtotalRegistros.setText(Integer.toString(count)); // Converter inteiro em string para exibir na tela
                dados.add(new Object[]{conecta.rs.getInt("IdSolExame"), dataEmissao, conecta.rs.getString("StatusSolExame"), conecta.rs.getString("NomeInternoCrc")});
            } while (conecta.rs.next());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Não existem dados a serem EXIBIDOS !!!");
        }
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTabelaSolicitacaoExames.setModel(modelo);
        jTabelaSolicitacaoExames.getColumnModel().getColumn(0).setPreferredWidth(70);
        jTabelaSolicitacaoExames.getColumnModel().getColumn(0).setResizable(false);
        jTabelaSolicitacaoExames.getColumnModel().getColumn(1).setPreferredWidth(70);
        jTabelaSolicitacaoExames.getColumnModel().getColumn(1).setResizable(false);
        jTabelaSolicitacaoExames.getColumnModel().getColumn(2).setPreferredWidth(80);
        jTabelaSolicitacaoExames.getColumnModel().getColumn(2).setResizable(false);
        jTabelaSolicitacaoExames.getColumnModel().getColumn(3).setPreferredWidth(300);
        jTabelaSolicitacaoExames.getColumnModel().getColumn(3).setResizable(false);
        jTabelaSolicitacaoExames.getTableHeader().setReorderingAllowed(false);
        jTabelaSolicitacaoExames.setAutoResizeMode(jTabelaSolicitacaoExames.AUTO_RESIZE_OFF);
        jTabelaSolicitacaoExames.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        alinharCamposTabela();
        conecta.desconecta();
    }

    public void limparTabela() {
        ArrayList dados = new ArrayList();
        String[] Colunas = new String[]{"Código", "Data", "Status", "Nome Completo do Interno"};
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTabelaSolicitacaoExames.setModel(modelo);
        jTabelaSolicitacaoExames.getColumnModel().getColumn(0).setPreferredWidth(70);
        jTabelaSolicitacaoExames.getColumnModel().getColumn(0).setResizable(false);
        jTabelaSolicitacaoExames.getColumnModel().getColumn(1).setPreferredWidth(70);
        jTabelaSolicitacaoExames.getColumnModel().getColumn(1).setResizable(false);
        jTabelaSolicitacaoExames.getColumnModel().getColumn(2).setPreferredWidth(80);
        jTabelaSolicitacaoExames.getColumnModel().getColumn(2).setResizable(false);
        jTabelaSolicitacaoExames.getColumnModel().getColumn(3).setPreferredWidth(300);
        jTabelaSolicitacaoExames.getColumnModel().getColumn(3).setResizable(false);
        jTabelaSolicitacaoExames.getTableHeader().setReorderingAllowed(false);
        jTabelaSolicitacaoExames.setAutoResizeMode(jTabelaSolicitacaoExames.AUTO_RESIZE_OFF);
        jTabelaSolicitacaoExames.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        modelo.getLinhas().clear();
    }

    public void alinharCamposTabela() {
        DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
        DefaultTableCellRenderer direita = new DefaultTableCellRenderer();
        centralizado.setHorizontalAlignment(SwingConstants.CENTER);
        direita.setHorizontalAlignment(SwingConstants.RIGHT);
        //
        jTabelaSolicitacaoExames.getColumnModel().getColumn(0).setCellRenderer(centralizado);
        jTabelaSolicitacaoExames.getColumnModel().getColumn(1).setCellRenderer(centralizado);
        jTabelaSolicitacaoExames.getColumnModel().getColumn(2).setCellRenderer(centralizado);
    }

    public void objLog() {
        objLogSys.setDataMov(dataModFinal);
        objLogSys.setHorarioMov(horaMov);
        objLogSys.setNomeModuloTela(nomeModuloTela);
        objLogSys.setIdLancMov(Integer.valueOf(jCodigoSolExame.getText()));
        objLogSys.setNomeUsuarioLogado(nameUser);
        objLogSys.setStatusMov(statusMov);
    }

    public void objLog1() {
        objLogSys.setDataMov(dataModFinal);
        objLogSys.setHorarioMov(horaMov);
        objLogSys.setNomeModuloTela(nomeModuloTela);
        objLogSys.setIdLancMov(Integer.valueOf(jCodigoSolExame.getText()));
        objLogSys.setNomeUsuarioLogado(nameUser);
        objLogSys.setStatusMov(statusMov);
    }

    public void buscarAcessoUsuario(String nomeTelaAcesso) {
        conecta.abrirConexao();
        try {
            conecta.executaSQL("SELECT * FROM USUARIOS "
                    + "WHERE NomeUsuario='" + nameUser + "'");
            conecta.rs.first();
            codigoUserENF = conecta.rs.getInt("IdUsuario");
        } catch (Exception e) {
        }
        try {
            conecta.executaSQL("SELECT * FROM USUARIOS_GRUPOS "
                    + "INNER JOIN GRUPOUSUARIOS "
                    + "ON USUARIOS_GRUPOS.IdGrupo=GRUPOUSUARIOS.IdGrupo "
                    + "WHERE IdUsuario='" + codigoUserENF + "'");
            conecta.rs.first();
            codigoUserGroupENF = conecta.rs.getInt("IdUsuario");
            codigoGrupoENF = conecta.rs.getInt("IdGrupo");
            nomeGrupoENF = conecta.rs.getString("NomeGrupo");
        } catch (Exception e) {
        }
        try {
            conecta.executaSQL("SELECT * FROM TELAS_ACESSO "
                    + "WHERE IdUsuario='" + codigoUserENF + "' "
                    + "AND NomeTela='" + nomeTelaAcesso + "'");
            conecta.rs.first();
            codUserAcessoENF = conecta.rs.getInt("IdUsuario");
            codAbrirENF = conecta.rs.getInt("Abrir");
            codIncluirENF = conecta.rs.getInt("Incluir");
            codAlterarENF = conecta.rs.getInt("Alterar");
            codExcluirENF = conecta.rs.getInt("Excluir");
            codGravarENF = conecta.rs.getInt("Gravar");
            codConsultarENF = conecta.rs.getInt("Consultar");
            nomeTelaENF = conecta.rs.getString("NomeTela");
        } catch (Exception e) {
        }
        conecta.desconecta();
    }
}
