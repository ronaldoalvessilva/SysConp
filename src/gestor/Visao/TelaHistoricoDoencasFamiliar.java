/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestor.Visao;

import gestor.Controle.ControleHistoricoDoencaAtual;
import gestor.Controle.ControleItensHistoricoDoencasFamiliar;
import gestor.Controle.ControleLogSistema;
import gestor.Dao.ConexaoBancoDados;
import gestor.Dao.ModeloTabela;
import gestor.Modelo.HistoricoDoencaAtual;
import gestor.Modelo.ItensHistoricoDoencaAtual;
import gestor.Modelo.LogSistema;
import static gestor.Visao.TelaLoginSenha.nameUser;
import static gestor.Visao.TelaModuloEnfermaria.codAlterarENF;
import static gestor.Visao.TelaModuloEnfermaria.codExcluirENF;
import static gestor.Visao.TelaModuloEnfermaria.codGravarENF;
import static gestor.Visao.TelaModuloEnfermaria.codigoGrupoENF;
import static gestor.Visao.TelaModuloEnfermaria.nomeGrupoENF;
import static gestor.Visao.TelaModuloEnfermaria.nomeTelaENF;
import static gestor.Visao.TelaModuloEnfermaria.telaHistDoencaFamManuENF;
import static gestor.Visao.TelaModuloEnfermaria.telaHistDoencaFamPatParENF;
import static gestor.Visao.TelaModuloPrincipal.jDataSistema;
import static gestor.Visao.TelaModuloPrincipal.jHoraSistema;
import java.awt.Color;
import java.awt.Image;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import static gestor.Visao.TelaModuloEnfermaria.codConsultarENF;
import static gestor.Visao.TelaModuloEnfermaria.codigoUserENF;
import static gestor.Visao.TelaModuloEnfermaria.codUserAcessoENF;
import static gestor.Visao.TelaModuloEnfermaria.codigoUserGroupENF;
import static gestor.Visao.TelaModuloEnfermaria.codAbrirENF;
import static gestor.Visao.TelaModuloEnfermaria.codIncluirENF;

/**
 *
 * @author ronaldo
 */
public class TelaHistoricoDoencasFamiliar extends javax.swing.JInternalFrame {

    ConexaoBancoDados conecta = new ConexaoBancoDados();
    HistoricoDoencaAtual objHistDoe = new HistoricoDoencaAtual();
    ControleHistoricoDoencaAtual control = new ControleHistoricoDoencaAtual();
    ItensHistoricoDoencaAtual objItensHist = new ItensHistoricoDoencaAtual();
    ControleItensHistoricoDoencasFamiliar controle = new ControleItensHistoricoDoencasFamiliar();
    ControleLogSistema controlLog = new ControleLogSistema();
    LogSistema objLogSys = new LogSistema();
    // Variáveis para gravar o log
    String nomeModuloTela = "Enfermaria:Histórico Doenças Familiar:Manutenção";
    String nomeModuloTela1 = "Enfermaria:Histórico Doenças Familiar:Patologias/Parentesco";
    //
    int flag;
    int acao;
    String dataInicial, dataFinal, dataEmissao, dataValidade;
    String dataEntrada;
    String statusMov;
    String horaMov;
    String dataModFinal;
    int count, count1 = 0;
    String codHist;
    String caminho;

    /**
     * Creates new form TelaHistoricoDoencasFamiliar
     */
    public TelaHistoricoDoencasFamiliar() {
        initComponents();
        formatarCampos();
        corCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel32 = new javax.swing.JPanel();
        jtotalRegistros = new javax.swing.JLabel();
        jPanel30 = new javax.swing.JPanel();
        jLabel63 = new javax.swing.JLabel();
        jPanel31 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel48 = new javax.swing.JLabel();
        jDataInicial = new com.toedter.calendar.JDateChooser();
        jLabel49 = new javax.swing.JLabel();
        jDataFinal = new com.toedter.calendar.JDateChooser();
        jBtPesqData = new javax.swing.JButton();
        jLabel36 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPesqNomeInternoOdonto = new javax.swing.JTextField();
        jBtPesqNomeInterno = new javax.swing.JButton();
        jLabel37 = new javax.swing.JLabel();
        jIDPesqAtend = new javax.swing.JTextField();
        jBtIdPesqAtend = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTabelaHistoricoDoencas = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jIdHistorico = new javax.swing.JTextField();
        jStatusHist = new javax.swing.JTextField();
        jDataHist = new com.toedter.calendar.JDateChooser();
        jPavilhãoHist = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jNomeInternoHist = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jNomeMaeInternoHist = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jCelaHist = new javax.swing.JTextField();
        jBtPesqInternoHist = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jIdInternoHis = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jObservacaoHist = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jBtNovo = new javax.swing.JButton();
        jBtAlterar = new javax.swing.JButton();
        jBtExcluir = new javax.swing.JButton();
        jBtSalvar = new javax.swing.JButton();
        jBtCancelar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jBtSair = new javax.swing.JButton();
        jBtAuditoria = new javax.swing.JButton();
        jBtFinalizar = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jFotoInternoHist = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jIdRegistro = new javax.swing.JTextField();
        jDescricaoPatologia = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jComboBoxGrauParentesco = new javax.swing.JComboBox();
        jBtPesqPatologia = new javax.swing.JButton();
        jBtNovaPatologia = new javax.swing.JButton();
        jBtAlterarPatologia = new javax.swing.JButton();
        jBtExcluirPatologia = new javax.swing.JButton();
        jBtSalvarPatologia = new javax.swing.JButton();
        jBtCancelarPatologia = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTabelaPatologiaParentesco = new javax.swing.JTable();
        jPanel33 = new javax.swing.JPanel();
        jtotalRegistrosItens = new javax.swing.JLabel();
        jPanel34 = new javax.swing.JPanel();
        jLabel64 = new javax.swing.JLabel();
        jPanel35 = new javax.swing.JPanel();
        jBtAuditoriaPatologia = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();

        setClosable(true);
        setIconifiable(true);
        setTitle("...::: Histórico de Doenças na Familia :::...");

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jPanel32.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        jtotalRegistros.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel32Layout = new javax.swing.GroupLayout(jPanel32);
        jPanel32.setLayout(jPanel32Layout);
        jPanel32Layout.setHorizontalGroup(
            jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtotalRegistros, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
        );
        jPanel32Layout.setVerticalGroup(
            jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtotalRegistros, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE)
        );

        jPanel30.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        jLabel63.setText("Total de Registros:");

        javax.swing.GroupLayout jPanel30Layout = new javax.swing.GroupLayout(jPanel30);
        jPanel30.setLayout(jPanel30Layout);
        jPanel30Layout.setHorizontalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel30Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel63))
        );
        jPanel30Layout.setVerticalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel63)
        );

        jPanel31.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        javax.swing.GroupLayout jPanel31Layout = new javax.swing.GroupLayout(jPanel31);
        jPanel31.setLayout(jPanel31Layout);
        jPanel31Layout.setHorizontalGroup(
            jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel31Layout.setVerticalGroup(
            jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true)));

        jLabel48.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel48.setText("Data Inicial:");

        jDataInicial.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel49.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel49.setText("Data Final:");

        jDataFinal.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jBtPesqData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtPesqData.setContentAreaFilled(false);
        jBtPesqData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtPesqDataActionPerformed(evt);
            }
        });

        jLabel36.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel36.setText("Nome :");

        jCheckBox1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBox1.setText("Todos");
        jCheckBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jPesqNomeInternoOdonto.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jBtPesqNomeInterno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtPesqNomeInterno.setContentAreaFilled(false);
        jBtPesqNomeInterno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtPesqNomeInternoActionPerformed(evt);
            }
        });

        jLabel37.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel37.setText("Código:");

        jIDPesqAtend.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jIDPesqAtend.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jBtIdPesqAtend.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtIdPesqAtend.setContentAreaFilled(false);
        jBtIdPesqAtend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtIdPesqAtendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel36, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel48, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel37, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel10Layout.createSequentialGroup()
                                .addComponent(jIDPesqAtend, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtIdPesqAtend, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(jDataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel49)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtPesqData, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBox1))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jPesqNomeInternoOdonto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtPesqNomeInterno, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(49, 49, 49))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jBtIdPesqAtend)
                    .addComponent(jIDPesqAtend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel37)
                    .addComponent(jCheckBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel48)
                    .addComponent(jDataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel49)
                    .addComponent(jDataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtPesqData))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jPesqNomeInternoOdonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel36)
                    .addComponent(jBtPesqNomeInterno))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabelaHistoricoDoencas.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jTabelaHistoricoDoencas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Código", "Data", "Status", "Nome Completo do Interno"
            }
        ));
        jTabelaHistoricoDoencas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabelaHistoricoDoencasMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTabelaHistoricoDoencas);
        if (jTabelaHistoricoDoencas.getColumnModel().getColumnCount() > 0) {
            jTabelaHistoricoDoencas.getColumnModel().getColumn(0).setMinWidth(50);
            jTabelaHistoricoDoencas.getColumnModel().getColumn(0).setMaxWidth(50);
            jTabelaHistoricoDoencas.getColumnModel().getColumn(1).setMinWidth(70);
            jTabelaHistoricoDoencas.getColumnModel().getColumn(1).setMaxWidth(70);
            jTabelaHistoricoDoencas.getColumnModel().getColumn(2).setMinWidth(70);
            jTabelaHistoricoDoencas.getColumnModel().getColumn(2).setMaxWidth(70);
            jTabelaHistoricoDoencas.getColumnModel().getColumn(3).setMinWidth(350);
            jTabelaHistoricoDoencas.getColumnModel().getColumn(3).setMaxWidth(350);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jPanel30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel31, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );

        jTabbedPane1.addTab("Listagem", jPanel1);

        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Código");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Status");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Data");

        jIdHistorico.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jIdHistorico.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jIdHistorico.setEnabled(false);

        jStatusHist.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jStatusHist.setForeground(new java.awt.Color(255, 0, 0));
        jStatusHist.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jStatusHist.setDisabledTextColor(new java.awt.Color(255, 0, 0));
        jStatusHist.setEnabled(false);

        jDataHist.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jDataHist.setEnabled(false);

        jPavilhãoHist.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPavilhãoHist.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Pavilhão");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Nome Completo do Interno");

        jNomeInternoHist.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jNomeInternoHist.setEnabled(false);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Nome da Mãe do Interno");

        jNomeMaeInternoHist.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jNomeMaeInternoHist.setEnabled(false);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Cela");

        jCelaHist.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jCelaHist.setEnabled(false);

        jBtPesqInternoHist.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtPesqInternoHist.setToolTipText("Pesquisar Internos");
        jBtPesqInternoHist.setContentAreaFilled(false);
        jBtPesqInternoHist.setEnabled(false);
        jBtPesqInternoHist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtPesqInternoHistActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Código");

        jIdInternoHis.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jIdInternoHis.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jIdInternoHis.setEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jNomeMaeInternoHist, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPavilhãoHist, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCelaHist))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel5)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(125, 125, 125)
                                .addComponent(jLabel10))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(18, 18, 18)
                                .addComponent(jBtPesqInternoHist, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 185, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jIdInternoHis, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jIdHistorico, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jStatusHist)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDataHist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addComponent(jNomeInternoHist))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jIdHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jStatusHist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDataHist, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jBtPesqInternoHist)
                    .addComponent(jIdInternoHis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jNomeInternoHist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jNomeMaeInternoHist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jPavilhãoHist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCelaHist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jObservacaoHist.setColumns(20);
        jObservacaoHist.setRows(5);
        jObservacaoHist.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jObservacaoHist.setEnabled(false);
        jScrollPane1.setViewportView(jObservacaoHist);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Observação");

        jBtNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/page_add.png"))); // NOI18N
        jBtNovo.setToolTipText("Novo");
        jBtNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtNovoActionPerformed(evt);
            }
        });

        jBtAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/refresh-reload-icone-6258-16.png"))); // NOI18N
        jBtAlterar.setToolTipText("Alterar");
        jBtAlterar.setEnabled(false);
        jBtAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtAlterarActionPerformed(evt);
            }
        });

        jBtExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/3630_16x16.png"))); // NOI18N
        jBtExcluir.setToolTipText("Excluir");
        jBtExcluir.setEnabled(false);
        jBtExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtExcluirActionPerformed(evt);
            }
        });

        jBtSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/1294_16x16.png"))); // NOI18N
        jBtSalvar.setToolTipText("Gravar");
        jBtSalvar.setEnabled(false);
        jBtSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtSalvarActionPerformed(evt);
            }
        });

        jBtCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Button_Close_Icon_16.png"))); // NOI18N
        jBtCancelar.setToolTipText("Cancelar Operação");
        jBtCancelar.setEnabled(false);
        jBtCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtCancelarActionPerformed(evt);
            }
        });

        jBtSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Log_Out_Icon_16.png"))); // NOI18N
        jBtSair.setToolTipText("Sair");
        jBtSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtSairActionPerformed(evt);
            }
        });

        jBtAuditoria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/book_open.png"))); // NOI18N
        jBtAuditoria.setToolTipText("Auditoria");
        jBtAuditoria.setContentAreaFilled(false);
        jBtAuditoria.setEnabled(false);
        jBtAuditoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtAuditoriaActionPerformed(evt);
            }
        });

        jBtFinalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/low-security-breach-icone-4155-16.png"))); // NOI18N
        jBtFinalizar.setToolTipText("Finalizar");
        jBtFinalizar.setEnabled(false);
        jBtFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtFinalizarActionPerformed(evt);
            }
        });

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true), "Foto", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(255, 0, 0))); // NOI18N

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFotoInternoHist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFotoInternoHist, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
        );

        jPanel9.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jBtNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtSair, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(jBtFinalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(0, 101, Short.MAX_VALUE)
                                .addComponent(jBtAuditoria, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBtAlterar, jBtCancelar, jBtExcluir, jBtFinalizar, jBtNovo, jBtSair, jBtSalvar});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jBtNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtAlterar)
                    .addComponent(jBtExcluir)
                    .addComponent(jBtSalvar)
                    .addComponent(jBtCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBtSair, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBtFinalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtAuditoria))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jBtAlterar, jBtCancelar, jBtExcluir, jBtFinalizar, jBtNovo, jBtSair, jBtSalvar});

        jTabbedPane1.addTab("Manutenção", jPanel2);

        jPanel4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Registro");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Patologia");

        jIdRegistro.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jIdRegistro.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jIdRegistro.setEnabled(false);

        jDescricaoPatologia.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jDescricaoPatologia.setEnabled(false);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Grau de Parentesco");

        jComboBoxGrauParentesco.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBoxGrauParentesco.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecione", "Avô", "Avó", "Pai", "Mãe", "Tio", "Tia", "Irmão", "Irmã", "Primo", "Prima", "Sobrinho", "Sobrinha", " ", " " }));
        jComboBoxGrauParentesco.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jComboBoxGrauParentesco.setEnabled(false);

        jBtPesqPatologia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtPesqPatologia.setToolTipText("Pesquisar Patologia");
        jBtPesqPatologia.setContentAreaFilled(false);
        jBtPesqPatologia.setEnabled(false);
        jBtPesqPatologia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtPesqPatologiaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxGrauParentesco, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jIdRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDescricaoPatologia)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtPesqPatologia, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jDescricaoPatologia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtPesqPatologia)
                    .addComponent(jIdRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxGrauParentesco, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jBtNovaPatologia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/page_add.png"))); // NOI18N
        jBtNovaPatologia.setToolTipText("Novo");
        jBtNovaPatologia.setEnabled(false);
        jBtNovaPatologia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtNovaPatologiaActionPerformed(evt);
            }
        });

        jBtAlterarPatologia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/refresh-reload-icone-6258-16.png"))); // NOI18N
        jBtAlterarPatologia.setToolTipText("Alterar");
        jBtAlterarPatologia.setEnabled(false);
        jBtAlterarPatologia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtAlterarPatologiaActionPerformed(evt);
            }
        });

        jBtExcluirPatologia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/3630_16x16.png"))); // NOI18N
        jBtExcluirPatologia.setToolTipText("Excluir");
        jBtExcluirPatologia.setEnabled(false);
        jBtExcluirPatologia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtExcluirPatologiaActionPerformed(evt);
            }
        });

        jBtSalvarPatologia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/1294_16x16.png"))); // NOI18N
        jBtSalvarPatologia.setToolTipText("Salvar");
        jBtSalvarPatologia.setEnabled(false);
        jBtSalvarPatologia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtSalvarPatologiaActionPerformed(evt);
            }
        });

        jBtCancelarPatologia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Button_Close_Icon_16.png"))); // NOI18N
        jBtCancelarPatologia.setToolTipText("Cancelar");
        jBtCancelarPatologia.setEnabled(false);
        jBtCancelarPatologia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtCancelarPatologiaActionPerformed(evt);
            }
        });

        jTabelaPatologiaParentesco.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jTabelaPatologiaParentesco.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Registro", "Descrição da Patologia", "Grau de Parentesco"
            }
        ));
        jTabelaPatologiaParentesco.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabelaPatologiaParentescoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTabelaPatologiaParentesco);
        if (jTabelaPatologiaParentesco.getColumnModel().getColumnCount() > 0) {
            jTabelaPatologiaParentesco.getColumnModel().getColumn(0).setMinWidth(50);
            jTabelaPatologiaParentesco.getColumnModel().getColumn(0).setMaxWidth(50);
            jTabelaPatologiaParentesco.getColumnModel().getColumn(1).setMinWidth(250);
            jTabelaPatologiaParentesco.getColumnModel().getColumn(1).setMaxWidth(250);
            jTabelaPatologiaParentesco.getColumnModel().getColumn(2).setMinWidth(120);
            jTabelaPatologiaParentesco.getColumnModel().getColumn(2).setMaxWidth(120);
        }

        jPanel33.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        jtotalRegistrosItens.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel33Layout = new javax.swing.GroupLayout(jPanel33);
        jPanel33.setLayout(jPanel33Layout);
        jPanel33Layout.setHorizontalGroup(
            jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtotalRegistrosItens, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
        );
        jPanel33Layout.setVerticalGroup(
            jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtotalRegistrosItens, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE)
        );

        jPanel34.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        jLabel64.setText("Total de Registros:");

        javax.swing.GroupLayout jPanel34Layout = new javax.swing.GroupLayout(jPanel34);
        jPanel34.setLayout(jPanel34Layout);
        jPanel34Layout.setHorizontalGroup(
            jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel34Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel64))
        );
        jPanel34Layout.setVerticalGroup(
            jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel64)
        );

        jPanel35.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        javax.swing.GroupLayout jPanel35Layout = new javax.swing.GroupLayout(jPanel35);
        jPanel35.setLayout(jPanel35Layout);
        jPanel35Layout.setHorizontalGroup(
            jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel35Layout.setVerticalGroup(
            jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );

        jBtAuditoriaPatologia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/book_open.png"))); // NOI18N
        jBtAuditoriaPatologia.setToolTipText("Auditoria");
        jBtAuditoriaPatologia.setContentAreaFilled(false);
        jBtAuditoriaPatologia.setEnabled(false);
        jBtAuditoriaPatologia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtAuditoriaPatologiaActionPerformed(evt);
            }
        });

        jPanel7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 120, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jBtNovaPatologia, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtAlterarPatologia, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtExcluirPatologia, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtSalvarPatologia, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtCancelarPatologia, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 2, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jBtAuditoriaPatologia, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel34, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel33, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBtAlterarPatologia, jBtCancelarPatologia, jBtExcluirPatologia, jBtNovaPatologia, jBtSalvarPatologia});

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jBtAuditoriaPatologia)
                    .addComponent(jBtNovaPatologia, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtAlterarPatologia)
                    .addComponent(jBtExcluirPatologia)
                    .addComponent(jBtSalvarPatologia)
                    .addComponent(jBtCancelarPatologia))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE))
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jPanel34, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel33, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel35, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jBtAlterarPatologia, jBtCancelarPatologia, jBtExcluirPatologia, jBtNovaPatologia, jBtSalvarPatologia});

        jTabbedPane1.addTab("Patologias/Parentesco", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        setBounds(300, 30, 577, 497);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtPesqDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtPesqDataActionPerformed
        // TODO add your handling code here:
        flag = 1;
        if (jDataInicial.getDate() == null) {
            JOptionPane.showMessageDialog(rootPane, "Informe a data inicial para pesquisa.");
            jDataInicial.requestFocus();
        } else {
            if (jDataFinal.getDate() == null) {
                JOptionPane.showMessageDialog(rootPane, "Informe a data final para pesquisa.");
                jDataFinal.requestFocus();
            } else {
                if (jDataInicial.getDate().after(jDataFinal.getDate())) {
                    JOptionPane.showMessageDialog(rootPane, "Data Inicial não pode ser maior que data final");
                } else {
                    SimpleDateFormat formatoAmerica = new SimpleDateFormat("dd/MM/yyyy");
                    dataInicial = formatoAmerica.format(jDataInicial.getDate().getTime());
                    dataFinal = formatoAmerica.format(jDataFinal.getDate().getTime());
                    preencherTabelaHistoricoDoencas("SELECT * FROM HISTORICO_DOENCA_FAMILIA "
                            + "INNER JOIN PRONTUARIOSCRC "
                            + "ON HISTORICO_DOENCA_FAMILIA.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                            + "WHERE DataHist BETWEEN'" + dataInicial + "'AND '" + dataFinal + "'");
                }
            }
        }
    }//GEN-LAST:event_jBtPesqDataActionPerformed

    private void jCheckBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox1ItemStateChanged
        // TODO add your handling code here:
        count = 0;
        flag = 1;
        if (evt.getStateChange() == evt.SELECTED) {
            this.preencherTabelaHistoricoDoencas("SELECT * FROM HISTORICO_DOENCA_FAMILIA "
                    + "INNER JOIN PRONTUARIOSCRC "
                    + "ON HISTORICO_DOENCA_FAMILIA.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc");
        } else {
            jtotalRegistros.setText("");
            limparTabela();
        }
    }//GEN-LAST:event_jCheckBox1ItemStateChanged

    private void jBtPesqNomeInternoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtPesqNomeInternoActionPerformed
        // TODO add your handling code here:
        count = 0;
        flag = 1;
        preencherTabelaHistoricoDoencas("SELECT * FROM HISTORICO_DOENCA_FAMILIA "
                + "INNER JOIN PRONTUARIOSCRC "
                + "ON HISTORICO_DOENCA_FAMILIA.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                + "WHERE NomeInternoCrc LIKE'%" + jPesqNomeInternoOdonto.getText() + "%'");
    }//GEN-LAST:event_jBtPesqNomeInternoActionPerformed

    private void jBtIdPesqAtendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtIdPesqAtendActionPerformed
        // TODO add your handling code here:
        count = 0;
        flag = 1;
        preencherTabelaHistoricoDoencas("SELECT * FROM HISTORICO_DOENCA_FAMILIA "
                + "INNER JOIN PRONTUARIOSCRC "
                + "ON HISTORICO_DOENCA_FAMILIA.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                + "WHERE IdHist='" + jIDPesqAtend.getText() + "'");
    }//GEN-LAST:event_jBtIdPesqAtendActionPerformed

    private void jTabelaHistoricoDoencasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabelaHistoricoDoencasMouseClicked
        // TODO add your handling code here:       
        if (flag == 1) {
            String IdLanc = "" + jTabelaHistoricoDoencas.getValueAt(jTabelaHistoricoDoencas.getSelectedRow(), 0);
            jIDPesqAtend.setText(IdLanc);
            //
            jBtNovo.setEnabled(true);
            jBtAlterar.setEnabled(true);
            jBtExcluir.setEnabled(true);
            jBtSalvar.setEnabled(!true);
            jBtCancelar.setEnabled(true);
            jBtFinalizar.setEnabled(true);
            jBtAuditoria.setEnabled(true);
            jBtNovaPatologia.setEnabled(true);
            conecta.abrirConexao();
            try {
                conecta.executaSQL("SELECT * FROM HISTORICO_DOENCA_FAMILIA "
                        + "INNER JOIN PRONTUARIOSCRC "
                        + "ON HISTORICO_DOENCA_FAMILIA.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                        + "INNER JOIN ITENSLOCACAOINTERNO "
                        + "ON PRONTUARIOSCRC.IdInternoCrc=ITENSLOCACAOINTERNO.IdInternoCrc "
                        + "INNER JOIN CELAS "
                        + "ON ITENSLOCACAOINTERNO.IdCela=CELAS.IdCela "
                        + "INNER JOIN PAVILHAO "
                        + "ON CELAS.IdPav=PAVILHAO.IdPav "
                        + "WHERE HISTORICO_DOENCA_FAMILIA.IdHist='" + IdLanc + "'");
                conecta.rs.first();
                jIdHistorico.setText(String.valueOf(conecta.rs.getInt("IdHist")));
                jStatusHist.setText(conecta.rs.getString("StatusHist"));
                jDataHist.setDate(conecta.rs.getDate("DataHist"));
                jNomeInternoHist.setText(conecta.rs.getString("NomeInternoCrc"));
                jNomeMaeInternoHist.setText(conecta.rs.getString("MaeInternoCrc"));
                //
                caminho = conecta.rs.getString("FotoInternoCrc");
                javax.swing.ImageIcon i = new javax.swing.ImageIcon(caminho);
                jFotoInternoHist.setIcon(i);
                jFotoInternoHist.setIcon(new ImageIcon(i.getImage().getScaledInstance(jFotoInternoHist.getWidth(), jFotoInternoHist.getHeight(), Image.SCALE_DEFAULT)));
                //
                jPavilhãoHist.setText(conecta.rs.getString("DescricaoPav"));
                jCelaHist.setText(conecta.rs.getString("EndCelaPav"));
                jObservacaoHist.setText(conecta.rs.getString("Observacao"));
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(rootPane, "Não existem dados a serem EXIBIDOS !!!");
            }
            count1 = 0;
            preencherTabelaItensPatologiaParentesco("SELECT * FROM ITENS_HISTORICO_DOENCA_FAMILIA "
                    + "INNER JOIN DOENCAS "
                    + "ON ITENS_HISTORICO_DOENCA_FAMILIA.IdDoenca=DOENCAS.IdDoenca "
                    + "INNER JOIN HISTORICO_DOENCA_FAMILIA "
                    + "ON ITENS_HISTORICO_DOENCA_FAMILIA.IdHist=HISTORICO_DOENCA_FAMILIA.IdHist "
                    + "WHERE ITENS_HISTORICO_DOENCA_FAMILIA.IdHist='" + jIdHistorico.getText() + "'");
            conecta.desconecta();
        }
    }//GEN-LAST:event_jTabelaHistoricoDoencasMouseClicked

    private void jBtNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtNovoActionPerformed
        // TODO add your handling code here:
        buscarAcessoUsuario(telaHistDoencaFamManuENF);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || nomeGrupoENF.equals("ADMINISTRADORES") || codigoUserENF == codUserAcessoENF && nomeTelaENF.equals(telaHistDoencaFamManuENF) && codIncluirENF == 1) {
            statusMov = "Incluiu";
            horaMov = jHoraSistema.getText();
            dataModFinal = jDataSistema.getText();
            acao = 1;
            Novo();
            corCampos();
            count1 = 0;
            jtotalRegistrosItens.setText("");
            limparTabelaItensPatologiaParentesco();
        } else {
            JOptionPane.showMessageDialog(null, "Acesso não autorizado, solicite liberação ao administrador.");
        }
    }//GEN-LAST:event_jBtNovoActionPerformed

    private void jBtAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtAlterarActionPerformed
        // TODO add your handling code here:
        buscarAcessoUsuario(telaHistDoencaFamManuENF);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || nomeGrupoENF.equals("ADMINISTRADORES") || codigoUserENF == codUserAcessoENF && nomeTelaENF.equals(telaHistDoencaFamManuENF) && codAlterarENF == 1) {
            objHistDoe.setStatusHist(jStatusHist.getText());
            if (jStatusHist.getText().equals("FINALIZADO")) {
                JOptionPane.showMessageDialog(rootPane, "Esse registro não poderá ser modificado, o mesmo encontra-se FINALIZADO");
            } else {
                acao = 2;
                Alterar();
                statusMov = "Alterou";
                horaMov = jHoraSistema.getText();
                dataModFinal = jDataSistema.getText();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Acesso não autorizado, solicite liberação ao administrador.");
        }
    }//GEN-LAST:event_jBtAlterarActionPerformed

    private void jBtExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtExcluirActionPerformed
        // TODO add your handling code here:
        buscarAcessoUsuario(telaHistDoencaFamManuENF);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || nomeGrupoENF.equals("ADMINISTRADORES") || codigoUserENF == codUserAcessoENF && nomeTelaENF.equals(telaHistDoencaFamManuENF) && codExcluirENF == 1) {
            verificarItens();
            statusMov = "Excluiu";
            horaMov = jHoraSistema.getText();
            dataModFinal = jDataSistema.getText();
            objHistDoe.setStatusHist(jStatusHist.getText());
            if (jStatusHist.getText().equals("FINALIZADO")) {
                JOptionPane.showMessageDialog(rootPane, "Esse registro não poderá ser excluído, o mesmo encontra-se FINALIZADO");
            } else {
                if (jIdHistorico.getText().equals(codHist)) {
                    JOptionPane.showMessageDialog(rootPane, "Esse registro não poderá ser excluído, existe patologia para esse registro.");
                } else {
                    int resposta = JOptionPane.showConfirmDialog(this, "Deseja realmente excluir o registro selecionado?", "Confirmação",
                            JOptionPane.YES_NO_OPTION);
                    if (resposta == JOptionPane.YES_OPTION) {
                        objHistDoe.setIdHist(Integer.valueOf(jIdHistorico.getText()));
                        control.excluirHistoricoDoencaAtual(objHistDoe);
                        Excluir();
                        JOptionPane.showMessageDialog(rootPane, "Registro excluído com sucesso.");
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Acesso não autorizado, solicite liberação ao administrador.");
        }
    }//GEN-LAST:event_jBtExcluirActionPerformed

    private void jBtSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtSalvarActionPerformed
        // TODO add your handling code here:
        buscarAcessoUsuario(telaHistDoencaFamManuENF);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || nomeGrupoENF.equals("ADMINISTRADORES") || codigoUserENF == codUserAcessoENF && nomeTelaENF.equals(telaHistDoencaFamManuENF) && codGravarENF == 1) {
            if (jDataHist.getDate() == null) {
                JOptionPane.showMessageDialog(rootPane, "Informe a data do histórico.");
            } else if (jNomeInternoHist.getText().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Informe o nome do interno.");
            } else {
                objHistDoe.setStatusHist(jStatusHist.getText());
                objHistDoe.setDataHist(jDataHist.getDate());
                objHistDoe.setIdInternoCrc(Integer.valueOf(jIdInternoHis.getText()));
                objHistDoe.setNomeInternoCrc(jNomeInternoHist.getText());
                objHistDoe.setObservacao(jObservacaoHist.getText());
                if (acao == 1) {
                    objHistDoe.setUsuarioInsert(nameUser);
                    objHistDoe.setDataInsert(dataModFinal);
                    objHistDoe.setHorarioInsert(horaMov);
                    control.incluirHistoricoDoencaAtual(objHistDoe);
                    buscarCodigo();
                    //
                    objLog();
                    controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                    JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
                    Salvar();
                }
                if (acao == 2) {
                    objHistDoe.setUsuarioUp(nameUser);
                    objHistDoe.setDataUp(dataModFinal);
                    objHistDoe.setHorarioUp(horaMov);
                    objHistDoe.setIdHist(Integer.valueOf(jIdHistorico.getText()));
                    control.alterarHistoricoDoencaAtual(objHistDoe);
                    //
                    objLog();
                    controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                    JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
                    Salvar();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Acesso não autorizado, solicite liberação ao administrador.");
        }
    }//GEN-LAST:event_jBtSalvarActionPerformed

    private void jBtCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtCancelarActionPerformed
        // TODO add your handling code here:
        Cancelar();
    }//GEN-LAST:event_jBtCancelarActionPerformed

    private void jBtSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtSairActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jBtSairActionPerformed

    private void jBtAuditoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtAuditoriaActionPerformed
        // TODO add your handling code here:
        TelaAuditoriaHistoricoDoencasFamiliar objAudiHistFam = new TelaAuditoriaHistoricoDoencasFamiliar();
        TelaModuloEnfermaria.jPainelMedico.add(objAudiHistFam);
        objAudiHistFam.show();
    }//GEN-LAST:event_jBtAuditoriaActionPerformed

    private void jBtPesqInternoHistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtPesqInternoHistActionPerformed
        // TODO add your handling code here:
        TelaPesqInternoHistoricoDoencaAtual objPesqInt = new TelaPesqInternoHistoricoDoencaAtual();
        TelaModuloEnfermaria.jPainelMedico.add(objPesqInt);
        objPesqInt.show();
    }//GEN-LAST:event_jBtPesqInternoHistActionPerformed

    private void jBtNovaPatologiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtNovaPatologiaActionPerformed
        // TODO add your handling code here:
        buscarAcessoUsuario(telaHistDoencaFamPatParENF);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || nomeGrupoENF.equals("ADMINISTRADORES") || codigoUserENF == codUserAcessoENF && nomeTelaENF.equals(telaHistDoencaFamPatParENF) && codIncluirENF == 1) {
            objHistDoe.setStatusHist(jStatusHist.getText());
            if (jStatusHist.getText().equals("FINALIZADO")) {
                JOptionPane.showMessageDialog(rootPane, "Esse registro não poderá ser modificado, o mesmo encontra-se FINALIZADO");
            } else {
                acao = 3;
                NovoPatologia();
                statusMov = "Incluiu";
                horaMov = jHoraSistema.getText();
                dataModFinal = jDataSistema.getText();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Acesso não autorizado, solicite liberação ao administrador.");
        }
    }//GEN-LAST:event_jBtNovaPatologiaActionPerformed

    private void jBtAlterarPatologiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtAlterarPatologiaActionPerformed
        // TODO add your handling code here:
        buscarAcessoUsuario(telaHistDoencaFamPatParENF);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || nomeGrupoENF.equals("ADMINISTRADORES") || codigoUserENF == codUserAcessoENF && nomeTelaENF.equals(telaHistDoencaFamPatParENF) && codAlterarENF == 1) {
            objHistDoe.setStatusHist(jStatusHist.getText());
            if (jStatusHist.getText().equals("FINALIZADO")) {
                JOptionPane.showMessageDialog(rootPane, "Esse registro não poderá ser modificado, o mesmo encontra-se FINALIZADO");
            } else {
                acao = 4;
                AlterarPatologia();
                statusMov = "Alterou";
                horaMov = jHoraSistema.getText();
                dataModFinal = jDataSistema.getText();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Acesso não autorizado, solicite liberação ao administrador.");
        }
    }//GEN-LAST:event_jBtAlterarPatologiaActionPerformed

    private void jBtExcluirPatologiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtExcluirPatologiaActionPerformed
        // TODO add your handling code here:
        buscarAcessoUsuario(telaHistDoencaFamPatParENF);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || nomeGrupoENF.equals("ADMINISTRADORES") || codigoUserENF == codUserAcessoENF && nomeTelaENF.equals(telaHistDoencaFamPatParENF) && codExcluirENF == 1) {
            statusMov = "Excluiu";
            horaMov = jHoraSistema.getText();
            dataModFinal = jDataSistema.getText();
            objHistDoe.setStatusHist(jStatusHist.getText());
            if (jStatusHist.getText().equals("FINALIZADO")) {
                JOptionPane.showMessageDialog(rootPane, "Esse registro não poderá ser excluído, o mesmo encontra-se FINALIZADO");
            } else {
                objItensHist.setItensIdHist(Integer.valueOf(jIdRegistro.getText()));
                controle.excluirItensHistoricoDoencaAtual(objItensHist);
                //
                objLog();
                controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                ExcluirPatologia();
                preencherTabelaItensPatologiaParentesco("SELECT * FROM ITENS_HISTORICO_DOENCA_FAMILIA "
                        + "INNER JOIN DOENCAS "
                        + "ON ITENS_HISTORICO_DOENCA_FAMILIA.IdDoenca=DOENCAS.IdDoenca "
                        + "INNER JOIN HISTORICO_DOENCA_FAMILIA "
                        + "ON ITENS_HISTORICO_DOENCA_FAMILIA.IdHist=HISTORICO_DOENCA_FAMILIA.IdHist "
                        + "WHERE ITENS_HISTORICO_DOENCA_FAMILIA.IdHist='" + jIdHistorico.getText() + "'");
                JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Acesso não autorizado, solicite liberação ao administrador.");
        }
    }//GEN-LAST:event_jBtExcluirPatologiaActionPerformed

    private void jBtSalvarPatologiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtSalvarPatologiaActionPerformed
        // TODO add your handling code here:
        buscarAcessoUsuario(telaHistDoencaFamPatParENF);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || nomeGrupoENF.equals("ADMINISTRADORES") || codigoUserENF == codUserAcessoENF && nomeTelaENF.equals(telaHistDoencaFamPatParENF) && codGravarENF == 1) {
            if (jDescricaoPatologia.getText().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Informe a patologia para historico.");
            } else if (jComboBoxGrauParentesco.getSelectedItem().equals("Selecione")) {
                JOptionPane.showMessageDialog(rootPane, "Informe o grau de parentesco do interno.");
            } else {
                objItensHist.setDescricaoDoenca(jDescricaoPatologia.getText());
                objItensHist.setIdHist(Integer.valueOf(jIdHistorico.getText()));
                objItensHist.setGrauParentresco((String) jComboBoxGrauParentesco.getSelectedItem());
                if (acao == 3) {
                    objItensHist.setUsuarioInsert(nameUser);
                    objItensHist.setDataInsert(dataModFinal);
                    objItensHist.setHorarioInsert(horaMov);
                    controle.incluirItensHistoricoDoencaAtual(objItensHist);
                    buscarCodigoItem();
                    //
                    objLog();
                    controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                    SalvarPatologia();
                    preencherTabelaItensPatologiaParentesco("SELECT * FROM ITENS_HISTORICO_DOENCA_FAMILIA "
                            + "INNER JOIN DOENCAS "
                            + "ON ITENS_HISTORICO_DOENCA_FAMILIA.IdDoenca=DOENCAS.IdDoenca "
                            + "INNER JOIN HISTORICO_DOENCA_FAMILIA "
                            + "ON ITENS_HISTORICO_DOENCA_FAMILIA.IdHist=HISTORICO_DOENCA_FAMILIA.IdHist "
                            + "WHERE ITENS_HISTORICO_DOENCA_FAMILIA.IdHist='" + jIdHistorico.getText() + "'");
                    JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
                }
                if (acao == 4) {
                    objItensHist.setUsuarioUp(nameUser);
                    objItensHist.setDataUp(dataModFinal);
                    objItensHist.setHorarioUp(horaMov);
                    objItensHist.setItensIdHist(Integer.valueOf(jIdRegistro.getText()));
                    SalvarPatologia();
                    preencherTabelaItensPatologiaParentesco("SELECT * FROM ITENS_HISTORICO_DOENCA_FAMILIA "
                            + "INNER JOIN DOENCAS "
                            + "ON ITENS_HISTORICO_DOENCA_FAMILIA.IdDoenca=DOENCAS.IdDoenca "
                            + "INNER JOIN HISTORICO_DOENCA_FAMILIA "
                            + "ON ITENS_HISTORICO_DOENCA_FAMILIA.IdHist=HISTORICO_DOENCA_FAMILIA.IdHist "
                            + "WHERE ITENS_HISTORICO_DOENCA_FAMILIA.IdHist='" + jIdHistorico.getText() + "'");
                    JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Acesso não autorizado, solicite liberação ao administrador.");
        }
    }//GEN-LAST:event_jBtSalvarPatologiaActionPerformed

    private void jBtCancelarPatologiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtCancelarPatologiaActionPerformed
        // TODO add your handling code here:
        CancelarPatologia();
    }//GEN-LAST:event_jBtCancelarPatologiaActionPerformed

    private void jBtAuditoriaPatologiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtAuditoriaPatologiaActionPerformed
        // TODO add your handling code here:
        TelaAuditoriaItensHistoricoDoencasFamiliar objAudiItensHist = new TelaAuditoriaItensHistoricoDoencasFamiliar();
        TelaModuloEnfermaria.jPainelMedico.add(objAudiItensHist);
        objAudiItensHist.show();
    }//GEN-LAST:event_jBtAuditoriaPatologiaActionPerformed

    private void jBtPesqPatologiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtPesqPatologiaActionPerformed
        // TODO add your handling code here:
        TelaPesquisarDoencaTratamentoHistorico objPesqDoenca = new TelaPesquisarDoencaTratamentoHistorico();
        TelaModuloEnfermaria.jPainelMedico.add(objPesqDoenca);
        objPesqDoenca.show();
    }//GEN-LAST:event_jBtPesqPatologiaActionPerformed

    private void jTabelaPatologiaParentescoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabelaPatologiaParentescoMouseClicked
        // TODO add your handling code here:
        if (flag == 1) {
            String idRegistro = "" + jTabelaPatologiaParentesco.getValueAt(jTabelaPatologiaParentesco.getSelectedRow(), 0);
            jtotalRegistros.setText(idRegistro);
            //
            jBtNovaPatologia.setEnabled(true);
            jBtAlterarPatologia.setEnabled(true);
            jBtExcluirPatologia.setEnabled(true);
            jBtSalvarPatologia.setEnabled(!true);
            jBtCancelarPatologia.setEnabled(true);
            jBtAuditoriaPatologia.setEnabled(true);
//            jBtImprimir.setEnabled(true);
            //
            conecta.abrirConexao();
            try {
                conecta.executaSQL("SELECT * FROM ITENS_HISTORICO_DOENCA_FAMILIA "
                        + "INNER JOIN DOENCAS "
                        + "ON ITENS_HISTORICO_DOENCA_FAMILIA.IdDoenca=DOENCAS.IdDoenca "
                        + "INNER JOIN HISTORICO_DOENCA_FAMILIA "
                        + "ON ITENS_HISTORICO_DOENCA_FAMILIA.IdHist=HISTORICO_DOENCA_FAMILIA.IdHist "
                        + "WHERE ITENS_HISTORICO_DOENCA_FAMILIA.ItensIdHist='" + idRegistro + "'");
                conecta.rs.first();
                jIdRegistro.setText(conecta.rs.getString("ItensIdHist"));
                jDescricaoPatologia.setText(conecta.rs.getString("Descricao"));
                jComboBoxGrauParentesco.setSelectedItem(conecta.rs.getString("GrauParentesco"));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Não foi possível exibir registro.\nERRO: " + e);
            }
            conecta.desconecta();
        }
    }//GEN-LAST:event_jTabelaPatologiaParentescoMouseClicked

    private void jBtFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtFinalizarActionPerformed
        // TODO add your handling code here:
        conecta.abrirConexao();
        try {
            conecta.executaSQL("SELECT * FROM HISTORICO_DOENCA_FAMILIA WHERE IdHist='" + jIdHistorico.getText() + "'");
            conecta.rs.first();
            jStatusHist.setText(conecta.rs.getString("StatusHist"));
            if (jStatusHist.getText().equals("FINALIZADO")) {
                JOptionPane.showMessageDialog(rootPane, "Lançamento já foi finalizado");
            } else {
                Finalizar();
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Não foi possível verificar se lançamento foi finalizado\nERRO: " + ex);
        }
        conecta.desconecta();
    }//GEN-LAST:event_jBtFinalizarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtAlterar;
    private javax.swing.JButton jBtAlterarPatologia;
    private javax.swing.JButton jBtAuditoria;
    private javax.swing.JButton jBtAuditoriaPatologia;
    private javax.swing.JButton jBtCancelar;
    private javax.swing.JButton jBtCancelarPatologia;
    private javax.swing.JButton jBtExcluir;
    private javax.swing.JButton jBtExcluirPatologia;
    private javax.swing.JButton jBtFinalizar;
    private javax.swing.JButton jBtIdPesqAtend;
    private javax.swing.JButton jBtNovaPatologia;
    private javax.swing.JButton jBtNovo;
    private javax.swing.JButton jBtPesqData;
    private javax.swing.JButton jBtPesqInternoHist;
    private javax.swing.JButton jBtPesqNomeInterno;
    private javax.swing.JButton jBtPesqPatologia;
    private javax.swing.JButton jBtSair;
    private javax.swing.JButton jBtSalvar;
    private javax.swing.JButton jBtSalvarPatologia;
    public static javax.swing.JTextField jCelaHist;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBoxGrauParentesco;
    private com.toedter.calendar.JDateChooser jDataFinal;
    private com.toedter.calendar.JDateChooser jDataHist;
    private com.toedter.calendar.JDateChooser jDataInicial;
    public static javax.swing.JTextField jDescricaoPatologia;
    public static javax.swing.JLabel jFotoInternoHist;
    private javax.swing.JTextField jIDPesqAtend;
    public static javax.swing.JTextField jIdHistorico;
    public static javax.swing.JTextField jIdInternoHis;
    public static javax.swing.JTextField jIdRegistro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    public static javax.swing.JTextField jNomeInternoHist;
    public static javax.swing.JTextField jNomeMaeInternoHist;
    private javax.swing.JTextArea jObservacaoHist;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    public static javax.swing.JTextField jPavilhãoHist;
    private javax.swing.JTextField jPesqNomeInternoOdonto;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jStatusHist;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTabelaHistoricoDoencas;
    private javax.swing.JTable jTabelaPatologiaParentesco;
    private javax.swing.JLabel jtotalRegistros;
    private javax.swing.JLabel jtotalRegistrosItens;
    // End of variables declaration//GEN-END:variables

    public void formatarCampos() {
        jObservacaoHist.setLineWrap(true);
        jObservacaoHist.setWrapStyleWord(true);
    }

    public void corCampos() {
        jIdHistorico.setBackground(Color.white);
        jStatusHist.setBackground(Color.white);
        jDataHist.setBackground(Color.white);
        jNomeInternoHist.setBackground(Color.white);
        jNomeMaeInternoHist.setBackground(Color.white);
        jPavilhãoHist.setBackground(Color.white);
        jCelaHist.setBackground(Color.white);
        jObservacaoHist.setBackground(Color.white);
    }

    public void Novo() {
        jIdHistorico.setText("");
        jStatusHist.setText("ABERTO");
        jDataHist.setCalendar(Calendar.getInstance());
        jIdInternoHis.setText("");
        jNomeInternoHist.setText("");
        jFotoInternoHist.setIcon(null);
        jNomeMaeInternoHist.setText("");
        jPavilhãoHist.setText("");
        jCelaHist.setText("");
        jObservacaoHist.setText("");
        //
        jBtPesqInternoHist.setEnabled(true);
        jDataHist.setEnabled(true);
        jObservacaoHist.setEnabled(true);
        //
        jBtNovo.setEnabled(!true);
        jBtAlterar.setEnabled(!true);
        jBtExcluir.setEnabled(!true);
        jBtSalvar.setEnabled(true);
        jBtCancelar.setEnabled(true);
        jBtFinalizar.setEnabled(!true);
        jBtAuditoria.setEnabled(!true);
        //ABA PATOLOGIA/PARENTESCO
        jIdRegistro.setText("");
        jDescricaoPatologia.setText("");
        jComboBoxGrauParentesco.setSelectedItem("Selecione");
        //
        jIdRegistro.setEnabled(!true);
        jDescricaoPatologia.setEnabled(!true);
        jComboBoxGrauParentesco.setEnabled(!true);
        jBtPesqPatologia.setEnabled(!true);
        //
        jBtNovaPatologia.setEnabled(!true);
        jBtAlterarPatologia.setEnabled(!true);
        jBtExcluirPatologia.setEnabled(!true);
        jBtSalvarPatologia.setEnabled(!true);
        jBtCancelarPatologia.setEnabled(!true);
        jBtAuditoriaPatologia.setEnabled(!true);
    }

    public void Alterar() {
        //
        jBtPesqInternoHist.setEnabled(true);
        jDataHist.setEnabled(true);
        jObservacaoHist.setEnabled(true);
        //
        jBtNovo.setEnabled(!true);
        jBtAlterar.setEnabled(!true);
        jBtExcluir.setEnabled(!true);
        jBtSalvar.setEnabled(true);
        jBtCancelar.setEnabled(true);
        jBtFinalizar.setEnabled(!true);
        jBtAuditoria.setEnabled(!true);
        //ABA PATOLOGIA/PARENTESCO
        jIdRegistro.setText("");
        jDescricaoPatologia.setText("");
        jComboBoxGrauParentesco.setSelectedItem("Selecione");
        //
        jIdRegistro.setEnabled(!true);
        jDescricaoPatologia.setEnabled(!true);
        jComboBoxGrauParentesco.setEnabled(!true);
        jBtPesqPatologia.setEnabled(!true);
        //
        jBtNovaPatologia.setEnabled(!true);
        jBtAlterarPatologia.setEnabled(!true);
        jBtExcluirPatologia.setEnabled(!true);
        jBtSalvarPatologia.setEnabled(!true);
        jBtCancelarPatologia.setEnabled(!true);
        jBtAuditoriaPatologia.setEnabled(!true);
    }

    public void Excluir() {
        jIdHistorico.setText("");
        jStatusHist.setText("");
        jDataHist.setDate(null);
        jIdInternoHis.setText("");
        jNomeInternoHist.setText("");
        jNomeMaeInternoHist.setText("");
        jFotoInternoHist.setIcon(null);
        jPavilhãoHist.setText("");
        jCelaHist.setText("");
        jObservacaoHist.setText("");
        //
        jBtPesqInternoHist.setEnabled(!true);
        jDataHist.setEnabled(!true);
        jObservacaoHist.setEnabled(!true);
        //
        jBtNovo.setEnabled(true);
        jBtAlterar.setEnabled(!true);
        jBtExcluir.setEnabled(!true);
        jBtSalvar.setEnabled(!true);
        jBtCancelar.setEnabled(!true);
        jBtFinalizar.setEnabled(!true);
        jBtAuditoria.setEnabled(!true);
        //ABA PATOLOGIA/PARENTESCO
        jIdRegistro.setText("");
        jDescricaoPatologia.setText("");
        jComboBoxGrauParentesco.setSelectedItem("Selecione");
        //
        jIdRegistro.setEnabled(!true);
        jDescricaoPatologia.setEnabled(!true);
        jComboBoxGrauParentesco.setEnabled(!true);
        jBtPesqPatologia.setEnabled(!true);
        //
        jBtNovaPatologia.setEnabled(!true);
        jBtAlterarPatologia.setEnabled(!true);
        jBtExcluirPatologia.setEnabled(!true);
        jBtSalvarPatologia.setEnabled(!true);
        jBtCancelarPatologia.setEnabled(!true);
        jBtAuditoriaPatologia.setEnabled(!true);
    }

    public void Salvar() {
        //
        jBtPesqInternoHist.setEnabled(!true);
        jDataHist.setEnabled(!true);
        jObservacaoHist.setEnabled(!true);
        //
        jBtNovo.setEnabled(true);
        jBtAlterar.setEnabled(true);
        jBtExcluir.setEnabled(true);
        jBtSalvar.setEnabled(!true);
        jBtCancelar.setEnabled(!true);
        jBtFinalizar.setEnabled(true);
        jBtAuditoria.setEnabled(true);
        //
        jBtNovaPatologia.setEnabled(true);
        jBtAlterarPatologia.setEnabled(!true);
        jBtExcluirPatologia.setEnabled(!true);
        jBtSalvarPatologia.setEnabled(!true);
        jBtCancelarPatologia.setEnabled(!true);
        jBtAuditoriaPatologia.setEnabled(!true);
    }

    public void Cancelar() {
        if (jIdHistorico.getText().equals("")) {
            jStatusHist.setText("ABERTO");
            jDataHist.setDate(null);
            jNomeInternoHist.setText("");
            jIdInternoHis.setText("");
            jNomeMaeInternoHist.setText("");
            jFotoInternoHist.setIcon(null);
            jPavilhãoHist.setText("");
            jCelaHist.setText("");
            jObservacaoHist.setText("");
            //
            jBtPesqInternoHist.setEnabled(!true);
            jDataHist.setEnabled(!true);
            jObservacaoHist.setEnabled(!true);
            //
            jBtNovo.setEnabled(true);
            jBtAlterar.setEnabled(!true);
            jBtExcluir.setEnabled(!true);
            jBtSalvar.setEnabled(!true);
            jBtCancelar.setEnabled(!true);
            jBtFinalizar.setEnabled(!true);
            jBtAuditoria.setEnabled(!true);
            //ABA PATOLOGIA/PARENTESCO
            jIdRegistro.setText("");
            jDescricaoPatologia.setText("");
            jComboBoxGrauParentesco.setSelectedItem("Selecione");
            //
            jIdRegistro.setEnabled(!true);
            jDescricaoPatologia.setEnabled(!true);
            jComboBoxGrauParentesco.setEnabled(!true);
            jBtPesqPatologia.setEnabled(!true);
            //
            jBtNovaPatologia.setEnabled(!true);
            jBtAlterarPatologia.setEnabled(!true);
            jBtExcluirPatologia.setEnabled(!true);
            jBtSalvarPatologia.setEnabled(!true);
            jBtCancelarPatologia.setEnabled(!true);
            jBtAuditoriaPatologia.setEnabled(!true);
        } else {
            jBtPesqInternoHist.setEnabled(!true);
            jDataHist.setEnabled(!true);
            jObservacaoHist.setEnabled(!true);
            //
            jBtNovo.setEnabled(true);
            jBtAlterar.setEnabled(true);
            jBtExcluir.setEnabled(true);
            jBtSalvar.setEnabled(!true);
            jBtCancelar.setEnabled(!true);
            jBtFinalizar.setEnabled(true);
            jBtAuditoria.setEnabled(true);
            //ABA PATOLOGIA/PARENTESCO
            jIdRegistro.setText("");
            jDescricaoPatologia.setText("");
            jComboBoxGrauParentesco.setSelectedItem("Selecione");
            //
            jIdRegistro.setEnabled(!true);
            jDescricaoPatologia.setEnabled(!true);
            jComboBoxGrauParentesco.setEnabled(!true);
            jBtPesqPatologia.setEnabled(!true);
            //
            jBtNovaPatologia.setEnabled(true);
            jBtAlterarPatologia.setEnabled(!true);
            jBtExcluirPatologia.setEnabled(!true);
            jBtSalvarPatologia.setEnabled(!true);
            jBtCancelarPatologia.setEnabled(!true);
            jBtAuditoriaPatologia.setEnabled(!true);
        }
    }

    public void Finalizar() {
        statusMov = "Finalizou";
        horaMov = jHoraSistema.getText();
        dataModFinal = jDataSistema.getText();
        String statusAtend = "FINALIZADO";
        JOptionPane.showMessageDialog(rootPane, "Se esse atendimento for finaliza,\nvocê não poderá mais excluir ou alterar.");
        int resposta = JOptionPane.showConfirmDialog(this, "Deseja realmente FINALIZA o registro selecionado?", "Confirmação",
                JOptionPane.YES_NO_OPTION);
        if (resposta == JOptionPane.YES_OPTION) {
            objHistDoe.setStatusHist(statusAtend);
            objHistDoe.setIdHist(Integer.parseInt(jIdHistorico.getText()));
            control.FinalizarHistoricoDoencaAtual(objHistDoe);
            jStatusHist.setText(statusAtend);
            objLog();
            controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
            JOptionPane.showMessageDialog(rootPane, "Registro FINALIZADO com sucesso !!!");
        }
    }

    public void buscarCodigo() {
        conecta.abrirConexao();
        try {
            conecta.executaSQL("SELECT * FROM HISTORICO_DOENCA_FAMILIA");
            conecta.rs.last();
            jIdHistorico.setText(conecta.rs.getString("IdHist"));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Não foi possível obter o código do registro.\nERRO: " + e);
        }
        conecta.desconecta();
    }

    public void verificarItens() {
        conecta.abrirConexao();
        try {
            conecta.executaSQL("SELECT * FROM ITENS_HISTORICO_DOENCA_FAMILIA WHERE IdHist='" + jIdHistorico.getText() + "'");
            conecta.rs.first();
            codHist = conecta.rs.getString("IdHist");
        } catch (Exception e) {
        }
        conecta.desconecta();
    }

    public void NovoPatologia() {
        //ABA PATOLOGIA/PARENTESCO
        jIdRegistro.setText("");
        jDescricaoPatologia.setText("");
        jComboBoxGrauParentesco.setSelectedItem("Selecione");
        //               
        jComboBoxGrauParentesco.setEnabled(true);
        jBtPesqPatologia.setEnabled(true);
        //
        jBtNovaPatologia.setEnabled(!true);
        jBtAlterarPatologia.setEnabled(!true);
        jBtExcluirPatologia.setEnabled(!true);
        jBtSalvarPatologia.setEnabled(true);
        jBtCancelarPatologia.setEnabled(true);
        jBtAuditoriaPatologia.setEnabled(!true);
        // ABA MANUTENÇÃO
        jBtPesqInternoHist.setEnabled(!true);
        jDataHist.setEnabled(!true);
        jObservacaoHist.setEnabled(!true);
        //
        jBtNovo.setEnabled(!true);
        jBtAlterar.setEnabled(!true);
        jBtExcluir.setEnabled(!true);
        jBtSalvar.setEnabled(!true);
        jBtCancelar.setEnabled(!true);
        jBtFinalizar.setEnabled(!true);
        jBtAuditoria.setEnabled(!true);
    }

    public void AlterarPatologia() {
        jComboBoxGrauParentesco.setEnabled(true);
        jBtPesqPatologia.setEnabled(true);
        //
        jBtNovaPatologia.setEnabled(!true);
        jBtAlterarPatologia.setEnabled(!true);
        jBtExcluirPatologia.setEnabled(!true);
        jBtSalvarPatologia.setEnabled(true);
        jBtCancelarPatologia.setEnabled(true);
        jBtAuditoriaPatologia.setEnabled(!true);
        // ABA MANUTENÇÃO
        jBtPesqInternoHist.setEnabled(!true);
        jDataHist.setEnabled(!true);
        jObservacaoHist.setEnabled(!true);
        //
        jBtNovo.setEnabled(!true);
        jBtAlterar.setEnabled(!true);
        jBtExcluir.setEnabled(!true);
        jBtSalvar.setEnabled(!true);
        jBtCancelar.setEnabled(!true);
        jBtFinalizar.setEnabled(!true);
        jBtAuditoria.setEnabled(!true);
    }

    public void ExcluirPatologia() {
        //ABA PATOLOGIA/PARENTESCO
        jIdRegistro.setText("");
        jDescricaoPatologia.setText("");
        jComboBoxGrauParentesco.setSelectedItem("Selecione");
        //               
        jComboBoxGrauParentesco.setEnabled(!true);
        jBtPesqPatologia.setEnabled(!true);
        //
        jBtNovaPatologia.setEnabled(true);
        jBtAlterarPatologia.setEnabled(!true);
        jBtExcluirPatologia.setEnabled(!true);
        jBtSalvarPatologia.setEnabled(!true);
        jBtCancelarPatologia.setEnabled(!true);
        jBtAuditoriaPatologia.setEnabled(!true);
        // ABA MANUTENÇÃO
        jBtPesqInternoHist.setEnabled(!true);
        jDataHist.setEnabled(!true);
        jObservacaoHist.setEnabled(!true);
        //
        jBtNovo.setEnabled(true);
        jBtAlterar.setEnabled(true);
        jBtExcluir.setEnabled(true);
        jBtSalvar.setEnabled(!true);
        jBtCancelar.setEnabled(true);
        jBtFinalizar.setEnabled(true);
        jBtAuditoria.setEnabled(true);
    }

    public void SalvarPatologia() {
        jComboBoxGrauParentesco.setEnabled(!true);
        jBtPesqPatologia.setEnabled(!true);
        //
        jBtNovaPatologia.setEnabled(true);
        jBtAlterarPatologia.setEnabled(!true);
        jBtExcluirPatologia.setEnabled(!true);
        jBtSalvarPatologia.setEnabled(!true);
        jBtCancelarPatologia.setEnabled(!true);
        jBtAuditoriaPatologia.setEnabled(!true);
        // ABA MANUTENÇÃO
        jBtPesqInternoHist.setEnabled(!true);
        jDataHist.setEnabled(!true);
        jObservacaoHist.setEnabled(!true);
        //
        jBtNovo.setEnabled(true);
        jBtAlterar.setEnabled(true);
        jBtExcluir.setEnabled(true);
        jBtSalvar.setEnabled(!true);
        jBtCancelar.setEnabled(true);
        jBtFinalizar.setEnabled(true);
        jBtAuditoria.setEnabled(true);
    }

    public void CancelarPatologia() {
        //ABA PATOLOGIA/PARENTESCO
        jIdRegistro.setText("");
        jDescricaoPatologia.setText("");
        jComboBoxGrauParentesco.setSelectedItem("Selecione");
        //               
        jComboBoxGrauParentesco.setEnabled(!true);
        jBtPesqPatologia.setEnabled(!true);
        //
        jBtNovaPatologia.setEnabled(true);
        jBtAlterarPatologia.setEnabled(!true);
        jBtExcluirPatologia.setEnabled(!true);
        jBtSalvarPatologia.setEnabled(!true);
        jBtCancelarPatologia.setEnabled(!true);
        jBtAuditoriaPatologia.setEnabled(!true);
        // ABA MANUTENÇÃO
        jBtPesqInternoHist.setEnabled(!true);
        jDataHist.setEnabled(!true);
        jObservacaoHist.setEnabled(!true);
        //
        jBtNovo.setEnabled(true);
        jBtAlterar.setEnabled(true);
        jBtExcluir.setEnabled(true);
        jBtSalvar.setEnabled(!true);
        jBtCancelar.setEnabled(true);
        jBtFinalizar.setEnabled(true);
        jBtAuditoria.setEnabled(true);
    }

    public void buscarCodigoItem() {
        conecta.abrirConexao();
        try {
            conecta.executaSQL("SELECT * FROM ITENS_HISTORICO_DOENCA_FAMILIA");
            conecta.rs.last();
            jIdRegistro.setText(conecta.rs.getString("ItensIdHist"));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Não foi possível obter o código do registro.\nERRO: " + e);
        }
        conecta.desconecta();
    }

    public void preencherTabelaHistoricoDoencas(String sql) {
        ArrayList dados = new ArrayList();
        String[] Colunas = new String[]{"Código", "Data", "Status", "Nome Completo do Interno"};
        conecta.abrirConexao();
        try {
            conecta.executaSQL(sql);
            conecta.rs.first();
            do {
                count = count + 1;
                // Formatar a data de emissão
                dataEmissao = conecta.rs.getString("DataHist");
                String dia = dataEmissao.substring(8, 10);
                String mes = dataEmissao.substring(5, 7);
                String ano = dataEmissao.substring(0, 4);
                dataEmissao = dia + "/" + mes + "/" + ano;
                //
                jtotalRegistros.setText(Integer.toString(count)); // Converter inteiro em string para exibir na tela
                dados.add(new Object[]{conecta.rs.getInt("IdHist"), dataEmissao, conecta.rs.getString("StatusHist"), conecta.rs.getString("NomeInternoCrc")});
            } while (conecta.rs.next());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Não existem dados a serem EXIBIDOS !!!");
        }
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTabelaHistoricoDoencas.setModel(modelo);
        jTabelaHistoricoDoencas.getColumnModel().getColumn(0).setPreferredWidth(50);
        jTabelaHistoricoDoencas.getColumnModel().getColumn(0).setResizable(false);
        jTabelaHistoricoDoencas.getColumnModel().getColumn(1).setPreferredWidth(70);
        jTabelaHistoricoDoencas.getColumnModel().getColumn(1).setResizable(false);
        jTabelaHistoricoDoencas.getColumnModel().getColumn(2).setPreferredWidth(80);
        jTabelaHistoricoDoencas.getColumnModel().getColumn(2).setResizable(false);
        jTabelaHistoricoDoencas.getColumnModel().getColumn(3).setPreferredWidth(350);
        jTabelaHistoricoDoencas.getColumnModel().getColumn(3).setResizable(false);
        jTabelaHistoricoDoencas.getTableHeader().setReorderingAllowed(false);
        jTabelaHistoricoDoencas.setAutoResizeMode(jTabelaHistoricoDoencas.AUTO_RESIZE_OFF);
        jTabelaHistoricoDoencas.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        alinharCamposTabela();
        conecta.desconecta();
    }

    public void limparTabela() {
        ArrayList dados = new ArrayList();
        String[] Colunas = new String[]{"Código", "Data", "Status", "Nome Completo do Interno"};
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTabelaHistoricoDoencas.setModel(modelo);
        jTabelaHistoricoDoencas.getColumnModel().getColumn(0).setPreferredWidth(50);
        jTabelaHistoricoDoencas.getColumnModel().getColumn(0).setResizable(false);
        jTabelaHistoricoDoencas.getColumnModel().getColumn(1).setPreferredWidth(70);
        jTabelaHistoricoDoencas.getColumnModel().getColumn(1).setResizable(false);
        jTabelaHistoricoDoencas.getColumnModel().getColumn(2).setPreferredWidth(80);
        jTabelaHistoricoDoencas.getColumnModel().getColumn(2).setResizable(false);
        jTabelaHistoricoDoencas.getColumnModel().getColumn(3).setPreferredWidth(350);
        jTabelaHistoricoDoencas.getColumnModel().getColumn(3).setResizable(false);
        jTabelaHistoricoDoencas.getTableHeader().setReorderingAllowed(false);
        jTabelaHistoricoDoencas.setAutoResizeMode(jTabelaHistoricoDoencas.AUTO_RESIZE_OFF);
        jTabelaHistoricoDoencas.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        modelo.getLinhas().clear();
    }

    public void alinharCamposTabela() {
        DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
        DefaultTableCellRenderer direita = new DefaultTableCellRenderer();
        centralizado.setHorizontalAlignment(SwingConstants.CENTER);
        direita.setHorizontalAlignment(SwingConstants.RIGHT);
        //
        jTabelaHistoricoDoencas.getColumnModel().getColumn(0).setCellRenderer(centralizado);
        jTabelaHistoricoDoencas.getColumnModel().getColumn(1).setCellRenderer(centralizado);
        jTabelaHistoricoDoencas.getColumnModel().getColumn(2).setCellRenderer(centralizado);
    }

    public void preencherTabelaItensPatologiaParentesco(String sql) {
        ArrayList dados = new ArrayList();
        String[] Colunas = new String[]{"Registro", "Descrição da Patologia", "Grau de Parenesco"};
        conecta.abrirConexao();
        try {
            conecta.executaSQL(sql);
            conecta.rs.first();
            count1 = 0;
            do {
                count1 = count1 + 1;
                jtotalRegistrosItens.setText(Integer.toString(count1)); // Converter inteiro em string para exibir na tela
                dados.add(new Object[]{conecta.rs.getInt("ItensIdHist"), conecta.rs.getString("Descricao"), conecta.rs.getString("GrauParentesco")});
            } while (conecta.rs.next());
        } catch (SQLException ex) {
        }
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTabelaPatologiaParentesco.setModel(modelo);
        jTabelaPatologiaParentesco.getColumnModel().getColumn(0).setPreferredWidth(50);
        jTabelaPatologiaParentesco.getColumnModel().getColumn(0).setResizable(false);
        jTabelaPatologiaParentesco.getColumnModel().getColumn(1).setPreferredWidth(250);
        jTabelaPatologiaParentesco.getColumnModel().getColumn(1).setResizable(false);
        jTabelaPatologiaParentesco.getColumnModel().getColumn(2).setPreferredWidth(120);
        jTabelaPatologiaParentesco.getColumnModel().getColumn(2).setResizable(false);
        jTabelaPatologiaParentesco.getTableHeader().setReorderingAllowed(false);
        jTabelaPatologiaParentesco.setAutoResizeMode(jTabelaPatologiaParentesco.AUTO_RESIZE_OFF);
        jTabelaPatologiaParentesco.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        alinharCamposTabelaPatologiaParentesco();
        conecta.desconecta();
    }

    public void limparTabelaItensPatologiaParentesco() {
        ArrayList dados = new ArrayList();
        String[] Colunas = new String[]{"Registro", "Descrição da Patologia", "Grau de Parenesco"};
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTabelaPatologiaParentesco.setModel(modelo);
        jTabelaPatologiaParentesco.getColumnModel().getColumn(0).setPreferredWidth(50);
        jTabelaPatologiaParentesco.getColumnModel().getColumn(0).setResizable(false);
        jTabelaPatologiaParentesco.getColumnModel().getColumn(1).setPreferredWidth(250);
        jTabelaPatologiaParentesco.getColumnModel().getColumn(1).setResizable(false);
        jTabelaPatologiaParentesco.getColumnModel().getColumn(2).setPreferredWidth(120);
        jTabelaPatologiaParentesco.getColumnModel().getColumn(2).setResizable(false);
        jTabelaPatologiaParentesco.getTableHeader().setReorderingAllowed(false);
        jTabelaPatologiaParentesco.setAutoResizeMode(jTabelaPatologiaParentesco.AUTO_RESIZE_OFF);
        jTabelaPatologiaParentesco.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        modelo.getLinhas().clear();
    }

    public void alinharCamposTabelaPatologiaParentesco() {
        DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
        DefaultTableCellRenderer direita = new DefaultTableCellRenderer();
        centralizado.setHorizontalAlignment(SwingConstants.CENTER);
        direita.setHorizontalAlignment(SwingConstants.RIGHT);
        //
        jTabelaPatologiaParentesco.getColumnModel().getColumn(0).setCellRenderer(centralizado);
    }

    public void objLog() {
        objLogSys.setDataMov(dataModFinal);
        objLogSys.setHorarioMov(horaMov);
        objLogSys.setNomeModuloTela(nomeModuloTela);
        objLogSys.setIdLancMov(Integer.valueOf(jIdHistorico.getText()));
        objLogSys.setNomeUsuarioLogado(nameUser);
        objLogSys.setStatusMov(statusMov);
    }

    public void objLog1() {
        objLogSys.setDataMov(dataModFinal);
        objLogSys.setHorarioMov(horaMov);
        objLogSys.setNomeModuloTela(nomeModuloTela);
        objLogSys.setIdLancMov(Integer.valueOf(jIdHistorico.getText()));
        objLogSys.setNomeUsuarioLogado(nameUser);
        objLogSys.setStatusMov(statusMov);
    }

    public void buscarAcessoUsuario(String nomeTelaAcesso) {
        conecta.abrirConexao();
        try {
            conecta.executaSQL("SELECT * FROM USUARIOS "
                    + "WHERE NomeUsuario='" + nameUser + "'");
            conecta.rs.first();
            codigoUserENF = conecta.rs.getInt("IdUsuario");
        } catch (Exception e) {
        }
        try {
            conecta.executaSQL("SELECT * FROM USUARIOS_GRUPOS "
                    + "INNER JOIN GRUPOUSUARIOS "
                    + "ON USUARIOS_GRUPOS.IdGrupo=GRUPOUSUARIOS.IdGrupo "
                    + "WHERE IdUsuario='" + codigoUserENF + "'");
            conecta.rs.first();
            codigoUserGroupENF = conecta.rs.getInt("IdUsuario");
            codigoGrupoENF = conecta.rs.getInt("IdGrupo");
            nomeGrupoENF = conecta.rs.getString("NomeGrupo");
        } catch (Exception e) {
        }
        try {
            conecta.executaSQL("SELECT * FROM TELAS_ACESSO "
                    + "WHERE IdUsuario='" + codigoUserENF + "' "
                    + "AND NomeTela='" + nomeTelaAcesso + "'");
            conecta.rs.first();
            codUserAcessoENF = conecta.rs.getInt("IdUsuario");
            codAbrirENF = conecta.rs.getInt("Abrir");
            codIncluirENF = conecta.rs.getInt("Incluir");
            codAlterarENF = conecta.rs.getInt("Alterar");
            codExcluirENF = conecta.rs.getInt("Excluir");
            codGravarENF = conecta.rs.getInt("Gravar");
            codConsultarENF = conecta.rs.getInt("Consultar");
            nomeTelaENF = conecta.rs.getString("NomeTela");
        } catch (Exception e) {
        }
        conecta.desconecta();
    }
}
