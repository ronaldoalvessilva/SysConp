/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestor.Visao;

import gestor.Controle.ControleItensCalculado;
import gestor.Dao.ConexaoBancoDados;
import Utilitarios.ModeloTabela;
import gestor.Modelo.ItensReceitaCalculado;
import static gestor.Visao.TelaFichaTecnica.jBtConfirmarCalculo;
import static gestor.Visao.TelaFichaTecnica.jBtIniciarCalculos;
import static gestor.Visao.TelaFichaTecnica.jBtSairCalculos;
import static gestor.Visao.TelaFichaTecnica.jComboBoxStatusCalculo;
import static gestor.Visao.TelaFichaTecnica.jDataCalculo;
import static gestor.Visao.TelaFichaTecnica.jIdFicha;
import static gestor.Visao.TelaFichaTecnica.jQuantidadePorcoes;
import static gestor.Visao.TelaFichaTecnica.jTabelaCalculoRefeicao;
import static gestor.Visao.TelaFichaTecnica.jTabelaItensIngredientes;
import static gestor.Visao.TelaFichaTecnica.jtotalItensCal;
import static gestor.Visao.TelaFichaTecnica.qtdFinalCal;
import static gestor.Visao.TelaFichaTecnica.qtdItem;
import static gestor.Visao.TelaFichaTecnica.qtdItemTab;
import static gestor.Visao.TelaLoginSenha.nameUser;
import static gestor.Visao.TelaModuloPrincipal.jDataSistema;
import static gestor.Visao.TelaModuloPrincipal.jHoraSistema;
import static java.lang.Thread.sleep;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Currency;
import java.util.Locale;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author ronaldo
 */
public class TelaCalculoIngredientesNutricao extends javax.swing.JInternalFrame {

    ConexaoBancoDados conecta = new ConexaoBancoDados();
    ItensReceitaCalculado objItensCal = new ItensReceitaCalculado();
    ControleItensCalculado controles = new ControleItensCalculado();

    int count;
    String statusMov, codRegistro;
    String horaMov;
    String dataModFinal, dataCalculo;
    public static double qtdTotalCalc = 0;
    public static String qtdTotalCalc1;
    int item = 0;
    String statusCal = "Calculado";

    /**
     * Creates new form TelaCalculoIngredientesNutricao
     */
    public TelaCalculoIngredientesNutricao() {
        initComponents();
        jProgressBar1.setVisible(!true);
        setDefaultCloseOperation(JInternalFrame.DO_NOTHING_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jBtSalvar = new javax.swing.JButton();
        lblCarregando = new javax.swing.JLabel();
        jBtSair = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("...::: Calculo de Ingredientes {NUTRI} :::...");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jProgressBar1.setInheritsPopupMenu(true);
        jProgressBar1.setStringPainted(true);

        jBtSalvar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jBtSalvar.setForeground(new java.awt.Color(0, 204, 51));
        jBtSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/1294_16x16.png"))); // NOI18N
        jBtSalvar.setText("Gravar");
        jBtSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtSalvarActionPerformed(evt);
            }
        });

        lblCarregando.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblCarregando.setForeground(new java.awt.Color(0, 0, 255));
        lblCarregando.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jBtSair.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jBtSair.setForeground(new java.awt.Color(255, 0, 0));
        jBtSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Log_Out_Icon_16.png"))); // NOI18N
        jBtSair.setText("Sair");
        jBtSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtSairActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setText("Essa rotina irá efetuar os calculos de todos os ingredientes. ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 0, 0));
        jLabel2.setText("Após iniciar não será possível cancelar operação.");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCarregando, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(jBtSalvar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtSair)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBtSair, jBtSalvar});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jBtSalvar)
                    .addComponent(jBtSair))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCarregando, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jBtSair, jBtSalvar});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setBounds(400, 30, 425, 207);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtSalvarActionPerformed

        statusMov = "Incluiu";
        horaMov = jHoraSistema.getText();
        dataModFinal = jDataSistema.getText();
        int resposta = JOptionPane.showConfirmDialog(this, "Essa tarefa irá calcular os ingredientes totais para preparação das refeições dos internos.\nAguarde até o termino da tarefa sem interrompe-la. Deseja prosseguir?", "Confirmação",
                JOptionPane.YES_NO_OPTION);
        if (resposta == JOptionPane.YES_OPTION) {
            jProgressBar1.setVisible(true);
            //            
            jDataCalculo.setEnabled(!true);
            jComboBoxStatusCalculo.setEnabled(!true);
            jQuantidadePorcoes.setEnabled(!true);
            jBtIniciarCalculos.setEnabled(!true);
            jBtConfirmarCalculo.setEnabled(!true);
            jBtSairCalculos.setEnabled(!true);
            //
            jBtSalvar.setEnabled(!true);
            jBtSair.setEnabled(!true);
            // VERIFICA SE JÁ FOI CALCULADO AS PORÇÕES.
            verificarRegistros();
            if (jIdFicha.getText().equals(codRegistro)) {
                // EXCLUI OS ITENS PARA UM NOVO CALCULO DOS TOTAIS DE PORÇÕES
                objItensCal.setIdFicha(Integer.valueOf(jIdFicha.getText()));
                controles.excluirItensCalcNUTRI(objItensCal);
                SalvarRegistros registro = new SalvarRegistros();
                BarraDeProgesso barra = new BarraDeProgesso();
                Thread threadBarra = new Thread(barra);
                threadBarra.start();
                Thread executor = new Thread(registro);  // Criação da Thread
                executor.start();   // Inicio da execução da Thread
            } else {
                SalvarRegistros registro = new SalvarRegistros();
                BarraDeProgesso barra = new BarraDeProgesso();
                Thread threadBarra = new Thread(barra);
                threadBarra.start();
                Thread executor = new Thread(registro);  // Criação da Thread
                executor.start();   // Inicio da execução da Thread
            }
        }
    }//GEN-LAST:event_jBtSalvarActionPerformed

    private void jBtSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtSairActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jBtSairActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtSair;
    private javax.swing.JButton jBtSalvar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JLabel lblCarregando;
    // End of variables declaration//GEN-END:variables

    // Runnable para barra de processo
    class BarraDeProgesso implements Runnable {

        //Método de exibição da barra
        @Override
        public void run() {

            for (int i = 0; i < jTabelaItensIngredientes.getRowCount() || i <= 101; i++) {
                try {
                    sleep(100);
                } catch (InterruptedException e) {
                }
                jProgressBar1.setValue(i);
                if (jProgressBar1.getValue() <= 25) {
                    lblCarregando.setText("Inciando os calculos, Aguarde !!!");
                } else if (jProgressBar1.getValue() <= 65) {
                    lblCarregando.setText("Calculando dados, Aguarde !!!");
                } else if (jProgressBar1.getValue() <= 95) {
                    lblCarregando.setText("Finalizando calculos, Aguarde !!!");
                } else if (jProgressBar1.getValue() <= 100) {
                    lblCarregando.setText("Calculos concluido com sucesso !!!");
                    jBtSair.setEnabled(true);
                    jBtSairCalculos.setEnabled(true);
                }
            }
        }
    }

    class SalvarRegistros implements Runnable {

        DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");

        @Override
        public void run() {
            try {
                sleep(100);// TEMPO EM QUE A THREAD FICA DORMINDO
            } catch (InterruptedException e) {
            }
            DecimalFormat valorRealMoed = new DecimalFormat("###,##00.0");
            valorRealMoed.setCurrency(Currency.getInstance(new Locale("pt", "BR")));
            item = 1;
            jComboBoxStatusCalculo.setSelectedItem("Calculado");
            objItensCal.setStatusCalc(statusCal);
            for (int i = 0; i < jTabelaItensIngredientes.getRowCount(); i++) {
                preencherTabelaItensIngredientesCalculados("SELECT * FROM ITENS_INGREDIENTES_FICHA_TECNICA_CALCULADO_NUTRI "
                        + "INNER JOIN PRODUTOS_NUTRI "
                        + "ON ITENS_INGREDIENTES_FICHA_TECNICA_CALCULADO_NUTRI.IdProd=PRODUTOS_NUTRI.IdProd "
                        + "WHERE IdFicha='" + jIdFicha.getText() + "'");
                objItensCal.setItem(item);
                objItensCal.setDataCalc(jDataCalculo.getDate());
                objItensCal.setStatusCalc((String) jComboBoxStatusCalculo.getSelectedItem());
                objItensCal.setIdFicha(Integer.valueOf(jIdFicha.getText()));
                objItensCal.setQtdPorcao(Float.parseFloat(jQuantidadePorcoes.getText()));
                objItensCal.setItemCalc(item);
                objItensCal.setUsuarioInsert(nameUser);
                objItensCal.setDataInsert(dataModFinal);
                objItensCal.setHorarioInsert(horaMov);
                objItensCal.setIdProd((int) jTabelaItensIngredientes.getValueAt(i, 1));
                objItensCal.setUnidade((String) jTabelaItensIngredientes.getValueAt(i, 3));
                try {
                    objItensCal.setQtdPorcaoCalc(valorRealMoed.parse((String) jTabelaItensIngredientes.getValueAt(i, 6)).floatValue());
                    objItensCal.setQtdFinal(valorRealMoed.parse((String) jTabelaItensIngredientes.getValueAt(i, 6)).floatValue());
                } catch (ParseException ex) {
                }
                //
                qtdFinalCal = objItensCal.getQtdFinal() * objItensCal.getQtdPorcao();
                //
                objItensCal.setQtdTotal((float) qtdFinalCal);
                controles.incluirItensCalcNUTRI(objItensCal);
                item = item + 1;
                preencherTabelaItensIngredientesCalculados("SELECT * FROM ITENS_INGREDIENTES_FICHA_TECNICA_CALCULADO_NUTRI "
                        + "INNER JOIN PRODUTOS_NUTRI "
                        + "ON ITENS_INGREDIENTES_FICHA_TECNICA_CALCULADO_NUTRI.IdProd=PRODUTOS_NUTRI.IdProd "
                        + "WHERE IdFicha='" + jIdFicha.getText() + "'");
            }
        }
    }

    public void preencherTabelaItensIngredientesCalculados(String sql) {
        ArrayList dados = new ArrayList();
        String[] Colunas = new String[]{"Item", "Data Cal. ", "Código ", "Descrição Ingrediente", "UN", "Qtd.Porção", "Qtd.Final"};
        conecta.abrirConexao();
        try {
            conecta.executaSQL(sql);
            conecta.rs.first();
            count = 0;
            do {
                count = count + 1;
                dataCalculo = conecta.rs.getString("DataCalc");
                String dia = dataCalculo.substring(8, 10);
                String mes = dataCalculo.substring(5, 7);
                String ano = dataCalculo.substring(0, 4);
                dataCalculo = dia + "/" + mes + "/" + ano;
                //
                qtdItem = conecta.rs.getFloat("QtdPorcao");
                DecimalFormat vi = new DecimalFormat(",###0.00");
                String vqtdItem = vi.format(qtdItem);
                qtdItemTab = vqtdItem;
                //
                qtdTotalCalc = conecta.rs.getFloat("QtdTotal");
                DecimalFormat qtdTotalC = new DecimalFormat(",###0.000");
                String vqtdCalc = qtdTotalC.format(qtdTotalCalc);
                qtdTotalCalc1 = vqtdCalc;
                jtotalItensCal.setText(Integer.toString(count)); // Converter inteiro em string para exibir na tela 
                dados.add(new Object[]{conecta.rs.getInt("Item"), dataCalculo, conecta.rs.getInt("IdProd"), conecta.rs.getString("DescricaoProd"), conecta.rs.getString("Unidade"), qtdItemTab, qtdTotalCalc1});
            } while (conecta.rs.next());
        } catch (SQLException ex) {
        }
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTabelaCalculoRefeicao.setModel(modelo);
        jTabelaCalculoRefeicao.getColumnModel().getColumn(0).setPreferredWidth(40);
        jTabelaCalculoRefeicao.getColumnModel().getColumn(0).setResizable(false);
        jTabelaCalculoRefeicao.getColumnModel().getColumn(1).setPreferredWidth(80);
        jTabelaCalculoRefeicao.getColumnModel().getColumn(1).setResizable(false);
        jTabelaCalculoRefeicao.getColumnModel().getColumn(2).setPreferredWidth(50);
        jTabelaCalculoRefeicao.getColumnModel().getColumn(2).setResizable(false);
        jTabelaCalculoRefeicao.getColumnModel().getColumn(3).setPreferredWidth(300);
        jTabelaCalculoRefeicao.getColumnModel().getColumn(3).setResizable(false);
        jTabelaCalculoRefeicao.getColumnModel().getColumn(4).setPreferredWidth(50);
        jTabelaCalculoRefeicao.getColumnModel().getColumn(4).setResizable(false);
        jTabelaCalculoRefeicao.getColumnModel().getColumn(5).setPreferredWidth(80);
        jTabelaCalculoRefeicao.getColumnModel().getColumn(5).setResizable(false);
        jTabelaCalculoRefeicao.getColumnModel().getColumn(6).setPreferredWidth(70);
        jTabelaCalculoRefeicao.getColumnModel().getColumn(6).setResizable(false);
        jTabelaCalculoRefeicao.getTableHeader().setReorderingAllowed(false);
        jTabelaCalculoRefeicao.setAutoResizeMode(jTabelaCalculoRefeicao.AUTO_RESIZE_OFF);
        jTabelaCalculoRefeicao.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        alinharTabelaItensCalculado();
        conecta.desconecta();
    }

    public void alinharTabelaItensCalculado() {
        //
        DefaultTableCellRenderer esquerda = new DefaultTableCellRenderer();
        DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
        DefaultTableCellRenderer direita = new DefaultTableCellRenderer();
        //
        esquerda.setHorizontalAlignment(SwingConstants.LEFT);
        centralizado.setHorizontalAlignment(SwingConstants.CENTER);
        direita.setHorizontalAlignment(SwingConstants.RIGHT);
        //
        jTabelaCalculoRefeicao.getColumnModel().getColumn(0).setCellRenderer(centralizado);
        jTabelaCalculoRefeicao.getColumnModel().getColumn(1).setCellRenderer(centralizado);
        jTabelaCalculoRefeicao.getColumnModel().getColumn(2).setCellRenderer(centralizado);
        jTabelaCalculoRefeicao.getColumnModel().getColumn(4).setCellRenderer(centralizado);
        jTabelaCalculoRefeicao.getColumnModel().getColumn(5).setCellRenderer(direita);
        jTabelaCalculoRefeicao.getColumnModel().getColumn(6).setCellRenderer(direita);
    }

    public void verificarRegistros() {
        conecta.abrirConexao();
        try {
            conecta.executaSQL("SELECT * FROM ITENS_INGREDIENTES_FICHA_TECNICA_CALCULADO_NUTRI WHERE IdFicha='" + jIdFicha.getText() + "'");
            conecta.rs.first();
            codRegistro = conecta.rs.getString("IdFicha");
        } catch (Exception e) {
        }
        conecta.desconecta();
    }
}
