/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestor.Visao;

import gestor.Dao.ConexaoBancoDados;
import static gestor.Visao.TelaLoginSenha.nameUser;
import static gestor.Visao.TelaModuloPrincipal.tipoServidor;

import java.text.SimpleDateFormat;
import java.util.HashMap;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRResultSetDataSource;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Ronaldo
 */
public class TelaRelatorioEntradaSaidaPorHorario extends javax.swing.JInternalFrame {

    ConexaoBancoDados conecta = new ConexaoBancoDados();

    int flag;
    String dataInicial, dataFinal;
    String saidaTransferencia = "SAIDA TRANSFERENCIA";
    String saidaMedico = "SAIDA PARA MEDICO";
    String saidaAudiencia = "SAIDA PARA AUDIENCIA";
    String outrasSaidas = "OUTRAS SAIDAS";

    /**
     * Creates new form TelaRelatorioPorIdade
     */
    public TelaRelatorioEntradaSaidaPorHorario() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jDataPesqInicial = new com.toedter.calendar.JDateChooser();
        jDataPesFinal = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxSaidaRetorno = new javax.swing.JComboBox();
        jBtConfirmar = new javax.swing.JButton();
        jBtSair = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jLabel3.setText("jLabel3");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setClosable(true);
        setTitle("...::: Relatório Saída por Beneficio :::...");

        jTabbedPane1.setForeground(new java.awt.Color(0, 0, 255));
        jTabbedPane1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("Período de:");

        jDataPesqInicial.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jDataPesFinal.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("Até");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Tipo:");

        jComboBoxSaidaRetorno.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBoxSaidaRetorno.setForeground(new java.awt.Color(102, 0, 51));
        jComboBoxSaidaRetorno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Saídas de Internos", "Retorno Audiência, Retorno de Médico, Outros Retornos" }));
        jComboBoxSaidaRetorno.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDataPesqInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jDataPesFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jComboBoxSaidaRetorno, 0, 369, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBoxSaidaRetorno, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jDataPesqInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jDataPesFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(36, 36, 36))
        );

        jBtConfirmar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jBtConfirmar.setForeground(new java.awt.Color(0, 0, 255));
        jBtConfirmar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/accept.png"))); // NOI18N
        jBtConfirmar.setText("Confirmar");
        jBtConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtConfirmarActionPerformed(evt);
            }
        });

        jBtSair.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jBtSair.setForeground(new java.awt.Color(255, 0, 0));
        jBtSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Log_Out_Icon_16.png"))); // NOI18N
        jBtSair.setText("Sair");
        jBtSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtSairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(jBtConfirmar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtSair)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBtConfirmar, jBtSair});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jBtConfirmar)
                    .addComponent(jBtSair))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jBtConfirmar, jBtSair});

        jTabbedPane1.addTab("Pesquisa", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        setBounds(450, 200, 465, 170);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtConfirmarActionPerformed
        // TODO add your handling code here:
        if (tipoServidor == null || tipoServidor.equals("")) {
            JOptionPane.showMessageDialog(rootPane, "É necessário definir o parâmtero para o sistema operacional utilizado no servidor, (UBUNTU-LINUX ou WINDOWS SERVER).");
        } else if (tipoServidor.equals("Servidor Linux (Ubuntu)/MS-SQL Server")) {
            if (jComboBoxSaidaRetorno.getSelectedItem().equals("Saídas de Internos")) {
                if (jDataPesqInicial.getDate() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a data inicial para pesquisa.");
                    jDataPesqInicial.requestFocus();
                } else {
                    if (jDataPesFinal.getDate() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a data final para pesquisa.");
                        jDataPesFinal.requestFocus();
                    } else {
                        if (jDataPesqInicial.getDate().after(jDataPesFinal.getDate())) {
                            JOptionPane.showMessageDialog(rootPane, "Data Inicial não pode ser maior que data final");
                        } else {
                            SimpleDateFormat formatoAmerica = new SimpleDateFormat("yyyy/MM/dd");
                            dataInicial = formatoAmerica.format(jDataPesqInicial.getDate().getTime());
                            dataFinal = formatoAmerica.format(jDataPesFinal.getDate().getTime());
                            final ViewAguardeProcessando carregando = new ViewAguardeProcessando(); //Teste tela aguarde
                            carregando.setVisible(true);//Teste tela aguarde
                            Thread t = new Thread() { //Teste tela aguarde
                                public void run() { //Teste
                                    try {
                                        conecta.abrirConexao();
                                        String path = "reports/CRC/RelatorioSaidaInternosPortariaHorario.jasper";
                                        conecta.executaSQL("SELECT *  FROM ITENSREGSAIDA "
                                                + "INNER JOIN PRONTUARIOSCRC "
                                                + "ON ITENSREGSAIDA.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                                                + "INNER JOIN DADOSPENAISINTERNOS "
                                                + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                                                + "WHERE ITENSREGSAIDA.DataSaida BETWEEN '" + dataInicial + "' "
                                                + "AND '" + dataFinal + "' "
                                                + "OR ITENSREGSAIDA.DestinoSaida='" + saidaMedico + "' "
                                                + "OR ITENSREGSAIDA.DestinoSaida='" + saidaAudiencia + "' "
                                                + "OR ITENSREGSAIDA.DestinoSaida='" + outrasSaidas + "' "
                                                + "ORDER BY ITENSREGSAIDA.DataSaida, ITENSREGSAIDA.DestinoSaida,PRONTUARIOSCRC.NomeInternoCrc");
                                        HashMap parametros = new HashMap();
                                        parametros.put("dataInicial", dataInicial);
                                        parametros.put("dataFinal", dataFinal);
                                        parametros.put("saidaMedico", saidaMedico);
                                        parametros.put("saidaAudiencia", saidaAudiencia);
                                        parametros.put("outrasSaida", outrasSaidas);
                                        parametros.put("nomeUsuario", nameUser);
                                        JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                                        JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                                        JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                                        jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                                        jv.setTitle("Relatório de Saida de Interno");
                                        jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                                        jv.toFront(); // Traz o relatorio para frente da aplicação    
                                        carregando.dispose(); //Teste tela aguarde
                                        conecta.desconecta();
                                    } catch (JRException e) {
                                        JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
                                    }
                                }
                            }; //Teste tela aguarde
                            t.start(); //Teste tela aguarde
                        }
                    }
                }
            } else if (jComboBoxSaidaRetorno.getSelectedItem().equals("Retorno Audiência, Retorno de Médico, Outros Retornos")) {
                if (jDataPesqInicial.getDate() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a data inicial para pesquisa.");
                    jDataPesqInicial.requestFocus();
                } else {
                    if (jDataPesFinal.getDate() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a data final para pesquisa.");
                        jDataPesFinal.requestFocus();
                    } else {
                        if (jDataPesqInicial.getDate().after(jDataPesFinal.getDate())) {
                            JOptionPane.showMessageDialog(rootPane, "Data Inicial não pode ser maior que data final");
                        } else {
                            SimpleDateFormat formatoAmerica = new SimpleDateFormat("yyyy/MM/dd");
                            dataInicial = formatoAmerica.format(jDataPesqInicial.getDate().getTime());
                            dataFinal = formatoAmerica.format(jDataPesFinal.getDate().getTime());
                            final ViewAguardeProcessando carregando = new ViewAguardeProcessando(); //Teste tela aguarde
                            carregando.setVisible(true);//Teste tela aguarde
                            Thread t = new Thread() { //Teste tela aguarde
                                public void run() { //Teste
                                    try {
                                        conecta.abrirConexao();
                                        String path = "reports/CRC/RelatorioRetornoInternosPortariaHorario.jasper";
                                        conecta.executaSQL("SELECT *  FROM ITENSREGISTRO "
                                                + "INNER JOIN PRONTUARIOSCRC "
                                                + "ON ITENSREGISTRO.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                                                + "INNER JOIN DADOSPENAISINTERNOS "
                                                + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                                                + "WHERE ITENSREGISTRO.DataRetorno BETWEEN '" + dataInicial + "' "
                                                + "AND '" + dataFinal + "' "
                                                + "OR ITENSREGISTRO.OrigemRetorno='" + saidaMedico + "' "
                                                + "OR ITENSREGISTRO.OrigemRetorno='" + saidaAudiencia + "' "
                                                + "OR ITENSREGISTRO.OrigemRetorno='" + outrasSaidas + "' "
                                                + "ORDER BY ITENSREGISTRO.DataRetorno, ITENSREGISTRO.OrigemRetorno,PRONTUARIOSCRC.NomeInternoCrc");
                                        HashMap parametros = new HashMap();
                                        parametros.put("dataInicial", dataInicial);
                                        parametros.put("dataFinal", dataFinal);
                                        parametros.put("saidaMedico", saidaMedico);
                                        parametros.put("saidaAudiencia", saidaAudiencia);
                                        parametros.put("outrasSaida", outrasSaidas);
                                        parametros.put("nomeUsuario", nameUser);
                                        JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                                        JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                                        JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                                        jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                                        jv.setTitle("Relatório de Retorno de Audiência");
                                        jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                                        jv.toFront(); // Traz o relatorio para frente da aplicação     
                                        carregando.dispose(); //Teste tela aguarde
                                        conecta.desconecta();
                                    } catch (JRException e) {
                                        JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
                                    }
                                }
                            }; //Teste tela aguarde
                            t.start(); //Teste tela aguarde
                        }
                    }
                }
            }
        } else if (tipoServidor.equals("Servidor Windows/MS-SQL Server")) {
            if (jComboBoxSaidaRetorno.getSelectedItem().equals("Saídas de Internos")) {
                if (jDataPesqInicial.getDate() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a data inicial para pesquisa.");
                    jDataPesqInicial.requestFocus();
                } else {
                    if (jDataPesFinal.getDate() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a data final para pesquisa.");
                        jDataPesFinal.requestFocus();
                    } else {
                        if (jDataPesqInicial.getDate().after(jDataPesFinal.getDate())) {
                            JOptionPane.showMessageDialog(rootPane, "Data Inicial não pode ser maior que data final");
                        } else {
                            SimpleDateFormat formatoAmerica = new SimpleDateFormat("dd/MM/yyyy");
                            dataInicial = formatoAmerica.format(jDataPesqInicial.getDate().getTime());
                            dataFinal = formatoAmerica.format(jDataPesFinal.getDate().getTime());
                            try {
                                conecta.abrirConexao();
                                String path = "reports/CRC/RelatorioSaidaInternosPortariaHorario.jasper";
                                conecta.executaSQL("SELECT *  FROM ITENSREGSAIDA "
                                        + "INNER JOIN PRONTUARIOSCRC "
                                        + "ON ITENSREGSAIDA.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                                        + "INNER JOIN DADOSPENAISINTERNOS "
                                        + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                                        + "WHERE ITENSREGSAIDA.DataSaida BETWEEN '" + dataInicial + "' "
                                        + "AND '" + dataFinal + "' "
                                        + "OR ITENSREGSAIDA.DestinoSaida='" + saidaMedico + "' "
                                        + "OR ITENSREGSAIDA.DestinoSaida='" + saidaAudiencia + "' "
                                        + "OR ITENSREGSAIDA.DestinoSaida='" + outrasSaidas + "' "
                                        + "ORDER BY ITENSREGSAIDA.DataSaida, ITENSREGSAIDA.DestinoSaida,PRONTUARIOSCRC.NomeInternoCrc");
                                HashMap parametros = new HashMap();
                                parametros.put("dataInicial", dataInicial);
                                parametros.put("dataFinal", dataFinal);
                                parametros.put("saidaMedico", saidaMedico);
                                parametros.put("saidaAudiencia", saidaAudiencia);
                                parametros.put("outrasSaida", outrasSaidas);
                                parametros.put("nomeUsuario", nameUser);
                                JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                                JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                                JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                                jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                                jv.setTitle("Relatório de Saida de Interno");
                                jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                                jv.toFront(); // Traz o relatorio para frente da aplicação            
                                conecta.desconecta();
                            } catch (JRException e) {
                                JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
                            }
                        }
                    }
                }
            } else if (jComboBoxSaidaRetorno.getSelectedItem().equals("Retorno Audiência, Retorno de Médico, Outros Retornos")) {
                if (jDataPesqInicial.getDate() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a data inicial para pesquisa.");
                    jDataPesqInicial.requestFocus();
                } else {
                    if (jDataPesFinal.getDate() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a data final para pesquisa.");
                        jDataPesFinal.requestFocus();
                    } else {
                        if (jDataPesqInicial.getDate().after(jDataPesFinal.getDate())) {
                            JOptionPane.showMessageDialog(rootPane, "Data Inicial não pode ser maior que data final");
                        } else {
                            SimpleDateFormat formatoAmerica = new SimpleDateFormat("dd/MM/yyyy");
                            dataInicial = formatoAmerica.format(jDataPesqInicial.getDate().getTime());
                            dataFinal = formatoAmerica.format(jDataPesFinal.getDate().getTime());
                            try {
                                conecta.abrirConexao();
                                String path = "reports/CRC/RelatorioRetornoInternosPortariaHorario.jasper";
                                conecta.executaSQL("SELECT *  FROM ITENSREGISTRO "
                                        + "INNER JOIN PRONTUARIOSCRC "
                                        + "ON ITENSREGISTRO.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                                        + "INNER JOIN DADOSPENAISINTERNOS "
                                        + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                                        + "WHERE ITENSREGISTRO.DataRetorno BETWEEN '" + dataInicial + "' "
                                        + "AND '" + dataFinal + "' "
                                        + "OR ITENSREGISTRO.OrigemRetorno='" + saidaMedico + "' "
                                        + "OR ITENSREGISTRO.OrigemRetorno='" + saidaAudiencia + "' "
                                        + "OR ITENSREGISTRO.OrigemRetorno='" + outrasSaidas + "' "
                                        + "ORDER BY ITENSREGISTRO.DataRetorno, ITENSREGISTRO.OrigemRetorno,PRONTUARIOSCRC.NomeInternoCrc");
                                HashMap parametros = new HashMap();
                                parametros.put("dataInicial", dataInicial);
                                parametros.put("dataFinal", dataFinal);
                                parametros.put("saidaMedico", saidaMedico);
                                parametros.put("saidaAudiencia", saidaAudiencia);
                                parametros.put("outrasSaida", outrasSaidas);
                                parametros.put("nomeUsuario", nameUser);
                                JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                                JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                                JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                                jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                                jv.setTitle("Relatório de Retorno de Audiência");
                                jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                                jv.toFront(); // Traz o relatorio para frente da aplicação            
                                conecta.desconecta();
                            } catch (JRException e) {
                                JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jBtConfirmarActionPerformed

    private void jBtSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtSairActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jBtSairActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtConfirmar;
    private javax.swing.JButton jBtSair;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBoxSaidaRetorno;
    private com.toedter.calendar.JDateChooser jDataPesFinal;
    private com.toedter.calendar.JDateChooser jDataPesqInicial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

}
