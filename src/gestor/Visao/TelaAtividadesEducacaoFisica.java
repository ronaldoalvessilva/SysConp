/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestor.Visao;

import gestor.Controle.ControleListaAcessosPlanejamentoAtividadesGrupo;
import gestor.Controle.ControleLogSistema;
import gestor.Controle.ControlePlanejamentoAtividades;
import gestor.Controle.PesquisaPlanejamentoCodigo;
import gestor.Dao.ConexaoBancoDados;
import gestor.Modelo.CamposAcessos;
import gestor.Modelo.LogSistema;
import gestor.Modelo.PlanejamentoAtividades;
import static gestor.Visao.TelaLoginSenha.nameUser;
import static gestor.Visao.TelaModuloEducacaoFisica.codAbrirEF;
import static gestor.Visao.TelaModuloEducacaoFisica.codUserAcessoEF;
import static gestor.Visao.TelaModuloEducacaoFisica.codigoUserEF;
import static gestor.Visao.TelaModuloEducacaoFisica.nomeGrupoEF;
import static gestor.Visao.TelaModuloEducacaoFisica.codigoUserGroupEF;
import static gestor.Visao.TelaModuloEducacaoFisica.codigoGrupoEF;
import static gestor.Visao.TelaModuloEducacaoFisica.codIncluirEF;
import static gestor.Visao.TelaModuloEducacaoFisica.codAlterarEF;
import static gestor.Visao.TelaModuloEducacaoFisica.codExcluirEF;
import static gestor.Visao.TelaModuloEducacaoFisica.codGravarEF;
import static gestor.Visao.TelaModuloEducacaoFisica.codConsultarEF;
import static gestor.Visao.TelaModuloEducacaoFisica.nomeTelaEF;
import static gestor.Visao.TelaModuloEducacaoFisica.telaPlanejamentoAtividadesManu_EF;
import static gestor.Visao.TelaModuloPrincipal.jDataSistema;
import static gestor.Visao.TelaModuloPrincipal.jHoraSistema;
import static gestor.Visao.TelaModuloServicoSocial.telaPlanejamentoAtividadesManu_SS;
import static gestor.Visao.TelaModuloPedagogia.telaPlanejamentoAtividadesManu_PEDA;
import static gestor.Visao.TelaModuloPsicologia.telaPlanejamentoAtividadesManu_PS;
import static gestor.Visao.TelaModuloTerapiaOcupacional.telaPlanejamentoAtividadesManu_TO;
import static gestor.Visao.TelaModuloEnfermaria.telaPlanejamentoAtividadesManu_EN;
import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ronal
 */
public class TelaAtividadesEducacaoFisica extends javax.swing.JInternalFrame {

    ConexaoBancoDados conecta = new ConexaoBancoDados();
    PlanejamentoAtividades objPlan = new PlanejamentoAtividades();
    ControlePlanejamentoAtividades control = new ControlePlanejamentoAtividades();
    PesquisaPlanejamentoCodigo listaCodigo = new PesquisaPlanejamentoCodigo();
    ControleListaAcessosPlanejamentoAtividadesGrupo pPESQUISAR_acessos = new ControleListaAcessosPlanejamentoAtividadesGrupo();
    CamposAcessos objCampos = new CamposAcessos();
    ControleLogSistema controlLog = new ControleLogSistema();
    LogSistema objLogSys = new LogSistema();
    //
    String nomeModuloTela = "Educação Física:Planejamento de Grupo";
    int flag;
    int acao = 0;
    String statusMov;
    String horaMov;
    String dataModFinal;

    /**
     * Creates new form TelaAtividadesEducacaoFisica
     */
    public TelaAtividadesEducacaoFisica() {
        initComponents();
        corCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jCodigoPesquisa = new javax.swing.JTextField();
        jCheckBoxTodos = new javax.swing.JCheckBox();
        jBtPesquisarCodigo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabelaAtividades = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jCodigo = new javax.swing.JTextField();
        jComboBoxSigla = new javax.swing.JComboBox<>();
        jComboBoxDescricaoPlanejamento = new javax.swing.JComboBox<>();
        jComboBoxDepartamento = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jBtNovo = new javax.swing.JButton();
        jBtAlterar = new javax.swing.JButton();
        jBtExcluir = new javax.swing.JButton();
        jBtSalvar = new javax.swing.JButton();
        jBtCancelar = new javax.swing.JButton();
        jBtSair = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("...::: Planejamento Atividades :::...");

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true)));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Código");

        jCodigoPesquisa.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jCodigoPesquisa.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jCheckBoxTodos.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBoxTodos.setText("Todos");
        jCheckBoxTodos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxTodosItemStateChanged(evt);
            }
        });

        jBtPesquisarCodigo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtPesquisarCodigo.setToolTipText("Pesquisar pelo código");
        jBtPesquisarCodigo.setContentAreaFilled(false);
        jBtPesquisarCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtPesquisarCodigoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCodigoPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtPesquisarCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 161, Short.MAX_VALUE)
                .addComponent(jCheckBoxTodos)
                .addGap(14, 14, 14))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jBtPesquisarCodigo)
                    .addComponent(jCodigoPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jCheckBoxTodos))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabelaAtividades.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jTabelaAtividades.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Descrição Atividade", "Sigla", "Departamento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTabelaAtividades.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabelaAtividadesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTabelaAtividades);
        if (jTabelaAtividades.getColumnModel().getColumnCount() > 0) {
            jTabelaAtividades.getColumnModel().getColumn(0).setMinWidth(70);
            jTabelaAtividades.getColumnModel().getColumn(0).setMaxWidth(70);
            jTabelaAtividades.getColumnModel().getColumn(1).setMinWidth(200);
            jTabelaAtividades.getColumnModel().getColumn(1).setMaxWidth(200);
            jTabelaAtividades.getColumnModel().getColumn(2).setMinWidth(60);
            jTabelaAtividades.getColumnModel().getColumn(2).setMaxWidth(60);
            jTabelaAtividades.getColumnModel().getColumn(3).setMinWidth(150);
            jTabelaAtividades.getColumnModel().getColumn(3).setMaxWidth(150);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Listagem", jPanel1);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Código");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Sigla");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Descriçao da Atividade");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Departamento");

        jCodigo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jCodigo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jCodigo.setEnabled(false);

        jComboBoxSigla.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBoxSigla.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione...", " " }));
        jComboBoxSigla.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jComboBoxSigla.setEnabled(false);

        jComboBoxDescricaoPlanejamento.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBoxDescricaoPlanejamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione...", "Futebol", "Basquete", "Volêi", "Ginástica", "Pilates", "Judô", "Caratê", "Capoeira", "Palestras", "Leituras", "Vacinas", "Oficinas", "Roda de Conversa", "Projetos", "Vermectina", "Exames do ENEN", "Exame de Vestibular", "Exames Diversos", "Cursos Diversos", "Outros", "Jogo Dominó", "Jogo Dama", "Jogo Baralho", "Jogos Diversos", " ", " ", " " }));
        jComboBoxDescricaoPlanejamento.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jComboBoxDescricaoPlanejamento.setEnabled(false);

        jComboBoxDepartamento.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBoxDepartamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione...", "Enfermaria", "Serviço Social", "Psicologia", "Terapia Ocupacional", "Pedagogia", "Educação Física" }));
        jComboBoxDepartamento.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jComboBoxDepartamento.setEnabled(false);
        jComboBoxDepartamento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxDepartamentoItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBoxSigla, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jComboBoxDescricaoPlanejamento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxDepartamento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSigla, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxDescricaoPlanejamento, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true)));

        jBtNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/page_add.png"))); // NOI18N
        jBtNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtNovoActionPerformed(evt);
            }
        });

        jBtAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/8437_16x16.png"))); // NOI18N
        jBtAlterar.setEnabled(false);
        jBtAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtAlterarActionPerformed(evt);
            }
        });

        jBtExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/191216104515_16.png"))); // NOI18N
        jBtExcluir.setEnabled(false);
        jBtExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtExcluirActionPerformed(evt);
            }
        });

        jBtSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/1294_16x16.png"))); // NOI18N
        jBtSalvar.setEnabled(false);
        jBtSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtSalvarActionPerformed(evt);
            }
        });

        jBtCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Button_Close_Icon_16.png"))); // NOI18N
        jBtCancelar.setEnabled(false);
        jBtCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtCancelarActionPerformed(evt);
            }
        });

        jBtSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Log_Out_Icon_16.png"))); // NOI18N
        jBtSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtSairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBtNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jBtAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jBtExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jBtSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jBtCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(jBtSair, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBtAlterar, jBtCancelar, jBtExcluir, jBtNovo, jBtSair, jBtSalvar});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtAlterar)
                    .addComponent(jBtExcluir)
                    .addComponent(jBtSalvar)
                    .addComponent(jBtNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtCancelar)
                    .addComponent(jBtSair))
                .addGap(3, 3, 3))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jBtAlterar, jBtCancelar, jBtExcluir, jBtNovo, jBtSair, jBtSalvar});

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Manutenção", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, Short.MAX_VALUE)
                .addContainerGap())
        );

        setBounds(300, 60, 419, 267);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtPesquisarCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtPesquisarCodigoActionPerformed
        // TODO add your handling code here:
        if (jCodigoPesquisa.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Informe o código para pesquisa.");
        } else {
            // APAGAR DADOS DA TABELA
            while (jTabelaAtividades.getModel().getRowCount() > 0) {
                ((DefaultTableModel) jTabelaAtividades.getModel()).removeRow(0);
            }
            mostrarRegistroCodigo();
        }
    }//GEN-LAST:event_jBtPesquisarCodigoActionPerformed

    private void jCheckBoxTodosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxTodosItemStateChanged
        // TODO add your handling code here:
        flag = 1;
        if (evt.getStateChange() == evt.SELECTED) {
            mostrarTodos();
        } else {
            // APAGAR DADOS DA TABELA
            while (jTabelaAtividades.getModel().getRowCount() > 0) {
                ((DefaultTableModel) jTabelaAtividades.getModel()).removeRow(0);
            }
        }
    }//GEN-LAST:event_jCheckBoxTodosItemStateChanged

    private void jTabelaAtividadesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabelaAtividadesMouseClicked
        // TODO add your handling code here:
        flag = 1;
        if (flag == 1) {
            String IdLanc = "" + jTabelaAtividades.getValueAt(jTabelaAtividades.getSelectedRow(), 0);
            jCodigoPesquisa.setText(IdLanc);
            bloquearCampos();
            bloquearBotoes();
            jBtNovo.setEnabled(true);
            jBtAlterar.setEnabled(true);
            jBtExcluir.setEnabled(true);
            //
            jComboBoxSigla.removeAllItems();
            jComboBoxDescricaoPlanejamento.removeAllItems();
            try {
                for (PlanejamentoAtividades dd : listaCodigo.read()) {
                    jCodigo.setText(String.valueOf(dd.getCodigo()));
                    jComboBoxSigla.addItem((String) dd.getSigla());
                    jComboBoxDescricaoPlanejamento.addItem((String) dd.getDescricaoPlanejamento());
                    jComboBoxDepartamento.setSelectedItem((String) dd.getDepartamento());
                }
            } catch (Exception ex) {
                Logger.getLogger(TelaAtividadesEducacaoFisica.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jTabelaAtividadesMouseClicked

    private void jBtNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtNovoActionPerformed
        // TODO add your handling code here:
        objCampos.setNomeUsuario(nameUser);
        objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_EF);
        pPESQUISAR_acessos.pesquisarUsuario(objCampos);
        pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
        pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_EF) && objCampos.getCodigoIncluir() == 1) {
            acao = 1;
            limparCampos();
            bloquearBotoes();
            Novo();
            statusMov = "Incluiu";
            horaMov = jHoraSistema.getText();
        } else {
            objCampos.setNomeUsuario(nameUser);
            objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_SS);
            pPESQUISAR_acessos.pesquisarUsuario(objCampos);
            pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
            pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
            if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_SS) && objCampos.getCodigoIncluir() == 1) {
                acao = 1;
                limparCampos();
                bloquearBotoes();
                Novo();
                statusMov = "Incluiu";
                horaMov = jHoraSistema.getText();
            } else {
                objCampos.setNomeUsuario(nameUser);
                objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_PEDA);
                pPESQUISAR_acessos.pesquisarUsuario(objCampos);
                pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
                pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
                if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_PEDA) && objCampos.getCodigoIncluir() == 1) {
                    acao = 1;
                    limparCampos();
                    bloquearBotoes();
                    Novo();
                    statusMov = "Incluiu";
                    horaMov = jHoraSistema.getText();
                } else {
                    objCampos.setNomeUsuario(nameUser);
                    objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_TO);
                    pPESQUISAR_acessos.pesquisarUsuario(objCampos);
                    pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
                    pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
                    if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_TO) && objCampos.getCodigoIncluir() == 1) {
                        acao = 1;
                        limparCampos();
                        bloquearBotoes();
                        Novo();
                        statusMov = "Incluiu";
                        horaMov = jHoraSistema.getText();
                    } else {
                        objCampos.setNomeUsuario(nameUser);
                        objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_PS);
                        pPESQUISAR_acessos.pesquisarUsuario(objCampos);
                        pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
                        pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
                        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_PS) && objCampos.getCodigoIncluir() == 1) {
                            acao = 1;
                            limparCampos();
                            bloquearBotoes();
                            Novo();
                            statusMov = "Incluiu";
                            horaMov = jHoraSistema.getText();
                        } else {
                            objCampos.setNomeUsuario(nameUser);
                            objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_EN);
                            pPESQUISAR_acessos.pesquisarUsuario(objCampos);
                            pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
                            pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
                            if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_EN) && objCampos.getCodigoIncluir() == 1) {
                                acao = 1;
                                limparCampos();
                                bloquearBotoes();
                                Novo();
                                statusMov = "Incluiu";
                                horaMov = jHoraSistema.getText();
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "Usuário não tem acesso ao registro.");
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jBtNovoActionPerformed

    private void jBtAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtAlterarActionPerformed
        // TODO add your handling code here:
        objCampos.setNomeUsuario(nameUser);
        objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_EF);
        pPESQUISAR_acessos.pesquisarUsuario(objCampos);
        pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
        pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_EF) && objCampos.getCodigoAlterar() == 1) {
            acao = 2;
            bloquearBotoes();
            Alterar();
            statusMov = "Alterou";
            horaMov = jHoraSistema.getText();
            dataModFinal = jDataSistema.getText();
        } else {
            objCampos.setNomeUsuario(nameUser);
            objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_SS);
            pPESQUISAR_acessos.pesquisarUsuario(objCampos);
            pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
            pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
            if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_SS) && objCampos.getCodigoAlterar() == 1) {
                acao = 2;
                bloquearBotoes();
                Alterar();
                statusMov = "Alterou";
                horaMov = jHoraSistema.getText();
                dataModFinal = jDataSistema.getText();
            } else {
                objCampos.setNomeUsuario(nameUser);
                objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_PEDA);
                pPESQUISAR_acessos.pesquisarUsuario(objCampos);
                pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
                pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
                if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_PEDA) && objCampos.getCodigoAlterar() == 1) {
                    acao = 2;
                    bloquearBotoes();
                    Alterar();
                    statusMov = "Alterou";
                    horaMov = jHoraSistema.getText();
                    dataModFinal = jDataSistema.getText();
                } else {
                    objCampos.setNomeUsuario(nameUser);
                    objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_TO);
                    pPESQUISAR_acessos.pesquisarUsuario(objCampos);
                    pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
                    pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
                    if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_TO) && objCampos.getCodigoAlterar() == 1) {
                        acao = 2;
                        bloquearBotoes();
                        Alterar();
                        statusMov = "Alterou";
                        horaMov = jHoraSistema.getText();
                        dataModFinal = jDataSistema.getText();
                    } else {
                        objCampos.setNomeUsuario(nameUser);
                        objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_PS);
                        pPESQUISAR_acessos.pesquisarUsuario(objCampos);
                        pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
                        pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
                        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_PS) && objCampos.getCodigoAlterar() == 1) {
                            acao = 2;
                            bloquearBotoes();
                            Alterar();
                            statusMov = "Alterou";
                            horaMov = jHoraSistema.getText();
                            dataModFinal = jDataSistema.getText();
                        } else {
                            objCampos.setNomeUsuario(nameUser);
                            objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_EN);
                            pPESQUISAR_acessos.pesquisarUsuario(objCampos);
                            pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
                            pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
                            if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_EN) && objCampos.getCodigoAlterar() == 1) {
                                acao = 2;
                                bloquearBotoes();
                                Alterar();
                                statusMov = "Alterou";
                                horaMov = jHoraSistema.getText();
                                dataModFinal = jDataSistema.getText();
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "Usuário não tem acesso ao registro.");
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jBtAlterarActionPerformed

    private void jBtExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtExcluirActionPerformed
        // TODO add your handling code here:
        objCampos.setNomeUsuario(nameUser);
        objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_EF);
        pPESQUISAR_acessos.pesquisarUsuario(objCampos);
        pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
        pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_EF) && objCampos.getCodigoExcluir() == 1) {
            int resposta = JOptionPane.showConfirmDialog(this, "Deseja realmente excluir o registro selecionado?", "Confirmação",
                    JOptionPane.YES_NO_OPTION);
            if (resposta == JOptionPane.YES_OPTION) {
                statusMov = "Excluiu";
                horaMov = jHoraSistema.getText();
                dataModFinal = jDataSistema.getText();
                objPlan.setCodigo(Integer.valueOf(jCodigo.getText()));
                control.excluirPlanejamento(objPlan);
                objLog();
                controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                bloquearBotoes();
                bloquearCampos();
                limparCampos();
                Excluir();
                JOptionPane.showMessageDialog(rootPane, "Registro excluído com sucesso.");
            }
        } else {
            objCampos.setNomeUsuario(nameUser);
            objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_SS);
            pPESQUISAR_acessos.pesquisarUsuario(objCampos);
            pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
            pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
            if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_SS) && objCampos.getCodigoExcluir() == 1) {
                int resposta = JOptionPane.showConfirmDialog(this, "Deseja realmente excluir o registro selecionado?", "Confirmação",
                        JOptionPane.YES_NO_OPTION);
                if (resposta == JOptionPane.YES_OPTION) {
                    statusMov = "Excluiu";
                    horaMov = jHoraSistema.getText();
                    dataModFinal = jDataSistema.getText();
                    objPlan.setCodigo(Integer.valueOf(jCodigo.getText()));
                    control.excluirPlanejamento(objPlan);
                    objLog();
                    controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                    bloquearBotoes();
                    bloquearCampos();
                    limparCampos();
                    Excluir();
                    JOptionPane.showMessageDialog(rootPane, "Registro excluído com sucesso.");
                }
            } else {
                objCampos.setNomeUsuario(nameUser);
                objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_PEDA);
                pPESQUISAR_acessos.pesquisarUsuario(objCampos);
                pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
                pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
                if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_PEDA) && objCampos.getCodigoExcluir() == 1) {
                    int resposta = JOptionPane.showConfirmDialog(this, "Deseja realmente excluir o registro selecionado?", "Confirmação",
                            JOptionPane.YES_NO_OPTION);
                    if (resposta == JOptionPane.YES_OPTION) {
                        statusMov = "Excluiu";
                        horaMov = jHoraSistema.getText();
                        dataModFinal = jDataSistema.getText();
                        objPlan.setCodigo(Integer.valueOf(jCodigo.getText()));
                        control.excluirPlanejamento(objPlan);
                        objLog();
                        controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                        bloquearBotoes();
                        bloquearCampos();
                        limparCampos();
                        Excluir();
                        JOptionPane.showMessageDialog(rootPane, "Registro excluído com sucesso.");
                    }
                } else {
                    objCampos.setNomeUsuario(nameUser);
                    objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_TO);
                    pPESQUISAR_acessos.pesquisarUsuario(objCampos);
                    pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
                    pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
                    if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_TO) && objCampos.getCodigoExcluir() == 1) {
                        int resposta = JOptionPane.showConfirmDialog(this, "Deseja realmente excluir o registro selecionado?", "Confirmação",
                                JOptionPane.YES_NO_OPTION);
                        if (resposta == JOptionPane.YES_OPTION) {
                            statusMov = "Excluiu";
                            horaMov = jHoraSistema.getText();
                            dataModFinal = jDataSistema.getText();
                            objPlan.setCodigo(Integer.valueOf(jCodigo.getText()));
                            control.excluirPlanejamento(objPlan);
                            objLog();
                            controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                            bloquearBotoes();
                            bloquearCampos();
                            limparCampos();
                            Excluir();
                            JOptionPane.showMessageDialog(rootPane, "Registro excluído com sucesso.");
                        }
                    } else {
                        objCampos.setNomeUsuario(nameUser);
                        objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_PS);
                        pPESQUISAR_acessos.pesquisarUsuario(objCampos);
                        pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
                        pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
                        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_PS) && objCampos.getCodigoExcluir() == 1) {
                            int resposta = JOptionPane.showConfirmDialog(this, "Deseja realmente excluir o registro selecionado?", "Confirmação",
                                    JOptionPane.YES_NO_OPTION);
                            if (resposta == JOptionPane.YES_OPTION) {
                                statusMov = "Excluiu";
                                horaMov = jHoraSistema.getText();
                                dataModFinal = jDataSistema.getText();
                                objPlan.setCodigo(Integer.valueOf(jCodigo.getText()));
                                control.excluirPlanejamento(objPlan);
                                objLog();
                                controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                                bloquearBotoes();
                                bloquearCampos();
                                limparCampos();
                                Excluir();
                                JOptionPane.showMessageDialog(rootPane, "Registro excluído com sucesso.");
                            }
                        } else {
                            objCampos.setNomeUsuario(nameUser);
                            objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_EN);
                            pPESQUISAR_acessos.pesquisarUsuario(objCampos);
                            pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
                            pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
                            if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_EN) && objCampos.getCodigoExcluir() == 1) {
                                int resposta = JOptionPane.showConfirmDialog(this, "Deseja realmente excluir o registro selecionado?", "Confirmação",
                                        JOptionPane.YES_NO_OPTION);
                                if (resposta == JOptionPane.YES_OPTION) {
                                    statusMov = "Excluiu";
                                    horaMov = jHoraSistema.getText();
                                    dataModFinal = jDataSistema.getText();
                                    objPlan.setCodigo(Integer.valueOf(jCodigo.getText()));
                                    control.excluirPlanejamento(objPlan);
                                    objLog();
                                    controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                                    bloquearBotoes();
                                    bloquearCampos();
                                    limparCampos();
                                    Excluir();
                                    JOptionPane.showMessageDialog(rootPane, "Registro excluído com sucesso.");
                                }
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "Usuário não tem acesso ao registro.");
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jBtExcluirActionPerformed

    private void jBtSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtSalvarActionPerformed
        // TODO add your handling code here:
        objCampos.setNomeUsuario(nameUser);
        objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_EF);
        pPESQUISAR_acessos.pesquisarUsuario(objCampos);
        pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
        pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_EF) && objCampos.getCodigoGravar() == 1) {
            if (jComboBoxSigla.getSelectedItem() == null) {
                JOptionPane.showMessageDialog(rootPane, "Informe a sigla");
            } else if (jComboBoxSigla.getSelectedItem().equals("Selecione...")) {
                JOptionPane.showMessageDialog(rootPane, "Informe a sigla");
            } else if (jComboBoxDescricaoPlanejamento.getSelectedItem() == null) {
                JOptionPane.showMessageDialog(rootPane, "Informe a descrição do planejamento.");
            } else if (jComboBoxDescricaoPlanejamento.getSelectedItem().equals("Selecione...")) {
                JOptionPane.showMessageDialog(rootPane, "Informe a descrição do planejamento.");
            } else if (jComboBoxDepartamento.getSelectedItem() == null) {
                JOptionPane.showMessageDialog(rootPane, "Informe o departamento.");
            } else if (jComboBoxDepartamento.getSelectedItem().equals("Selecione...")) {
                JOptionPane.showMessageDialog(rootPane, "Informe o departamento.");
            } else {
                objPlan.setSigla((String) jComboBoxSigla.getSelectedItem());
                objPlan.setDescricaoPlanejamento((String) jComboBoxDescricaoPlanejamento.getSelectedItem());
                objPlan.setDepartamento((String) jComboBoxDepartamento.getSelectedItem());
                if (acao == 1) {
                    control.incluirPlanejamento(objPlan);
                    buscarCodigo();
                    objLog();
                    controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                    bloquearBotoes();
                    bloquearCampos();
                    Salvar();
                    JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
                }
                if (acao == 2) {
                    objPlan.setCodigo(Integer.valueOf(jCodigo.getText()));
                    control.alterarPlanejamento(objPlan);
                    objLog();
                    controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                    bloquearBotoes();
                    bloquearCampos();
                    Salvar();
                    JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
                }
            }
        } else {
            objCampos.setNomeUsuario(nameUser);
            objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_SS);
            pPESQUISAR_acessos.pesquisarUsuario(objCampos);
            pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
            pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
            if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_SS) && objCampos.getCodigoGravar() == 1) {
                if (jComboBoxSigla.getSelectedItem() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a sigla");
                } else if (jComboBoxSigla.getSelectedItem().equals("Selecione...")) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a sigla");
                } else if (jComboBoxDescricaoPlanejamento.getSelectedItem() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a descrição do planejamento.");
                } else if (jComboBoxDescricaoPlanejamento.getSelectedItem().equals("Selecione...")) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a descrição do planejamento.");
                } else if (jComboBoxDepartamento.getSelectedItem() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe o departamento.");
                } else if (jComboBoxDepartamento.getSelectedItem().equals("Selecione...")) {
                    JOptionPane.showMessageDialog(rootPane, "Informe o departamento.");
                } else {
                    objPlan.setSigla((String) jComboBoxSigla.getSelectedItem());
                    objPlan.setDescricaoPlanejamento((String) jComboBoxDescricaoPlanejamento.getSelectedItem());
                    objPlan.setDepartamento((String) jComboBoxDepartamento.getSelectedItem());
                    if (acao == 1) {
                        control.incluirPlanejamento(objPlan);
                        buscarCodigo();
                        objLog();
                        controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                        bloquearBotoes();
                        bloquearCampos();
                        Salvar();
                        JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
                    }
                    if (acao == 2) {
                        objPlan.setCodigo(Integer.valueOf(jCodigo.getText()));
                        control.alterarPlanejamento(objPlan);
                        objLog();
                        controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                        bloquearBotoes();
                        bloquearCampos();
                        Salvar();
                        JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
                    }
                }
            } else {
                objCampos.setNomeUsuario(nameUser);
                objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_PEDA);
                pPESQUISAR_acessos.pesquisarUsuario(objCampos);
                pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
                pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
                if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_PEDA) && objCampos.getCodigoGravar() == 1) {
                    if (jComboBoxSigla.getSelectedItem() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a sigla");
                    } else if (jComboBoxSigla.getSelectedItem().equals("Selecione...")) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a sigla");
                    } else if (jComboBoxDescricaoPlanejamento.getSelectedItem() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a descrição do planejamento.");
                    } else if (jComboBoxDescricaoPlanejamento.getSelectedItem().equals("Selecione...")) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a descrição do planejamento.");
                    } else if (jComboBoxDepartamento.getSelectedItem() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe o departamento.");
                    } else if (jComboBoxDepartamento.getSelectedItem().equals("Selecione...")) {
                        JOptionPane.showMessageDialog(rootPane, "Informe o departamento.");
                    } else {
                        objPlan.setSigla((String) jComboBoxSigla.getSelectedItem());
                        objPlan.setDescricaoPlanejamento((String) jComboBoxDescricaoPlanejamento.getSelectedItem());
                        objPlan.setDepartamento((String) jComboBoxDepartamento.getSelectedItem());
                        if (acao == 1) {
                            control.incluirPlanejamento(objPlan);
                            buscarCodigo();
                            objLog();
                            controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                            bloquearBotoes();
                            bloquearCampos();
                            Salvar();
                            JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
                        }
                        if (acao == 2) {
                            objPlan.setCodigo(Integer.valueOf(jCodigo.getText()));
                            control.alterarPlanejamento(objPlan);
                            objLog();
                            controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                            bloquearBotoes();
                            bloquearCampos();
                            Salvar();
                            JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
                        }
                    }
                } else {
                    objCampos.setNomeUsuario(nameUser);
                    objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_TO);
                    pPESQUISAR_acessos.pesquisarUsuario(objCampos);
                    pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
                    pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
                    if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_TO) && objCampos.getCodigoGravar() == 1) {
                        if (jComboBoxSigla.getSelectedItem() == null) {
                            JOptionPane.showMessageDialog(rootPane, "Informe a sigla");
                        } else if (jComboBoxSigla.getSelectedItem().equals("Selecione...")) {
                            JOptionPane.showMessageDialog(rootPane, "Informe a sigla");
                        } else if (jComboBoxDescricaoPlanejamento.getSelectedItem() == null) {
                            JOptionPane.showMessageDialog(rootPane, "Informe a descrição do planejamento.");
                        } else if (jComboBoxDescricaoPlanejamento.getSelectedItem().equals("Selecione...")) {
                            JOptionPane.showMessageDialog(rootPane, "Informe a descrição do planejamento.");
                        } else if (jComboBoxDepartamento.getSelectedItem() == null) {
                            JOptionPane.showMessageDialog(rootPane, "Informe o departamento.");
                        } else if (jComboBoxDepartamento.getSelectedItem().equals("Selecione...")) {
                            JOptionPane.showMessageDialog(rootPane, "Informe o departamento.");
                        } else {
                            objPlan.setSigla((String) jComboBoxSigla.getSelectedItem());
                            objPlan.setDescricaoPlanejamento((String) jComboBoxDescricaoPlanejamento.getSelectedItem());
                            objPlan.setDepartamento((String) jComboBoxDepartamento.getSelectedItem());
                            if (acao == 1) {
                                control.incluirPlanejamento(objPlan);
                                buscarCodigo();
                                objLog();
                                controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                                bloquearBotoes();
                                bloquearCampos();
                                Salvar();
                                JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
                            }
                            if (acao == 2) {
                                objPlan.setCodigo(Integer.valueOf(jCodigo.getText()));
                                control.alterarPlanejamento(objPlan);
                                objLog();
                                controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                                bloquearBotoes();
                                bloquearCampos();
                                Salvar();
                                JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
                            }
                        }
                    } else {
                        objCampos.setNomeUsuario(nameUser);
                        objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_PS);
                        pPESQUISAR_acessos.pesquisarUsuario(objCampos);
                        pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
                        pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
                        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_PS) && objCampos.getCodigoGravar() == 1) {
                            if (jComboBoxSigla.getSelectedItem() == null) {
                                JOptionPane.showMessageDialog(rootPane, "Informe a sigla");
                            } else if (jComboBoxSigla.getSelectedItem().equals("Selecione...")) {
                                JOptionPane.showMessageDialog(rootPane, "Informe a sigla");
                            } else if (jComboBoxDescricaoPlanejamento.getSelectedItem() == null) {
                                JOptionPane.showMessageDialog(rootPane, "Informe a descrição do planejamento.");
                            } else if (jComboBoxDescricaoPlanejamento.getSelectedItem().equals("Selecione...")) {
                                JOptionPane.showMessageDialog(rootPane, "Informe a descrição do planejamento.");
                            } else if (jComboBoxDepartamento.getSelectedItem() == null) {
                                JOptionPane.showMessageDialog(rootPane, "Informe o departamento.");
                            } else if (jComboBoxDepartamento.getSelectedItem().equals("Selecione...")) {
                                JOptionPane.showMessageDialog(rootPane, "Informe o departamento.");
                            } else {
                                objPlan.setSigla((String) jComboBoxSigla.getSelectedItem());
                                objPlan.setDescricaoPlanejamento((String) jComboBoxDescricaoPlanejamento.getSelectedItem());
                                objPlan.setDepartamento((String) jComboBoxDepartamento.getSelectedItem());
                                if (acao == 1) {
                                    control.incluirPlanejamento(objPlan);
                                    buscarCodigo();
                                    objLog();
                                    controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                                    bloquearBotoes();
                                    bloquearCampos();
                                    Salvar();
                                    JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
                                }
                                if (acao == 2) {
                                    objPlan.setCodigo(Integer.valueOf(jCodigo.getText()));
                                    control.alterarPlanejamento(objPlan);
                                    objLog();
                                    controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                                    bloquearBotoes();
                                    bloquearCampos();
                                    Salvar();
                                    JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
                                }
                            }
                        } else {
                            objCampos.setNomeUsuario(nameUser);
                            objCampos.setNomeTelaAcesso(telaPlanejamentoAtividadesManu_EN);
                            pPESQUISAR_acessos.pesquisarUsuario(objCampos);
                            pPESQUISAR_acessos.pesquisarGrupoUsuario(objCampos);
                            pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
                            if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getNomeGrupo().equals("ADMINISTRADORES") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaPlanejamentoAtividadesManu_EN) && objCampos.getCodigoGravar() == 1) {
                                if (jComboBoxSigla.getSelectedItem() == null) {
                                    JOptionPane.showMessageDialog(rootPane, "Informe a sigla");
                                } else if (jComboBoxSigla.getSelectedItem().equals("Selecione...")) {
                                    JOptionPane.showMessageDialog(rootPane, "Informe a sigla");
                                } else if (jComboBoxDescricaoPlanejamento.getSelectedItem() == null) {
                                    JOptionPane.showMessageDialog(rootPane, "Informe a descrição do planejamento.");
                                } else if (jComboBoxDescricaoPlanejamento.getSelectedItem().equals("Selecione...")) {
                                    JOptionPane.showMessageDialog(rootPane, "Informe a descrição do planejamento.");
                                } else if (jComboBoxDepartamento.getSelectedItem() == null) {
                                    JOptionPane.showMessageDialog(rootPane, "Informe o departamento.");
                                } else if (jComboBoxDepartamento.getSelectedItem().equals("Selecione...")) {
                                    JOptionPane.showMessageDialog(rootPane, "Informe o departamento.");
                                } else {
                                    objPlan.setSigla((String) jComboBoxSigla.getSelectedItem());
                                    objPlan.setDescricaoPlanejamento((String) jComboBoxDescricaoPlanejamento.getSelectedItem());
                                    objPlan.setDepartamento((String) jComboBoxDepartamento.getSelectedItem());
                                    if (acao == 1) {
                                        control.incluirPlanejamento(objPlan);
                                        buscarCodigo();
                                        objLog();
                                        controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                                        bloquearBotoes();
                                        bloquearCampos();
                                        Salvar();
                                        JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
                                    }
                                    if (acao == 2) {
                                        objPlan.setCodigo(Integer.valueOf(jCodigo.getText()));
                                        control.alterarPlanejamento(objPlan);
                                        objLog();
                                        controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                                        bloquearBotoes();
                                        bloquearCampos();
                                        Salvar();
                                        JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
                                    }
                                }
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "Usuário não tem acesso ao registro.");
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jBtSalvarActionPerformed

    private void jBtCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtCancelarActionPerformed
        // TODO add your handling code here:
        Cancelar();
    }//GEN-LAST:event_jBtCancelarActionPerformed

    private void jBtSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtSairActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jBtSairActionPerformed

    private void jComboBoxDepartamentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxDepartamentoItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == evt.SELECTED) {
            pDEPARTAMENTO_modulo();
        }
    }//GEN-LAST:event_jComboBoxDepartamentoItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtAlterar;
    private javax.swing.JButton jBtCancelar;
    private javax.swing.JButton jBtExcluir;
    private javax.swing.JButton jBtNovo;
    private javax.swing.JButton jBtPesquisarCodigo;
    private javax.swing.JButton jBtSair;
    private javax.swing.JButton jBtSalvar;
    private javax.swing.JCheckBox jCheckBoxTodos;
    private javax.swing.JTextField jCodigo;
    public static javax.swing.JTextField jCodigoPesquisa;
    private javax.swing.JComboBox<String> jComboBoxDepartamento;
    private javax.swing.JComboBox<String> jComboBoxDescricaoPlanejamento;
    private javax.swing.JComboBox<String> jComboBoxSigla;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTabelaAtividades;
    // End of variables declaration//GEN-END:variables

    public void corCampos() {
        jCodigo.setBackground(Color.white);
        jComboBoxSigla.setBackground(Color.white);
        jComboBoxDescricaoPlanejamento.setBackground(Color.white);
        jComboBoxDepartamento.setBackground(Color.white);
    }

    public void limparCampos() {
        jCodigo.setText("");
        jComboBoxSigla.setSelectedItem("Selecione...");
        jComboBoxDescricaoPlanejamento.setSelectedItem("Selecione...");
        jComboBoxDepartamento.setSelectedItem("Selecione...");
    }

    public void bloquearBotoes() {
        jBtNovo.setEnabled(!true);
        jBtAlterar.setEnabled(!true);
        jBtExcluir.setEnabled(!true);
        jBtSalvar.setEnabled(!true);
        jBtCancelar.setEnabled(!true);
    }

    public void bloquearCampos() {
        jComboBoxSigla.setEnabled(!true);
        jComboBoxDescricaoPlanejamento.setEnabled(!true);
        jComboBoxDepartamento.setEnabled(!true);
    }

    public void pDEPARTAMENTO_modulo() {
        jComboBoxSigla.removeAllItems();
        if (jComboBoxDepartamento.getSelectedItem().equals("Educação Física")) {
            jComboBoxSigla.addItem("EF");
        } else if (jComboBoxDepartamento.getSelectedItem().equals("Serviço Social")) {
            jComboBoxSigla.addItem("SS");
        } else if (jComboBoxDepartamento.getSelectedItem().equals("Enfermaria")) {
            jComboBoxSigla.addItem("EN");
        } else if (jComboBoxDepartamento.getSelectedItem().equals("Psicologia")) {
            jComboBoxSigla.addItem("PS");
        } else if (jComboBoxDepartamento.getSelectedItem().equals("Pedagogia")) {
            jComboBoxSigla.addItem("PE");
        } else if (jComboBoxDepartamento.getSelectedItem().equals("Terapia Ocupacional")) {
            jComboBoxSigla.addItem("TO");
        }
    }

    public void Novo() {
        jComboBoxSigla.setEnabled(!true);
        jComboBoxDescricaoPlanejamento.setEnabled(true);
        jComboBoxDepartamento.setEnabled(true);
        jBtSalvar.setEnabled(true);
        jBtCancelar.setEnabled(true);
    }

    public void Alterar() {
        jComboBoxSigla.setEnabled(!true);
        jComboBoxDescricaoPlanejamento.setEnabled(true);
        jComboBoxDepartamento.setEnabled(true);
        //
        jBtSalvar.setEnabled(true);
        jBtCancelar.setEnabled(true);
    }

    public void Excluir() {
        jBtNovo.setEnabled(true);
    }

    public void Salvar() {
        jBtNovo.setEnabled(true);
        jBtAlterar.setEnabled(true);
        jBtExcluir.setEnabled(true);
    }

    public void Cancelar() {
        if (jCodigo.getText().equals("")) {
            limparCampos();
            bloquearBotoes();
            bloquearCampos();
            jBtNovo.setEnabled(true);
            jBtAlterar.setEnabled(true);
            jBtExcluir.setEnabled(true);
        } else {
            bloquearBotoes();
            bloquearCampos();
            jBtNovo.setEnabled(true);
        }
    }

    public void buscarCodigo() {
        conecta.abrirConexao();
        try {
            conecta.executaSQL("SELECT * FROM PLANEJAMENTO_ATIVIDADES_GRUPO");
            conecta.rs.last();
            jCodigo.setText(conecta.rs.getString("IdPlan"));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Não foi possível obter código do registro.");
        }
        conecta.desconecta();
    }

    public void mostrarTodos() {
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaAtividades.getModel();
        PlanejamentoAtividades d = new PlanejamentoAtividades();
        try {
            for (PlanejamentoAtividades dd : control.read()) {
                dadosOrigem.addRow(new Object[]{dd.getCodigo(), dd.getDescricaoPlanejamento(), dd.getSigla(), dd.getDepartamento()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaAtividades.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                //
                jTabelaAtividades.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaAtividades.getColumnModel().getColumn(2).setCellRenderer(centralizado);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaAtividadesEducacaoFisica.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void mostrarRegistroCodigo() {
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaAtividades.getModel();
        PlanejamentoAtividades d = new PlanejamentoAtividades();
        try {
            for (PlanejamentoAtividades dd : listaCodigo.read()) {
                dadosOrigem.addRow(new Object[]{dd.getCodigo(), dd.getDescricaoPlanejamento(), dd.getSigla(), dd.getDepartamento()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaAtividades.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                //
                jTabelaAtividades.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaAtividades.getColumnModel().getColumn(2).setCellRenderer(centralizado);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaAtividadesEducacaoFisica.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void objLog() {
        objLogSys.setDataMov(dataModFinal);
        objLogSys.setHorarioMov(horaMov);
        objLogSys.setNomeModuloTela(nomeModuloTela);
        objLogSys.setIdLancMov(Integer.valueOf(jCodigo.getText()));
        objLogSys.setNomeUsuarioLogado(nameUser);
        objLogSys.setStatusMov(statusMov);
    }

    public void buscarAcessoUsuario(String nomeTelaAcesso) {
        conecta.abrirConexao();
        try {
            conecta.executaSQL("SELECT * FROM USUARIOS "
                    + "WHERE NomeUsuario='" + nameUser + "'");
            conecta.rs.first();
            codigoUserEF = conecta.rs.getInt("IdUsuario");
        } catch (Exception e) {
        }
        try {
            conecta.executaSQL("SELECT * FROM USUARIOS_GRUPOS "
                    + "INNER JOIN GRUPOUSUARIOS "
                    + "ON USUARIOS_GRUPOS.IdGrupo=GRUPOUSUARIOS.IdGrupo "
                    + "WHERE IdUsuario='" + codigoUserEF + "'");
            conecta.rs.first();
            codigoUserGroupEF = conecta.rs.getInt("IdUsuario");
            codigoGrupoEF = conecta.rs.getInt("IdGrupo");
            nomeGrupoEF = conecta.rs.getString("NomeGrupo");
        } catch (Exception e) {
        }
        try {
            conecta.executaSQL("SELECT * FROM TELAS_ACESSO "
                    + "WHERE IdUsuario='" + codigoUserEF + "' "
                    + "AND NomeTela='" + nomeTelaAcesso + "'");
            conecta.rs.first();
            codUserAcessoEF = conecta.rs.getInt("IdUsuario");
            codAbrirEF = conecta.rs.getInt("Abrir");
            codIncluirEF = conecta.rs.getInt("Incluir");
            codAlterarEF = conecta.rs.getInt("Alterar");
            codExcluirEF = conecta.rs.getInt("Excluir");
            codGravarEF = conecta.rs.getInt("Gravar");
            codConsultarEF = conecta.rs.getInt("Consultar");
            nomeTelaEF = conecta.rs.getString("NomeTela");
        } catch (Exception e) {
        }
        conecta.desconecta();
    }
}
