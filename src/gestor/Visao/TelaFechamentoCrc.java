/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestor.Visao;

import gestor.Controle.ControleLogSistema;
import gestor.Dao.ConexaoBancoDados;
import gestor.Modelo.EntradaLote;
import gestor.Modelo.LogSistema;
import gestor.Modelo.PrevisaoSaida;
import gestor.Modelo.RecapturaInternos;
import gestor.Modelo.RetornoEspontaneo;
import gestor.Modelo.RetornoInternos;
import gestor.Modelo.RetornoPorTransferencia;
import gestor.Modelo.SaidaInternos;
import gestor.Modelo.TransferenciaInternos;
import static gestor.Visao.TelaLoginSenha.nameUser;
import static gestor.Visao.TelaModuloPrincipal.jDataSistema;
import static gestor.Visao.TelaModuloPrincipal.jHoraSistema;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Ronaldo
 */
public class TelaFechamentoCrc extends javax.swing.JInternalFrame {

    ConexaoBancoDados conecta = new ConexaoBancoDados();
    EntradaLote objEntLote = new EntradaLote();
    SaidaInternos objSaida = new SaidaInternos();
    TransferenciaInternos objTransf = new TransferenciaInternos();
    RecapturaInternos objRecap = new RecapturaInternos(); // Recaptura
    RetornoInternos objRetorno = new RetornoInternos(); // Saida Temporaria 
    RetornoEspontaneo objRetEspontaneo = new RetornoEspontaneo(); // Retorno Espontaneo e Audiencia
    PrevisaoSaida objPrevSaida = new PrevisaoSaida(); // Previsão de Saida
    RetornoPorTransferencia objRetTrans = new RetornoPorTransferencia(); // Retorno por Transferencia
    ControleLogSistema controlLog = new ControleLogSistema();
    LogSistema objLogSys = new LogSistema();
    //
    String nomeModuloTela = "CRC:Utilitarios:Finalização de Movimentos";
    String statusMov;
    String horaMov;
    String dataModFinal;
    //
    String statusEnt = "ABERTO";
    String statusSai = "ABERTO";
    String statusTran = "ABERTO";
    String statusRet = "ABERTO";
    String statusRecap = "ABERTO";
    String statusFinaliza = "FINALIZADO";

    /**
     * Creates new form TelaFechamentoCrc
     */
    public TelaFechamentoCrc() {
        initComponents();
        setDefaultCloseOperation(JInternalFrame.DO_NOTHING_ON_CLOSE); //Impedir que a janela seja fechada pelo X  
        jProgressBar1.setVisible(!true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jBtConfirmar = new javax.swing.JButton();
        jBtSair = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        lblCarregando = new javax.swing.JLabel();

        setClosable(true);
        setTitle("...::: Finalização de Movimentação {CRC} :::...");

        jTabbedPane1.setForeground(new java.awt.Color(255, 0, 0));
        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("Antes de realizar esse procedimento,  é necessário que todos os");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 255));
        jLabel2.setText("usuários saiam do sistema.  Todos os lançamentos de entradas,");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 255));
        jLabel3.setText("saídas, Transferências e retornos de recaptura que estiver com");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 255));
        jLabel4.setText("status 'ABERTO', serão finalizados.");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addContainerGap())
        );

        jBtConfirmar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jBtConfirmar.setForeground(new java.awt.Color(0, 0, 255));
        jBtConfirmar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/accept.png"))); // NOI18N
        jBtConfirmar.setText("Confirmar");
        jBtConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtConfirmarActionPerformed(evt);
            }
        });

        jBtSair.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jBtSair.setForeground(new java.awt.Color(255, 0, 0));
        jBtSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Log_Out_Icon_16.png"))); // NOI18N
        jBtSair.setText("Sair");
        jBtSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtSairActionPerformed(evt);
            }
        });

        jProgressBar1.setForeground(new java.awt.Color(204, 51, 0));
        jProgressBar1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jProgressBar1.setStringPainted(true);

        lblCarregando.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblCarregando.setForeground(new java.awt.Color(0, 0, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jBtConfirmar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtSair)
                .addGap(99, 99, 99))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(lblCarregando, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBtConfirmar, jBtSair});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtConfirmar)
                    .addComponent(jBtSair))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCarregando, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jBtConfirmar, jBtSair});

        jTabbedPane1.addTab("Fechamento", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        setBounds(450, 100, 455, 243);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtConfirmarActionPerformed
        // TODO add your handling code here:          
        int resposta = JOptionPane.showConfirmDialog(this, "Deseja realmente realizar a finalização dos lançamentos?", "Confirmação",
                JOptionPane.YES_NO_OPTION);
        if (resposta == JOptionPane.YES_OPTION) {
            jProgressBar1.setVisible(true);
            jBtSair.setEnabled(!true);
            jBtConfirmar.setEnabled(!true);
            horaMov = jHoraSistema.getText();
            dataModFinal = jDataSistema.getText();
            statusMov = "Finalizou";
            new Thread() {
                public void run() {
                    for (int i = 0; i < 101; i++) {
                        try {
                            sleep(100);
                            jProgressBar1.setValue(i);
                            if (jProgressBar1.getValue() <= 10) {
                                lblCarregando.setText("Carregando tabelas para finalização, Aguarde...");
                            } else if (jProgressBar1.getValue() <= 15) {
                                lblCarregando.setText("Finalizando todas Entradas...");
                                objEntLote.setStatusEntrada(statusFinaliza);
                                objEntLote.setDataFechamento(dataModFinal);
                                objEntLote.setHoraFechamento(horaMov);
                                objEntLote.setUsuarioUp(nameUser);
                                fecharEntradas();
                                objLog();
                                controlLog.incluirLogSistema(objLogSys); // Grava o log da operação    
                            } else if (jProgressBar1.getValue() <= 20) {
                                lblCarregando.setText("Finalizando todas Saídas...");
                                objSaida.setStatusSaida(statusFinaliza);
                                objSaida.setDataFechamento(dataModFinal);
                                objSaida.setHoraFechamento(horaMov);
                                objSaida.setUsuarioUp(nameUser);
                                fecharSaidas();
                            } else if (jProgressBar1.getValue() <= 30) {
                                lblCarregando.setText("Finalizando todas Transferências...");
                                objTransf.setStatusTransf(statusFinaliza);
                                objTransf.setDataFechamento(dataModFinal);
                                objTransf.setHoraFechamento(horaMov);
                                objTransf.setUsuarioUp(nameUser);
                                fecharTransferencias();
                            } else if (jProgressBar1.getValue() <= 35) {
                                lblCarregando.setText("Finalizando todos os Retornos de Saida Temporaria...");
                                objRetorno.setStatusRetorno(statusFinaliza);
                                objRetorno.setDataFechamento(dataModFinal);
                                objRetorno.setHoraFechamento(horaMov);
                                objRetorno.setUsuarioUp(nameUser);
                                fecharRetornoSaidaTemporaria();
                            } else if (jProgressBar1.getValue() <= 45) {
                                lblCarregando.setText("Finalizando todos os Retornos Espotâneo...");
                                objRetEspontaneo.setStatusRet(statusFinaliza);
                                objRetEspontaneo.setDataFechamento(dataModFinal);
                                objRetEspontaneo.setHoraFechamento(horaMov);
                                objRetEspontaneo.setNomeUsuarioUpdate(nameUser);
                                fecharRetornoEspontaneo();
                            } else if (jProgressBar1.getValue() <= 50) {
                                lblCarregando.setText("Finalizando todos os Retornos de Audiência...");
                                objRetEspontaneo.setStatusRet(statusFinaliza);
                                objRetEspontaneo.setDataFechamento(dataModFinal);
                                objRetEspontaneo.setHoraFechamento(horaMov);
                                objRetEspontaneo.setNomeUsuarioUpdate(nameUser);
                                fecharRetornoAudiencia();
                            } else if (jProgressBar1.getValue() <= 70) {
                                lblCarregando.setText("Finalizando todos os Retornos de Médico...");
                                objRecap.setStatusRet(statusFinaliza);
                                objRecap.setDataFechamento(dataModFinal);
                                objRecap.setHoraFechamento(horaMov);
                                objRecap.setNomeUsuarioUpdate(nameUser);
                                fecharRetornoMedico();
                            } else if (jProgressBar1.getValue() <= 75) {
                                lblCarregando.setText("Finalizando todos as Previsões de Saida...");
                                objPrevSaida.setStatusLanc(statusFinaliza);
                                objPrevSaida.setDataUp(dataModFinal);
                                objPrevSaida.setHorarioUp(horaMov);
                                objPrevSaida.setUsuarioUp(nameUser);
                                fecharPrevisaoSaida();
                            } else if (jProgressBar1.getValue() <= 85) {
                                lblCarregando.setText("Finalizando todos as Retornos de Internos Por Transferência...");
                                objRetTrans.setStatusRet(statusFinaliza);
                                objRetTrans.setDataUp(dataModFinal);
                                objRetTrans.setHoraUp(horaMov);
                                objRetTrans.setNomeUsuarioUpdate(nameUser);
                                fecharRetornoPorTransferencia();
                            } else if (jProgressBar1.getValue() <= 95) {
                                lblCarregando.setText("Preparando para concluir as finalizações...");
                                conecta.desconecta();
                            } else if (jProgressBar1.getValue() == 100) {
                                lblCarregando.setText("Fechamento concluído com Sucesso !!!");
                                jBtSair.setEnabled(true);
                                jBtConfirmar.setEnabled(true);
                            }
                        } catch (InterruptedException e) {
                        }
                    }
                }

            }.start();
        }
    }//GEN-LAST:event_jBtConfirmarActionPerformed

    private void jBtSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtSairActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jBtSairActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtConfirmar;
    private javax.swing.JButton jBtSair;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblCarregando;
    // End of variables declaration//GEN-END:variables

    public void fecharEntradas() {
        conecta.abrirConexao();
        try {
            PreparedStatement pst = conecta.con.prepareStatement("UPDATE ENTRADALOTE SET StatusEnt=?,UsuarioUp=?,DataUp=?,HorarioUp=? WHERE StatusEnt='" + statusEnt + "'");
            pst.setString(1, objEntLote.getStatusEntrada());
            pst.setString(2, objEntLote.getUsuarioUp());
            pst.setString(3, objEntLote.getDataFechamento());
            pst.setString(4, objEntLote.getHoraFechamento());
            pst.executeUpdate();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Não Foi possivel FINALIZAR os Dados\n\n ERRO\n" + ex);
        }
        conecta.desconecta();
    }

    public void fecharSaidas() {
        conecta.abrirConexao();
        try {
            PreparedStatement pst;
            pst = conecta.con.prepareStatement("UPDATE SAIDACRC SET StatusSai=?,UsuarioUp=?,DataUp=?,HorarioUp=? WHERE StatusSai='" + statusSai + "'");
            pst.setString(1, objSaida.getStatusSaida());
            pst.setString(2, objSaida.getUsuarioUp());
            pst.setString(3, objSaida.getDataFechamento());
            pst.setString(4, objSaida.getHoraFechamento());
            pst.executeUpdate();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Não Foi possivel ALTERAR os Dados\n\n ERRO\n" + ex);
        }
        conecta.desconecta();
    }

    public void fecharTransferencias() {
        conecta.abrirConexao();
        try {
            PreparedStatement pst;
            pst = conecta.con.prepareStatement("UPDATE TRANSFERENCIACRC SET StatusTran=?,UsuarioUp=?,DataUp=?,HorarioUp=? WHERE StatusTran='" + statusTran + "'");
            pst.setString(1, objTransf.getStatusTransf());
            pst.setString(2, objTransf.getUsuarioUp());
            pst.setString(3, objTransf.getDataFechamento());
            pst.setString(4, objTransf.getHoraFechamento());
            pst.executeUpdate();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Não Foi possivel FINALIZAR os Dados\n\n ERRO\n" + ex);
        }
        conecta.desconecta();
    }

    public void fecharRetornoSaidaTemporaria() {
        conecta.abrirConexao();
        try {
            PreparedStatement pst = conecta.con.prepareStatement("UPDATE RETORNOSCRC SET StatusRet=?,UsuarioUp=?,DataUp=?,HorarioUp=? WHERE StatusRet='" + statusRet + "'");
            pst.setString(1, objRetorno.getStatusRetorno());
            pst.setString(2, objRetorno.getNomeUsuario());
            pst.setString(3, objRetorno.getDataFechamento());
            pst.setString(4, objRetorno.getHoraFechamento());
            pst.executeUpdate();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Não Foi possivel INSERIR os Dados\n\nERRO" + ex);
        }
        conecta.desconecta();
    }

    public void fecharRetornoEspontaneo() {
        conecta.abrirConexao();
        try {
            PreparedStatement pst = conecta.con.prepareStatement("UPDATE RETORNOESPONTANEO SET StatusRet=?,UsuarioUp=?,DataUp=?,HorarioUp=? WHERE StatusRet='" + statusRet + "'");
            pst.setString(1, objRetEspontaneo.getStatusRet());
            pst.setString(2, objRetEspontaneo.getNomeUsuarioUpdate());
            pst.setString(3, objRetEspontaneo.getDataFechamento());
            pst.setString(4, objRetEspontaneo.getHoraFechamento());
            pst.executeUpdate();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Não Foi possivel INSERIR os Dados\n\nERRO" + ex);
        }
        conecta.desconecta();
    }

    public void fecharRecaptura() {
        conecta.abrirConexao();
        try {
            PreparedStatement pst = conecta.con.prepareStatement("UPDATE RECAPTURA SET StatusRet=?,UsuarioUp=?,DataUp=?,HorarioUp=? WHERE StatusRet='" + statusRecap + "'");
            pst.setString(1, objRecap.getStatusRet());
            pst.setString(2, objRecap.getNomeUsuarioUpdate());
            pst.setString(3, objRecap.getDataFechamento());
            pst.setString(4, objRecap.getHoraFechamento());
            pst.executeUpdate();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Não Foi possivel INSERIR os Dados\n\nERRO" + ex);
        }
        conecta.desconecta();
    }

    public void fecharRetornoAudiencia() {
        conecta.abrirConexao();
        try {
            PreparedStatement pst = conecta.con.prepareStatement("UPDATE RETORNOAUDIENCIA SET StatusRet=?,UsuarioUp=?,DataUp=?,HorarioUp=? WHERE StatusRet='" + statusRet + "'");
            pst.setString(1, objRetEspontaneo.getStatusRet());
            pst.setString(2, objRetEspontaneo.getNomeUsuarioUpdate());
            pst.setString(3, objRetEspontaneo.getDataFechamento());
            pst.setString(4, objRetEspontaneo.getHoraFechamento());
            pst.executeUpdate();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Não Foi possivel INSERIR os Dados\n\nERRO" + ex);
        }
        conecta.desconecta();
    }

    public void fecharRetornoMedico() {
        conecta.abrirConexao();
        try {
            PreparedStatement pst = conecta.con.prepareStatement("UPDATE RETORNOMEDICO SET StatusRet=?,UsuarioUp=?,DataUp=?,HorarioUp=? WHERE StatusRet='" + statusRet + "'");
            pst.setString(1, objRetorno.getStatusRetorno());
            pst.setString(2, objRetorno.getNomeUsuario());
            pst.setString(3, objRetorno.getDataFechamento());
            pst.setString(4, objRetorno.getHoraFechamento());
            pst.executeUpdate();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Não Foi possivel INSERIR os Dados\n\nERRO" + ex);
        }
        conecta.desconecta();
    }

    public void fecharPrevisaoSaida() {
        conecta.abrirConexao();
        try {
            PreparedStatement pst = conecta.con.prepareStatement("UPDATE PREVISAOSAIDA SET StatusLanc=?,UsuarioUp=?,DataUp=?,HorarioUp=? WHERE StatusLanc='" + statusRet + "'");
            pst.setString(1, objPrevSaida.getStatusLanc());
            pst.setString(2, objPrevSaida.getUsuarioUp());
            pst.setString(3, objPrevSaida.getDataUp());
            pst.setString(4, objPrevSaida.getHorarioUp());
            pst.executeUpdate();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Não Foi possivel INSERIR os Dados\n\nERRO" + ex);
        }
        conecta.desconecta();
    }

    public void fecharRetornoPorTransferencia() {
        conecta.abrirConexao();
        try {
            PreparedStatement pst = conecta.con.prepareStatement("UPDATE RETORNOTRANSFERENCIA SET StatusRet=?,UsuarioUp=?,DataUp=?,HorarioUp=? WHERE StatusRet='" + statusRet + "'");
            pst.setString(1, objRetTrans.getStatusRet());
            pst.setString(2, objRetTrans.getNomeUsuarioUpdate());
            pst.setString(3, objRetTrans.getDataUp());
            pst.setString(4, objRetTrans.getHoraUp());
            pst.executeUpdate();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Não Foi possivel INSERIR os Dados\n\nERRO" + ex);
        }
        conecta.desconecta();
    }

    public void objLog() {
        objLogSys.setDataMov(dataModFinal);
        objLogSys.setHorarioMov(horaMov);
        objLogSys.setNomeModuloTela(nomeModuloTela);
        objLogSys.setNomeUsuarioLogado(nameUser);
        objLogSys.setStatusMov(statusMov);
    }
}
