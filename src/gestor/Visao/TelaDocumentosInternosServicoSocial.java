/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestor.Visao;

import gestor.Dao.ConexaoBancoDados;
import static gestor.Visao.TelaLoginSenha.nameUser;
import static gestor.Visao.TelaLoginSenha.descricaoUnidade;
import java.util.HashMap;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRResultSetDataSource;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author ronaldo
 */
public class TelaDocumentosInternosServicoSocial extends javax.swing.JInternalFrame {

    ConexaoBancoDados conecta = new ConexaoBancoDados();

    String opcao = "Sim";

    /**
     * Creates new form TelaDocumentosInternosServicoSocial
     */
    public TelaDocumentosInternosServicoSocial() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxTipoDocumento = new javax.swing.JComboBox();
        jBtConfirmar = new javax.swing.JButton();
        jBtSair = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("...::: Relatório Documentos Internos Serviço Social :::...");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("Selecione um opção");

        jComboBoxTipoDocumento.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBoxTipoDocumento.setForeground(new java.awt.Color(102, 0, 102));
        jComboBoxTipoDocumento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecione...", "Registro Geral -  (R.G.)", "Cadastro de Pessoa Fisica - (C.P.F.)", "Carteira Nacional de Habilitação - (C.N.H.)", "Carteira de Reservista", "Carteira de Trabalho e Previdência Social - (C.T.P.S)", "Titulo de Eleitor", "Passaporte", "Certidão de Nascimento", "Certidão de Casamento" }));
        jComboBoxTipoDocumento.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxTipoDocumento, 0, 352, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxTipoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jBtConfirmar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jBtConfirmar.setForeground(new java.awt.Color(0, 102, 51));
        jBtConfirmar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/accept.png"))); // NOI18N
        jBtConfirmar.setText("Confirmar");
        jBtConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtConfirmarActionPerformed(evt);
            }
        });

        jBtSair.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jBtSair.setForeground(new java.awt.Color(204, 0, 0));
        jBtSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Log_Out_Icon_16.png"))); // NOI18N
        jBtSair.setText("Sair");
        jBtSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtSairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(jBtConfirmar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtSair)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBtConfirmar, jBtSair});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtConfirmar)
                    .addComponent(jBtSair))
                .addGap(12, 12, 12))
        );

        setBounds(400, 90, 410, 146);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtConfirmarActionPerformed
        // TODO add your handling code here:
        if (jComboBoxTipoDocumento.getSelectedItem().equals("Selecione...")) {
            JOptionPane.showMessageDialog(null, "Selecione um documento para imprimir relatório");
        } else if (jComboBoxTipoDocumento.getSelectedItem().equals("Registro Geral -  (R.G.)")) {
            try {
                conecta.abrirConexao();
                String path = "reports/RelatorioDocumentosInternosServicoSocialRG.jasper";
                conecta.executaSQL("SELECT * FROM DOCINTERNOS "
                        + "INNER JOIN PRONTUARIOSCRC "
                        + "ON DOCINTERNOS.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                        + "WHERE DOCINTERNOS.RgDoc='" + opcao + "' "
                        + "ORDER BY PRONTUARIOSCRC.NomeInternoCrc");
                HashMap parametros = new HashMap();
                parametros.put("rG", opcao);
                parametros.put("descricaoUnidade", descricaoUnidade);
                parametros.put("nomeUsuario", nameUser);
                JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                jv.setTitle("Relatório de Documentos Internos no S. Social (R.G.)");
                jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                jv.toFront(); // Traz o relatorio para frente da aplicação            
                conecta.desconecta();
            } catch (JRException e) {
                JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
            }
        } else if (jComboBoxTipoDocumento.getSelectedItem().equals("Cadastro de Pessoa Fisica - (C.P.F.)")) {
            try {
                conecta.abrirConexao();
                String path = "reports/RelatorioDocumentosInternosServicoSocialCPF.jasper";
                conecta.executaSQL("SELECT * FROM DOCINTERNOS "
                        + "INNER JOIN PRONTUARIOSCRC "
                        + "ON DOCINTERNOS.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                        + "WHERE DOCINTERNOS.CpfDoc='" + opcao + "' "
                        + "ORDER BY PRONTUARIOSCRC.NomeInternoCrc");
                HashMap parametros = new HashMap();
                parametros.put("cpfDoc", opcao);
                parametros.put("descricaoUnidade", descricaoUnidade);
                parametros.put("nomeUsuario", nameUser);
                JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                jv.setTitle("Relatório de Documentos Internos no S. Social (C.P.F.)");
                jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                jv.toFront(); // Traz o relatorio para frente da aplicação            
                conecta.desconecta();
            } catch (JRException e) {
                JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
            }
        } else if (jComboBoxTipoDocumento.getSelectedItem().equals("Carteira Nacional de Habilitação - (C.N.H.)")) {
            try {
                conecta.abrirConexao();
                String path = "reports/RelatorioDocumentosInternosServicoSocialCNH.jasper";
                conecta.executaSQL("SELECT * FROM DOCINTERNOS "
                        + "INNER JOIN PRONTUARIOSCRC "
                        + "ON DOCINTERNOS.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                        + "WHERE DOCINTERNOS.CnhDoc='" + opcao + "' "
                        + "ORDER BY PRONTUARIOSCRC.NomeInternoCrc");
                HashMap parametros = new HashMap();
                parametros.put("cNH", opcao);
                parametros.put("descricaoUnidade", descricaoUnidade);
                parametros.put("nomeUsuario", nameUser);
                JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                jv.setTitle("Relatório de Documentos Internos no S. Social (CNH)");
                jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                jv.toFront(); // Traz o relatorio para frente da aplicação            
                conecta.desconecta();
            } catch (JRException e) {
                JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
            }
        } else if (jComboBoxTipoDocumento.getSelectedItem().equals("Carteira de Reservista")) {
            try {
                conecta.abrirConexao();
                String path = "reports/RelatorioDocumentosInternosServicoSocialRESERVISTA.jasper";
                conecta.executaSQL("SELECT * FROM DOCINTERNOS "
                        + "INNER JOIN PRONTUARIOSCRC "
                        + "ON DOCINTERNOS.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                        + "WHERE DOCINTERNOS.ReservistaDoc='" + opcao + "' "
                        + "ORDER BY PRONTUARIOSCRC.NomeInternoCrc");
                HashMap parametros = new HashMap();
                parametros.put("reservista", opcao);
                parametros.put("descricaoUnidade", descricaoUnidade);
                parametros.put("nomeUsuario", nameUser);
                JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                jv.setTitle("Relatório de Documentos Internos no S. Social (RESERVISTA)");
                jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                jv.toFront(); // Traz o relatorio para frente da aplicação            
                conecta.desconecta();
            } catch (JRException e) {
                JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
            }
        } else if (jComboBoxTipoDocumento.getSelectedItem().equals("Carteira de Trabalho e Previdência Social - (C.T.P.S)")) {
            try {
                conecta.abrirConexao();
                String path = "reports/RelatorioDocumentosInternosServicoSocialCTPS.jasper";
                conecta.executaSQL("SELECT * FROM DOCINTERNOS "
                        + "INNER JOIN PRONTUARIOSCRC "
                        + "ON DOCINTERNOS.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                        + "WHERE DOCINTERNOS.CtpsDoc='" + opcao + "' "
                        + "ORDER BY PRONTUARIOSCRC.NomeInternoCrc");
                HashMap parametros = new HashMap();
                parametros.put("cTPS", opcao);
                parametros.put("descricaoUnidade", descricaoUnidade);
                parametros.put("nomeUsuario", nameUser);
                JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                jv.setTitle("Relatório de Documentos Internos no S. Social (C.T.P.S.)");
                jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                jv.toFront(); // Traz o relatorio para frente da aplicação            
                conecta.desconecta();
            } catch (JRException e) {
                JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
            }
        } else if (jComboBoxTipoDocumento.getSelectedItem().equals("Titulo de Eleitor")) {
            try {
                conecta.abrirConexao();
                String path = "reports/RelatorioDocumentosInternosServicoSocialTITULOELEITOR.jasper";
                conecta.executaSQL("SELECT * FROM DOCINTERNOS "
                        + "INNER JOIN PRONTUARIOSCRC "
                        + "ON DOCINTERNOS.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                        + "WHERE DOCINTERNOS.TituloDoc='" + opcao + "' "
                        + "ORDER BY PRONTUARIOSCRC.NomeInternoCrc");
                HashMap parametros = new HashMap();
                parametros.put("tituloEleitor", opcao);
                parametros.put("descricaoUnidade", descricaoUnidade);
                parametros.put("nomeUsuario", nameUser);
                JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                jv.setTitle("Relatório de Documentos Internos no S. Social (Titulo de Eleitor)");
                jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                jv.toFront(); // Traz o relatorio para frente da aplicação            
                conecta.desconecta();
            } catch (JRException e) {
                JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
            }
        } else if (jComboBoxTipoDocumento.getSelectedItem().equals("Passaporte")) {
            try {
                conecta.abrirConexao();
                String path = "reports/RelatorioDocumentosInternosServicoSocialPASSAPORTE.jasper";
                conecta.executaSQL("SELECT * FROM DOCINTERNOS "
                        + "INNER JOIN PRONTUARIOSCRC "
                        + "ON DOCINTERNOS.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                        + "WHERE DOCINTERNOS.OutrosDoc='" + opcao + "' "
                        + "ORDER BY PRONTUARIOSCRC.NomeInternoCrc");
                HashMap parametros = new HashMap();
                parametros.put("passaporte", opcao);
                parametros.put("descricaoUnidade", descricaoUnidade);
                parametros.put("nomeUsuario", nameUser);
                JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                jv.setTitle("Relatório de Documentos Internos no S. Social (Passaporte)");
                jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                jv.toFront(); // Traz o relatorio para frente da aplicação            
                conecta.desconecta();
            } catch (JRException e) {
                JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
            }
        } else if (jComboBoxTipoDocumento.getSelectedItem().equals("Certidão de Nascimento")) {
            try {
                conecta.abrirConexao();
                String path = "reports/RelatorioDocumentosInternosServicoSocialCERTIDAONASCIMENTO.jasper";
                conecta.executaSQL("SELECT * FROM DOCINTERNOS "
                        + "INNER JOIN PRONTUARIOSCRC "
                        + "ON DOCINTERNOS.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                        + "WHERE DOCINTERNOS.CNascimentoDoc='" + opcao + "' "
                        + "ORDER BY PRONTUARIOSCRC.NomeInternoCrc");
                HashMap parametros = new HashMap();
                parametros.put("cNascimento", opcao);
                parametros.put("descricaoUnidade", descricaoUnidade);
                parametros.put("nomeUsuario", nameUser);
                JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                jv.setTitle("Relatório de Documentos Internos no S. Social (Certidão Nascimento)");
                jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                jv.toFront(); // Traz o relatorio para frente da aplicação            
                conecta.desconecta();
            } catch (JRException e) {
                JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
            }
        } else if (jComboBoxTipoDocumento.getSelectedItem().equals("Certidao de Casamento")) {
            try {
                conecta.abrirConexao();
                String path = "reports/RelatorioDocumentosInternosServicoSocialCERTIDAOCASAMENTO.jasper";
                conecta.executaSQL("SELECT * FROM DOCINTERNOS "
                        + "INNER JOIN PRONTUARIOSCRC "
                        + "ON DOCINTERNOS.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                        + "WHERE DOCINTERNOS.CNascimentoDoc='" + opcao + "' "
                        + "ORDER BY PRONTUARIOSCRC.NomeInternoCrc");
                HashMap parametros = new HashMap();
                parametros.put("cCasamento", opcao);
                parametros.put("descricaoUnidade", descricaoUnidade);
                parametros.put("nomeUsuario", nameUser);
                JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                jv.setTitle("Relatório de Documentos Internos no S. Social (Certidão Casamento)");
                jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                jv.toFront(); // Traz o relatorio para frente da aplicação            
                conecta.desconecta();
            } catch (JRException e) {
                JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
            }
        }
    }//GEN-LAST:event_jBtConfirmarActionPerformed

    private void jBtSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtSairActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jBtSairActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtConfirmar;
    private javax.swing.JButton jBtSair;
    private javax.swing.JComboBox jComboBoxTipoDocumento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
