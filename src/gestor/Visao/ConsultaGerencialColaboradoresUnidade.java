/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestor.Visao;

import gestor.Dao.ConexaoBancoDadosBAR;
import gestor.Dao.ConexaoBancoDadosITB;
import gestor.Dao.ConexaoBancoDadosLF;
import gestor.Dao.ConexaoBancoDadosSSA;
import gestor.Dao.ConexaoBancoDadosVC;
import Utilitarios.ModeloTabela;
import java.awt.Color;
import java.awt.Image;
import java.io.File;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author ronaldo.silva7
 */
public class ConsultaGerencialColaboradoresUnidade extends javax.swing.JInternalFrame {

    ConexaoBancoDadosLF conectaLF = new ConexaoBancoDadosLF();
    ConexaoBancoDadosSSA conectaSSA = new ConexaoBancoDadosSSA();
    ConexaoBancoDadosITB conectaITB = new ConexaoBancoDadosITB();
    ConexaoBancoDadosVC conectaVC = new ConexaoBancoDadosVC();
    ConexaoBancoDadosBAR conectaBAR = new ConexaoBancoDadosBAR();
    //
    int count = 0;
    int count1 = 0;
    int count2 = 0;
    int count3 = 0;
    int count4 = 0;
    String dataEntrada = ""; // LAURO DE FREITAS
    String dataEntrada1 = ""; // SALVADOR 
    String dataEntrada2 = ""; // ITABUNA
    String dataEntrada3 = ""; // VITÓRIA DA CONQUISTA
    String dataEntrada4 = ""; // BARREIRAS
    //
    int flag = 0;
    String caminho = "";
    public static String nomeUnidadeLF = "";
    public static String nomeUnidadeSSA = "";
    public static String nomeUnidadeITB = "";
    public static String nomeUnidadeVC = "";
    public static String nomeUnidadeBAR = "";
    public static String nomeUnidadeIRE = ""; // AINDA NÃO FOI ATIVADA (03/05/2018)
    //
    String pSTATUS_ativo = "Ativo";
    String pSTATUS_inativo = "Inativo";

    /**
     * Creates new form ConsultaGerencialInternosUnidade
     */
    public ConsultaGerencialColaboradoresUnidade() {
        initComponents();
        corCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jIdColaborador = new javax.swing.JTextField();
        jMatriculaColaborador = new javax.swing.JTextField();
        jNomeColaborador = new javax.swing.JTextField();
        jNomeMaeColaborador = new javax.swing.JTextField();
        jDataNascimentoColaborador = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jStatusColaborador = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jSexo = new javax.swing.JTextField();
        jPanel30 = new javax.swing.JPanel();
        jLabel63 = new javax.swing.JLabel();
        jPanel31 = new javax.swing.JPanel();
        jPanel32 = new javax.swing.JPanel();
        jtotalRegistros = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabelaColaborador = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jFotoColaborador = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPesquisaNomeColaborador = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jBtPesquisaColaboradorNome = new javax.swing.JButton();
        jPesquisaMatricula = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jBtPesquisarMatricula = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jPesquisarNomeMaeColaborador = new javax.swing.JTextField();
        jBtNomeMaeColaborador = new javax.swing.JButton();
        jComboBoxFiltroPesquisa = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jBtProntuarioCrc = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("...::: Pesquisa Global de Colaboradores - Unidade Prisional :::...");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Código");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Matricula");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Data Nasc.");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Nome Completo do Colaborador");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Nome da Mãe do Colaborador");

        jIdColaborador.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jIdColaborador.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jIdColaborador.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jIdColaborador.setEnabled(false);

        jMatriculaColaborador.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jMatriculaColaborador.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jMatriculaColaborador.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jMatriculaColaborador.setEnabled(false);

        jNomeColaborador.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jNomeColaborador.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jNomeColaborador.setEnabled(false);

        jNomeMaeColaborador.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jNomeMaeColaborador.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jNomeMaeColaborador.setEnabled(false);

        jDataNascimentoColaborador.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jDataNascimentoColaborador.setEnabled(false);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Status");

        jStatusColaborador.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jStatusColaborador.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jStatusColaborador.setEnabled(false);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Sexo");

        jSexo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jSexo.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jNomeMaeColaborador)
                    .addComponent(jNomeColaborador)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jIdColaborador, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jMatriculaColaborador, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDataNascimentoColaborador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(47, 47, 47)
                                .addComponent(jLabel10))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jStatusColaborador, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(jSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(14, 14, 14))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jLabel10))
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jIdColaborador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jMatriculaColaborador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDataNascimentoColaborador, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jStatusColaborador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jNomeColaborador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jNomeMaeColaborador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jNomeColaborador, jNomeMaeColaborador});

        jPanel30.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        jLabel63.setText("Total de Registros:");

        javax.swing.GroupLayout jPanel30Layout = new javax.swing.GroupLayout(jPanel30);
        jPanel30.setLayout(jPanel30Layout);
        jPanel30Layout.setHorizontalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel30Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel63))
        );
        jPanel30Layout.setVerticalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel63)
        );

        jPanel31.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        javax.swing.GroupLayout jPanel31Layout = new javax.swing.GroupLayout(jPanel31);
        jPanel31.setLayout(jPanel31Layout);
        jPanel31Layout.setHorizontalGroup(
            jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel31Layout.setVerticalGroup(
            jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );

        jPanel32.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        jtotalRegistros.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel32Layout = new javax.swing.GroupLayout(jPanel32);
        jPanel32.setLayout(jPanel32Layout);
        jPanel32Layout.setHorizontalGroup(
            jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtotalRegistros, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
        );
        jPanel32Layout.setVerticalGroup(
            jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtotalRegistros, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE)
        );

        jTabelaColaborador.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jTabelaColaborador.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Status", "Matricula", "Nome do Colaborador", "Data Nasc.", "Unidade Prisional"
            }
        ));
        jTabelaColaborador.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabelaColaboradorMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTabelaColaborador);
        if (jTabelaColaborador.getColumnModel().getColumnCount() > 0) {
            jTabelaColaborador.getColumnModel().getColumn(0).setMinWidth(70);
            jTabelaColaborador.getColumnModel().getColumn(0).setMaxWidth(70);
            jTabelaColaborador.getColumnModel().getColumn(1).setMinWidth(100);
            jTabelaColaborador.getColumnModel().getColumn(1).setMaxWidth(100);
            jTabelaColaborador.getColumnModel().getColumn(2).setMinWidth(80);
            jTabelaColaborador.getColumnModel().getColumn(2).setMaxWidth(80);
            jTabelaColaborador.getColumnModel().getColumn(3).setMinWidth(400);
            jTabelaColaborador.getColumnModel().getColumn(3).setMaxWidth(400);
            jTabelaColaborador.getColumnModel().getColumn(4).setMinWidth(80);
            jTabelaColaborador.getColumnModel().getColumn(4).setMaxWidth(80);
            jTabelaColaborador.getColumnModel().getColumn(5).setMinWidth(450);
            jTabelaColaborador.getColumnModel().getColumn(5).setMaxWidth(450);
        }

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jFotoColaborador, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jFotoColaborador, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true), "Pesquisas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(204, 0, 0))); // NOI18N

        jPesquisaNomeColaborador.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Nome do Colaborador");

        jBtPesquisaColaboradorNome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtPesquisaColaboradorNome.setContentAreaFilled(false);
        jBtPesquisaColaboradorNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtPesquisaColaboradorNomeActionPerformed(evt);
            }
        });

        jPesquisaMatricula.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPesquisaMatricula.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Matricula");

        jBtPesquisarMatricula.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtPesquisarMatricula.setContentAreaFilled(false);
        jBtPesquisarMatricula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtPesquisarMatriculaActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Nome da Mãe do Colaborador");

        jPesquisarNomeMaeColaborador.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jBtNomeMaeColaborador.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtNomeMaeColaborador.setContentAreaFilled(false);
        jBtNomeMaeColaborador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtNomeMaeColaboradorActionPerformed(evt);
            }
        });

        jComboBoxFiltroPesquisa.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBoxFiltroPesquisa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione...", "Ativos", "Inativos", "Todos" }));
        jComboBoxFiltroPesquisa.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Filtro de Pesquisa");

        jBtProntuarioCrc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/SEM FOTO_HOMEM_16.jpg"))); // NOI18N
        jBtProntuarioCrc.setToolTipText("Ficha Cadastral do Colaborador");
        jBtProntuarioCrc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtProntuarioCrcActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPesquisarNomeMaeColaborador, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPesquisaNomeColaborador))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jBtPesquisaColaboradorNome, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtNomeMaeColaborador, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPesquisaMatricula, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jComboBoxFiltroPesquisa, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(3, 3, 3)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBtPesquisarMatricula, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtProntuarioCrc, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel11))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jBtProntuarioCrc)
                    .addComponent(jComboBoxFiltroPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtPesquisaColaboradorNome)
                    .addComponent(jPesquisaNomeColaborador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jPesquisarNomeMaeColaborador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtNomeMaeColaborador)
                    .addComponent(jPesquisaMatricula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtPesquisarMatricula))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 828, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jPanel30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel31, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );

        setBounds(300, 30, 864, 533);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtPesquisaColaboradorNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtPesquisaColaboradorNomeActionPerformed
        // TODO add your handling code here:
        if (jPesquisaNomeColaborador.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Informe o nome do colaborador para pesquisa global.");
        } else if (!jPesquisaNomeColaborador.getText().equals("") && jComboBoxFiltroPesquisa.getSelectedItem().equals("Selecione...")) {
            JOptionPane.showMessageDialog(rootPane, "Selecione um filtro para pesquisa.");
        } else if (!jPesquisaNomeColaborador.getText().equals("") && jComboBoxFiltroPesquisa.getSelectedItem().equals("Todos")) {
            final ViewAguardeProcessando carregando = new ViewAguardeProcessando(); //Teste tela aguarde
            carregando.setVisible(true);//Teste tela aguarde
            Thread t = new Thread() { //Teste tela aguarde
                public void run() { //Teste
                    preencherTodosColaboradores();
                    carregando.dispose(); //Teste tela aguarde
                }
            }; //Teste tela aguarde
            t.start(); //Teste tela aguarde
        } else if (!jPesquisaNomeColaborador.getText().equals("") && jComboBoxFiltroPesquisa.getSelectedItem().equals("Ativos")) {
            final ViewAguardeProcessando carregando = new ViewAguardeProcessando(); //Teste tela aguarde
            carregando.setVisible(true);//Teste tela aguarde
            Thread t = new Thread() { //Teste tela aguarde
                public void run() { //Teste
                    pesquisarColaboradoresAtivos();
                    carregando.dispose(); //Teste tela aguarde
                }
            }; //Teste tela aguarde
            t.start(); //Teste tela aguarde
        } else if (!jPesquisaNomeColaborador.getText().equals("") && jComboBoxFiltroPesquisa.getSelectedItem().equals("Inativos")) {
            final ViewAguardeProcessando carregando = new ViewAguardeProcessando(); //Teste tela aguarde
            carregando.setVisible(true);//Teste tela aguarde
            Thread t = new Thread() { //Teste tela aguarde
                public void run() { //Teste
                    pesquisarColaboradoresInativos();
                    carregando.dispose(); //Teste tela aguarde
                }
            }; //Teste tela aguarde
            t.start(); //Teste tela aguarde
        }
    }//GEN-LAST:event_jBtPesquisaColaboradorNomeActionPerformed

    private void jBtPesquisarMatriculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtPesquisarMatriculaActionPerformed
        // TODO add your handling code here:
        if (jPesquisaMatricula.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Informe o núemro da matricula do colaborador para pesquisa global.");
        } else if (!jPesquisaMatricula.getText().equals("") && jComboBoxFiltroPesquisa.getSelectedItem().equals("Selecione...")) {
            pesquisarColaboradorMatricula();
        }
    }//GEN-LAST:event_jBtPesquisarMatriculaActionPerformed

    private void jBtNomeMaeColaboradorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtNomeMaeColaboradorActionPerformed
        // TODO add your handling code here:
        if (jPesquisarNomeMaeColaborador.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Informe o nome da mãe do colaborador para pesquisa global.");
        } else if (!jPesquisarNomeMaeColaborador.getText().equals("") && jComboBoxFiltroPesquisa.getSelectedItem().equals("Selecione...")) {
            pesquisarMaeColaborador();
        }
    }//GEN-LAST:event_jBtNomeMaeColaboradorActionPerformed

    private void jTabelaColaboradorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabelaColaboradorMouseClicked
        // TODO add your handling code here:
        flag = 1;
        if (flag == 1) {
            String nomeInterno = "" + jTabelaColaborador.getValueAt(jTabelaColaborador.getSelectedRow(), 3);
            jPesquisaNomeColaborador.setText(nomeInterno);
            String idInt = "" + jTabelaColaborador.getValueAt(jTabelaColaborador.getSelectedRow(), 0);
            jIdColaborador.setText(idInt);
            //
            limparCampos();
            //
            final ViewAguardeProcessando carregando = new ViewAguardeProcessando(); //Teste tela aguarde
            carregando.setVisible(true);//Teste tela aguarde
            Thread t = new Thread() { //Teste tela aguarde
                public void run() { //Teste
                    conectaLF.abrirConexao();
                    conectaSSA.abrirConexao();
                    conectaITB.abrirConexao();
                    conectaVC.abrirConexao();
                    conectaBAR.abrirConexao();
                    try {
                        if (nomeUnidadeLF == jTabelaColaborador.getValueAt(jTabelaColaborador.getSelectedRow(), 5)) {
                            // LAURO DE FREITAS
                            conectaLF.executaSQL("SELECT "
                                    + "IdFunc,StatusFunc, "
                                    + "MatriculaFunc,NomeFunc, "
                                    + "DataNascimento,SexoFunc, "
                                    + "NomeMae,ImagemFunc, "
                                    + "ImagemFrenteCO "
                                    + "FROM COLABORADOR "
                                    + "WHERE NomeFunc='" + jPesquisaNomeColaborador.getText() + "'");
                            conectaLF.rs.first();
                            jIdColaborador.setText(String.valueOf(conectaLF.rs.getInt("IdFunc")));
                            jMatriculaColaborador.setText(conectaLF.rs.getString("MatriculaFunc"));
                            jDataNascimentoColaborador.setDate(conectaLF.rs.getDate("DataNascimento"));
                            jStatusColaborador.setText(conectaLF.rs.getString("StatusFunc"));
                            jNomeColaborador.setText(conectaLF.rs.getString("NomeFunc"));
                            jNomeMaeColaborador.setText(conectaLF.rs.getString("NomeMae"));
                            jSexo.setText(conectaLF.rs.getString("SexoFunc"));
                            caminho = conectaLF.rs.getString("ImagemFunc");
                            if (caminho != null) {
                                javax.swing.ImageIcon i = new javax.swing.ImageIcon(caminho);
                                jFotoColaborador.setIcon(i);
                                jFotoColaborador.setIcon(new ImageIcon(i.getImage().getScaledInstance(jFotoColaborador.getWidth(), jFotoColaborador.getHeight(), Image.SCALE_SMOOTH)));
                            }
                            // FOTO DE FRENTE - BANCO DE DADOS
                            byte[] imgBytes = ((byte[]) conectaLF.rs.getBytes("ImagemFrenteCO"));
                            if (imgBytes != null) {
                                ImageIcon pic = null;
                                pic = new ImageIcon(imgBytes);
                                Image scaled = pic.getImage().getScaledInstance(jFotoColaborador.getWidth(), jFotoColaborador.getHeight(), Image.SCALE_SMOOTH);
                                ImageIcon icon = new ImageIcon(scaled);
                                jFotoColaborador.setIcon(icon);
                            }
                            //
                        } else if (nomeUnidadeSSA == jTabelaColaborador.getValueAt(jTabelaColaborador.getSelectedRow(), 5)) {
                            // SALVADOR
                            conectaSSA.executaSQL("SELECT "
                                    + "IdFunc,StatusFunc, "
                                    + "MatriculaFunc,NomeFunc, "
                                    + "DataNascimento,SexoFunc, "
                                    + "NomeMae,ImagemFunc, "
                                    + "ImagemFrenteCO "
                                    + "FROM COLABORADOR "
                                    + "WHERE NomeFunc='" + jPesquisaNomeColaborador.getText() + "'");
                            conectaSSA.rs.first();
                            jIdColaborador.setText(String.valueOf(conectaSSA.rs.getInt("IdFunc")));
                            jMatriculaColaborador.setText(conectaSSA.rs.getString("MatriculaFunc"));
                            jDataNascimentoColaborador.setDate(conectaSSA.rs.getDate("DataNascimento"));
                            jStatusColaborador.setText(conectaSSA.rs.getString("StatusFunc"));
                            jNomeColaborador.setText(conectaSSA.rs.getString("NomeFunc"));
                            jNomeMaeColaborador.setText(conectaSSA.rs.getString("NomeMae"));
                            jSexo.setText(conectaSSA.rs.getString("SexoFunc"));
                            caminho = conectaSSA.rs.getString("ImagemFunc");
                            if (caminho != null) {
                                javax.swing.ImageIcon i = new javax.swing.ImageIcon(caminho);
                                jFotoColaborador.setIcon(i);
                                jFotoColaborador.setIcon(new ImageIcon(i.getImage().getScaledInstance(jFotoColaborador.getWidth(), jFotoColaborador.getHeight(), Image.SCALE_SMOOTH)));
                            }
                            // FOTO DE FRENTE - BANCO DE DADOS
                            byte[] imgBytes = ((byte[]) conectaSSA.rs.getBytes("ImagemFrenteCO"));
                            if (imgBytes != null) {
                                ImageIcon pic = null;
                                pic = new ImageIcon(imgBytes);
                                Image scaled = pic.getImage().getScaledInstance(jFotoColaborador.getWidth(), jFotoColaborador.getHeight(), Image.SCALE_SMOOTH);
                                ImageIcon icon = new ImageIcon(scaled);
                                jFotoColaborador.setIcon(icon);
                            }
                        } else if (nomeUnidadeITB == jTabelaColaborador.getValueAt(jTabelaColaborador.getSelectedRow(), 5)) {
                            // ITABUNA
                            conectaITB.executaSQL("SELECT "
                                    + "IdFunc,StatusFunc, "
                                    + "MatriculaFunc,NomeFunc, "
                                    + "DataNascimento,SexoFunc, "
                                    + "NomeMae,ImagemFunc, "
                                    + "ImagemFrenteCO "
                                    + "FROM COLABORADOR "
                                    + "WHERE NomeFunc='" + jPesquisaNomeColaborador.getText() + "'");
                            conectaITB.rs.first();
                            jIdColaborador.setText(String.valueOf(conectaITB.rs.getInt("IdFunc")));
                            jMatriculaColaborador.setText(conectaITB.rs.getString("MatriculaFunc"));
                            jDataNascimentoColaborador.setDate(conectaITB.rs.getDate("DataNascimento"));
                            jStatusColaborador.setText(conectaITB.rs.getString("StatusFunc"));
                            jNomeColaborador.setText(conectaITB.rs.getString("NomeFunc"));
                            jNomeMaeColaborador.setText(conectaITB.rs.getString("NomeMae"));
                            jSexo.setText(conectaITB.rs.getString("SexoFunc"));
                            caminho = conectaITB.rs.getString("ImagemFunc");
                            if (caminho != null) {
                                javax.swing.ImageIcon i = new javax.swing.ImageIcon(caminho);
                                jFotoColaborador.setIcon(i);
                                jFotoColaborador.setIcon(new ImageIcon(i.getImage().getScaledInstance(jFotoColaborador.getWidth(), jFotoColaborador.getHeight(), Image.SCALE_SMOOTH)));
                            }
                            // FOTO DE FRENTE - BANCO DE DADOS
                            byte[] imgBytes = ((byte[]) conectaITB.rs.getBytes("ImagemFrenteCO"));
                            if (imgBytes != null) {
                                ImageIcon pic = null;
                                pic = new ImageIcon(imgBytes);
                                Image scaled = pic.getImage().getScaledInstance(jFotoColaborador.getWidth(), jFotoColaborador.getHeight(), Image.SCALE_SMOOTH);
                                ImageIcon icon = new ImageIcon(scaled);
                                jFotoColaborador.setIcon(icon);
                            }
                        } else if (nomeUnidadeVC == jTabelaColaborador.getValueAt(jTabelaColaborador.getSelectedRow(), 5)) {
                            // VITORIA DA CONQUISTA
                            conectaVC.executaSQL("SELECT "
                                    + "IdFunc,StatusFunc, "
                                    + "MatriculaFunc,NomeFunc, "
                                    + "DataNascimento,SexoFunc, "
                                    + "NomeMae,ImagemFunc, "
                                    + "ImagemFrenteCO "
                                    + "FROM COLABORADOR "
                                    + "WHERE NomeFunc='" + jPesquisaNomeColaborador.getText() + "'");
                            conectaVC.rs.first();
                            jIdColaborador.setText(String.valueOf(conectaVC.rs.getInt("IdFunc")));
                            jMatriculaColaborador.setText(conectaVC.rs.getString("MatriculaFunc"));
                            jDataNascimentoColaborador.setDate(conectaVC.rs.getDate("DataNascimento"));
                            jStatusColaborador.setText(conectaVC.rs.getString("StatusFunc"));
                            jNomeColaborador.setText(conectaVC.rs.getString("NomeFunc"));
                            jNomeMaeColaborador.setText(conectaVC.rs.getString("NomeMae"));
                            jSexo.setText(conectaVC.rs.getString("SexoFunc"));
                            caminho = conectaVC.rs.getString("ImagemFunc");
                            if (caminho != null) {
                                javax.swing.ImageIcon i = new javax.swing.ImageIcon(caminho);
                                jFotoColaborador.setIcon(i);
                                jFotoColaborador.setIcon(new ImageIcon(i.getImage().getScaledInstance(jFotoColaborador.getWidth(), jFotoColaborador.getHeight(), Image.SCALE_SMOOTH)));
                            }
                            // FOTO DE FRENTE - BANCO DE DADOS
                            byte[] imgBytes = ((byte[]) conectaVC.rs.getBytes("ImagemFrenteCO"));
                            if (imgBytes != null) {
                                ImageIcon pic = null;
                                pic = new ImageIcon(imgBytes);
                                Image scaled = pic.getImage().getScaledInstance(jFotoColaborador.getWidth(), jFotoColaborador.getHeight(), Image.SCALE_SMOOTH);
                                ImageIcon icon = new ImageIcon(scaled);
                                jFotoColaborador.setIcon(icon);
                            }
                        } else if (nomeUnidadeBAR == jTabelaColaborador.getValueAt(jTabelaColaborador.getSelectedRow(), 5)) {
                            // BARREIRAS
                            conectaBAR.executaSQL("SELECT "
                                    + "IdFunc,StatusFunc, "
                                    + "MatriculaFunc,NomeFunc, "
                                    + "DataNascimento,SexoFunc, "
                                    + "NomeMae,ImagemFunc, "
                                    + "ImagemFrenteCO "
                                    + "FROM COLABORADOR "
                                    + "WHERE NomeFunc='" + jPesquisaNomeColaborador.getText() + "'");
                            conectaBAR.rs.first();
                            jIdColaborador.setText(String.valueOf(conectaBAR.rs.getInt("IdFunc")));
                            jMatriculaColaborador.setText(conectaBAR.rs.getString("MatriculaFunc"));
                            jDataNascimentoColaborador.setDate(conectaBAR.rs.getDate("DataNascimento"));
                            jStatusColaborador.setText(conectaBAR.rs.getString("StatusFunc"));
                            jNomeColaborador.setText(conectaBAR.rs.getString("NomeFunc"));
                            jNomeMaeColaborador.setText(conectaBAR.rs.getString("NomeMae"));
                            jSexo.setText(conectaBAR.rs.getString("SexoFunc"));
                            caminho = conectaBAR.rs.getString("ImagemFunc");
                            if (caminho != null) {
                                javax.swing.ImageIcon i = new javax.swing.ImageIcon(caminho);
                                jFotoColaborador.setIcon(i);
                                jFotoColaborador.setIcon(new ImageIcon(i.getImage().getScaledInstance(jFotoColaborador.getWidth(), jFotoColaborador.getHeight(), Image.SCALE_SMOOTH)));
                            }
                            // FOTO DE FRENTE - BANCO DE DADOS
                            byte[] imgBytes = ((byte[]) conectaBAR.rs.getBytes("ImagemFrenteCO"));
                            if (imgBytes != null) {
                                ImageIcon pic = null;
                                pic = new ImageIcon(imgBytes);
                                Image scaled = pic.getImage().getScaledInstance(jFotoColaborador.getWidth(), jFotoColaborador.getHeight(), Image.SCALE_SMOOTH);
                                ImageIcon icon = new ImageIcon(scaled);
                                jFotoColaborador.setIcon(icon);
                            }
                        }
                    } catch (Exception e) {
                    }
                    carregando.dispose(); //Teste tela aguarde
                }
            }; //Teste tela aguarde
            t.start(); //Teste tela aguarde
            conectaLF.desconecta();
            conectaSSA.desconecta();
            conectaITB.desconecta();
            conectaVC.desconecta();
            conectaBAR.desconecta();
        }
    }//GEN-LAST:event_jTabelaColaboradorMouseClicked

    private void jBtProntuarioCrcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtProntuarioCrcActionPerformed
        // TODO add your handling code here:
        if (jIdColaborador.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Informe o código do Colaborador para pesquisa.");
        } else {
            final ViewAguardeProcessando carregando = new ViewAguardeProcessando(); //Teste tela aguarde
            carregando.setVisible(true);//Teste tela aguarde
            Thread t = new Thread() { //Teste tela aguarde
                public void run() { //Teste
            TelaConsultaGlobalFuncionarios objConsultaColabExt = new TelaConsultaGlobalFuncionarios();
                TelaModuloAdmPessoal.jPainelAdmPessoal.add(objConsultaColabExt);
                objConsultaColabExt.show();
                carregando.dispose(); //Teste tela aguarde
                }
            }; //Teste tela aguarde
            t.start(); //Teste tela aguarde
        }
    }//GEN-LAST:event_jBtProntuarioCrcActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtNomeMaeColaborador;
    private javax.swing.JButton jBtPesquisaColaboradorNome;
    private javax.swing.JButton jBtPesquisarMatricula;
    private javax.swing.JButton jBtProntuarioCrc;
    private javax.swing.JComboBox<String> jComboBoxFiltroPesquisa;
    private com.toedter.calendar.JDateChooser jDataNascimentoColaborador;
    private javax.swing.JLabel jFotoColaborador;
    public static javax.swing.JTextField jIdColaborador;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jMatriculaColaborador;
    private javax.swing.JTextField jNomeColaborador;
    private javax.swing.JTextField jNomeMaeColaborador;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JTextField jPesquisaMatricula;
    private javax.swing.JTextField jPesquisaNomeColaborador;
    private javax.swing.JTextField jPesquisarNomeMaeColaborador;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextField jSexo;
    private javax.swing.JTextField jStatusColaborador;
    public static javax.swing.JTable jTabelaColaborador;
    private javax.swing.JLabel jtotalRegistros;
    // End of variables declaration//GEN-END:variables

    public void corCampos() {
        jIdColaborador.setBackground(Color.white);
        jMatriculaColaborador.setBackground(Color.white);
        jSexo.setBackground(Color.white);
        jDataNascimentoColaborador.setBackground(Color.white);
        jStatusColaborador.setBackground(Color.white);
        jNomeColaborador.setBackground(Color.white);
        jNomeMaeColaborador.setBackground(Color.white);
    }

    public void limparCampos() {
        jIdColaborador.setText("");
        jMatriculaColaborador.setText("");
        jSexo.setText("");
        jDataNascimentoColaborador.setDate(null);
        jStatusColaborador.setText("");
        jNomeColaborador.setText("");
        jNomeMaeColaborador.setText("");
        jFotoColaborador.setIcon(null);
    }

    public void preencherTodosColaboradores() {
        // LAURO DE FREITAS
        File arqLF = new File("C:\\SysConp\\ConectaLF.properties");
        if (arqLF.exists()) {
            pesquisarUnidadePrisionalLF();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Lauro de Freitas, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // SALVADOR
        File arqSSA = new File("C:\\SysConp\\ConectaSSA.properties");
        if (arqSSA.exists()) {
            pesquisarUnidadePrisionalSSA();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Salvador, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // ITABUNA
        File arqITB = new File("C:\\SysConp\\ConectaITB.properties");
        if (arqITB.exists()) {
            pesquisarUnidadePrisionalITB();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Itabuna, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // VITÓRIA DA CONQUISTA
        File arqVC = new File("C:\\SysConp\\ConectaVC.properties");
        if (arqVC.exists()) {
            pesquisarUnidadePrisionalVC();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Itabuna, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // BARREIRAS
        File arqBAR = new File("C:\\SysConp\\ConectaBAR.properties");
        if (arqBAR.exists()) {
            pesquisarUnidadePrisionalBAR();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Barreiras, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        //
        count4 = 0;
        count3 = 0;
        count2 = 0;
        count1 = 0;
        count = 0;
        ArrayList dados = new ArrayList();
        ArrayList dadosSSA = new ArrayList();
        ArrayList dadosITB = new ArrayList();
        ArrayList dadosVC = new ArrayList();
        ArrayList dadosBAR = new ArrayList();
        String[] Colunas = new String[]{"Código", "Status", "Matricula", "Nome do Colaborador", "Data Nasc.", "Unidade Prisional",};
        try {
            // LAURO DE FREITAS       
            conectaLF.abrirConexao();
            conectaLF.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE NomeFunc LIKE'%" + jPesquisaNomeColaborador.getText() + "%'");
            conectaLF.rs.first();
            // LAURO DE FREITAS
            do {
                count = count + 1; // Contador de registros                
                dataEntrada = conectaLF.rs.getString("DataNascimento");
                if (dataEntrada != null) {
                    String dia = dataEntrada.substring(8, 10);
                    String mes = dataEntrada.substring(5, 7);
                    String ano = dataEntrada.substring(0, 4);
                    dataEntrada = dia + "/" + mes + "/" + ano;
                }
                dados.add(new Object[]{conectaLF.rs.getInt("IdFunc"), conectaLF.rs.getString("StatusFunc"), conectaLF.rs.getString("MatriculaFunc"), conectaLF.rs.getString("NomeFunc"), dataEntrada, nomeUnidadeLF});
            } while (conectaLF.rs.next());
        } catch (SQLException ex) {
        }
        // SALVADOR
        try {
            conectaSSA.abrirConexao();
            conectaSSA.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE NomeFunc LIKE'%" + jPesquisaNomeColaborador.getText() + "%'");
            conectaSSA.rs.first();
            do {
                count1 = count1 + count;
                dataEntrada1 = conectaSSA.rs.getString("DataNascimento");
                if (dataEntrada1 != null) {
                    String dia1 = dataEntrada1.substring(8, 10);
                    String mes1 = dataEntrada1.substring(5, 7);
                    String ano1 = dataEntrada1.substring(0, 4);
                    dataEntrada1 = dia1 + "/" + mes1 + "/" + ano1;
                }
                dadosSSA.add(new Object[]{conectaSSA.rs.getInt("IdFunc"), conectaSSA.rs.getString("StatusFunc"), conectaSSA.rs.getString("MatriculaFunc"), conectaSSA.rs.getString("NomeFunc"), dataEntrada1, nomeUnidadeSSA});
                dados.addAll(dadosSSA);
            } while (conectaSSA.rs.next());
        } catch (Exception e) {
        }
        // ITABUNA
        try {
            conectaITB.abrirConexao();
            conectaITB.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE NomeFunc LIKE'%" + jPesquisaNomeColaborador.getText() + "%'");
            conectaITB.rs.first();
            do {
                count2 = count2 + count1 + count;
                dataEntrada2 = conectaITB.rs.getString("DataNascimento");
                if (dataEntrada2 != null) {
                    String dia2 = dataEntrada2.substring(8, 10);
                    String mes2 = dataEntrada2.substring(5, 7);
                    String ano2 = dataEntrada2.substring(0, 4);
                    dataEntrada2 = dia2 + "/" + mes2 + "/" + ano2;
                }
                dadosITB.add(new Object[]{conectaITB.rs.getInt("IdFunc"), conectaITB.rs.getString("StatusFunc"), conectaITB.rs.getString("MatriculaFunc"), conectaITB.rs.getString("NomeFunc"), dataEntrada2, nomeUnidadeITB});
                dados.addAll(dadosITB);
            } while (conectaITB.rs.next());
        } catch (Exception e) {
        }
        // VITORIA DA CONQUISTA
        try {
            conectaVC.abrirConexao();
            conectaVC.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE NomeFunc LIKE'%" + jPesquisaNomeColaborador.getText() + "%'");
            conectaVC.rs.first();
            do {
                count3 = count3 + count2 + count1 + count;
                dataEntrada3 = conectaVC.rs.getString("DataNascimento");
                if (dataEntrada3 != null) {
                    String dia3 = dataEntrada3.substring(8, 10);
                    String mes3 = dataEntrada3.substring(5, 7);
                    String ano3 = dataEntrada3.substring(0, 4);
                    dataEntrada3 = dia3 + "/" + mes3 + "/" + ano3;
                }
                jtotalRegistros.setText(Integer.toString(count3)); // Converter inteiro em string para exibir na tela
                dadosVC.add(new Object[]{conectaVC.rs.getInt("IdFunc"), conectaVC.rs.getString("StatusFunc"), conectaVC.rs.getString("MatriculaFunc"), conectaVC.rs.getString("NomeFunc"), dataEntrada3, nomeUnidadeVC});
                dados.addAll(dadosVC);
            } while (conectaVC.rs.next());
        } catch (Exception e) {
        }
        // BARREIRAS
        try {
            conectaBAR.abrirConexao();
            conectaBAR.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE NomeFunc LIKE'%" + jPesquisaNomeColaborador.getText() + "%'");
            conectaBAR.rs.first();
            do {
                count4 = count4 + count3 + count2 + count1 + count;
                dataEntrada4 = conectaBAR.rs.getString("DataNascimento");
                if (dataEntrada != null) {
                    String dia3 = dataEntrada4.substring(8, 10);
                    String mes3 = dataEntrada4.substring(5, 7);
                    String ano3 = dataEntrada4.substring(0, 4);
                    dataEntrada4 = dia3 + "/" + mes3 + "/" + ano3;
                }
                jtotalRegistros.setText(Integer.toString(count4)); // Converter inteiro em string para exibir na tela
                dadosBAR.add(new Object[]{conectaBAR.rs.getInt("IdFunc"), conectaBAR.rs.getString("StatusFunc"), conectaBAR.rs.getString("MatriculaFunc"), conectaBAR.rs.getString("NomeFunc"), dataEntrada4, nomeUnidadeBAR});
                dados.addAll(dadosBAR);
            } while (conectaBAR.rs.next());
        } catch (Exception e) {
            if (dados.equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Não existem dados a serem EXIBIDOS !!!");
            }
        }
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTabelaColaborador.setRowSorter(new TableRowSorter(modelo)); //FAZER ORDENAMENTO NA TABLEA        
        jTabelaColaborador.setModel(modelo);
        jTabelaColaborador.getColumnModel().getColumn(0).setPreferredWidth(70);
        jTabelaColaborador.getColumnModel().getColumn(0).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(1).setPreferredWidth(100);
        jTabelaColaborador.getColumnModel().getColumn(1).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(2).setPreferredWidth(80);
        jTabelaColaborador.getColumnModel().getColumn(2).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(3).setPreferredWidth(400);
        jTabelaColaborador.getColumnModel().getColumn(3).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(4).setPreferredWidth(80);
        jTabelaColaborador.getColumnModel().getColumn(4).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(5).setPreferredWidth(450);
        jTabelaColaborador.getColumnModel().getColumn(5).setResizable(false);
        jTabelaColaborador.getTableHeader().setReorderingAllowed(false);
        jTabelaColaborador.setAutoResizeMode(jTabelaColaborador.AUTO_RESIZE_OFF);
        jTabelaColaborador.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        alinharCamposTabelaProntuario();
        conectaBAR.desconecta();
    }

    public void pesquisarColaboradoresAtivos() {
        // LAURO DE FREITAS
        File arqLF = new File("C:\\SysConp\\ConectaLF.properties");
        if (arqLF.exists()) {
            pesquisarUnidadePrisionalLF();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Lauro de Freitas, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // SALVADOR
        File arqSSA = new File("C:\\SysConp\\ConectaSSA.properties");
        if (arqSSA.exists()) {
            pesquisarUnidadePrisionalSSA();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Salvador, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // ITABUNA
        File arqITB = new File("C:\\SysConp\\ConectaITB.properties");
        if (arqITB.exists()) {
            pesquisarUnidadePrisionalITB();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Itabuna, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // VITÓRIA DA CONQUISTA
        File arqVC = new File("C:\\SysConp\\ConectaVC.properties");
        if (arqVC.exists()) {
            pesquisarUnidadePrisionalVC();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Itabuna, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // BARREIRAS
        File arqBAR = new File("C:\\SysConp\\ConectaBAR.properties");
        if (arqBAR.exists()) {
            pesquisarUnidadePrisionalBAR();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Barreiras, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        //
        count4 = 0;
        count3 = 0;
        count2 = 0;
        count1 = 0;
        count = 0;
        ArrayList dados = new ArrayList();
        ArrayList dadosSSA = new ArrayList();
        ArrayList dadosITB = new ArrayList();
        ArrayList dadosVC = new ArrayList();
        ArrayList dadosBAR = new ArrayList();
        String[] Colunas = new String[]{"Código", "Status", "Matricula", "Nome do Colaborador", "Data Nasc.", "Unidade Prisional",};
        try {
            // LAURO DE FREITAS       
            conectaLF.abrirConexao();
            conectaLF.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE NomeFunc LIKE'%" + jPesquisaNomeColaborador.getText() + "%' "
                    + "AND StatusFunc='" + pSTATUS_ativo + "' ");
            conectaLF.rs.first();
            // LAURO DE FREITAS
            do {
                count = count + 1; // Contador de registros                
                dataEntrada = conectaLF.rs.getString("DataNascimento");
                if (dataEntrada != null) {
                    String dia = dataEntrada.substring(8, 10);
                    String mes = dataEntrada.substring(5, 7);
                    String ano = dataEntrada.substring(0, 4);
                    dataEntrada = dia + "/" + mes + "/" + ano;
                }
                dados.add(new Object[]{conectaLF.rs.getInt("IdFunc"), conectaLF.rs.getString("StatusFunc"), conectaLF.rs.getString("MatriculaFunc"), conectaLF.rs.getString("NomeFunc"), dataEntrada, nomeUnidadeLF});
            } while (conectaLF.rs.next());
        } catch (SQLException ex) {
        }
        // SALVADOR
        try {
            conectaSSA.abrirConexao();
            conectaSSA.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE NomeFunc LIKE'%" + jPesquisaNomeColaborador.getText() + "%' "
                    + "AND StatusFunc='" + pSTATUS_ativo + "' ");
            conectaSSA.rs.first();
            do {
                count1 = count1 + count;
                dataEntrada1 = conectaSSA.rs.getString("DataNascimento");
                if (dataEntrada1 != null) {
                    String dia1 = dataEntrada1.substring(8, 10);
                    String mes1 = dataEntrada1.substring(5, 7);
                    String ano1 = dataEntrada1.substring(0, 4);
                    dataEntrada1 = dia1 + "/" + mes1 + "/" + ano1;
                }
                dadosSSA.add(new Object[]{conectaSSA.rs.getInt("IdFunc"), conectaSSA.rs.getString("StatusFunc"), conectaSSA.rs.getString("MatriculaFunc"), conectaSSA.rs.getString("NomeFunc"), dataEntrada1, nomeUnidadeSSA});
                dados.addAll(dadosSSA);
            } while (conectaSSA.rs.next());
        } catch (Exception e) {
        }
        // ITABUNA
        try {
            conectaITB.abrirConexao();
            conectaITB.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE NomeFunc LIKE'%" + jPesquisaNomeColaborador.getText() + "%' "
                    + "AND StatusFunc='" + pSTATUS_ativo + "' ");
            conectaITB.rs.first();
            do {
                count2 = count2 + count1 + count;
                dataEntrada2 = conectaITB.rs.getString("DataNascimento");
                if (dataEntrada2 != null) {
                    String dia2 = dataEntrada2.substring(8, 10);
                    String mes2 = dataEntrada2.substring(5, 7);
                    String ano2 = dataEntrada2.substring(0, 4);
                    dataEntrada2 = dia2 + "/" + mes2 + "/" + ano2;
                }
                dadosITB.add(new Object[]{conectaITB.rs.getInt("IdFunc"), conectaITB.rs.getString("StatusFunc"), conectaITB.rs.getString("MatriculaFunc"), conectaITB.rs.getString("NomeFunc"), dataEntrada2, nomeUnidadeITB});
                dados.addAll(dadosITB);
            } while (conectaITB.rs.next());
        } catch (Exception e) {
        }
        // VITORIA DA CONQUISTA
        try {
            conectaVC.abrirConexao();
            conectaVC.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE NomeFunc LIKE'%" + jPesquisaNomeColaborador.getText() + "%' "
                    + "AND StatusFunc='" + pSTATUS_ativo + "' ");
            conectaVC.rs.first();
            do {
                count3 = count3 + count2 + count1 + count;
                dataEntrada3 = conectaVC.rs.getString("DataNascimento");
                if (dataEntrada3 != null) {
                    String dia3 = dataEntrada3.substring(8, 10);
                    String mes3 = dataEntrada3.substring(5, 7);
                    String ano3 = dataEntrada3.substring(0, 4);
                    dataEntrada3 = dia3 + "/" + mes3 + "/" + ano3;
                }
                jtotalRegistros.setText(Integer.toString(count3)); // Converter inteiro em string para exibir na tela
                dadosVC.add(new Object[]{conectaVC.rs.getInt("IdFunc"), conectaVC.rs.getString("StatusFunc"), conectaVC.rs.getString("MatriculaFunc"), conectaVC.rs.getString("NomeFunc"), dataEntrada3, nomeUnidadeVC});
                dados.addAll(dadosVC);
            } while (conectaVC.rs.next());
        } catch (Exception e) {
        }
        // BARREIRAS
        try {
            conectaBAR.abrirConexao();
            conectaBAR.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE NomeFunc LIKE'%" + jPesquisaNomeColaborador.getText() + "%' "
                    + "AND StatusFunc='" + pSTATUS_ativo + "' ");
            conectaBAR.rs.first();
            do {
                count4 = count4 + count3 + count2 + count1 + count;
                dataEntrada4 = conectaBAR.rs.getString("DataNascimento");
                if (dataEntrada4 != null) {
                    String dia3 = dataEntrada4.substring(8, 10);
                    String mes3 = dataEntrada4.substring(5, 7);
                    String ano3 = dataEntrada4.substring(0, 4);
                    dataEntrada4 = dia3 + "/" + mes3 + "/" + ano3;
                }
                jtotalRegistros.setText(Integer.toString(count4)); // Converter inteiro em string para exibir na tela
                dadosBAR.add(new Object[]{conectaBAR.rs.getInt("IdFunc"), conectaBAR.rs.getString("StatusFunc"), conectaBAR.rs.getString("MatriculaFunc"), conectaBAR.rs.getString("NomeFunc"), dataEntrada4, nomeUnidadeBAR});
                dados.addAll(dadosBAR);
            } while (conectaBAR.rs.next());
        } catch (Exception e) {
            if (dados.equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Não existem dados a serem EXIBIDOS !!!");
            }
        }
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTabelaColaborador.setRowSorter(new TableRowSorter(modelo)); //FAZER ORDENAMENTO NA TABLEA        
        jTabelaColaborador.setModel(modelo);
        jTabelaColaborador.getColumnModel().getColumn(0).setPreferredWidth(70);
        jTabelaColaborador.getColumnModel().getColumn(0).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(1).setPreferredWidth(100);
        jTabelaColaborador.getColumnModel().getColumn(1).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(2).setPreferredWidth(80);
        jTabelaColaborador.getColumnModel().getColumn(2).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(3).setPreferredWidth(400);
        jTabelaColaborador.getColumnModel().getColumn(3).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(4).setPreferredWidth(80);
        jTabelaColaborador.getColumnModel().getColumn(4).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(5).setPreferredWidth(450);
        jTabelaColaborador.getColumnModel().getColumn(5).setResizable(false);
        jTabelaColaborador.getTableHeader().setReorderingAllowed(false);
        jTabelaColaborador.setAutoResizeMode(jTabelaColaborador.AUTO_RESIZE_OFF);
        jTabelaColaborador.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        alinharCamposTabelaProntuario();
        conectaBAR.desconecta();
    }

    public void pesquisarColaboradoresInativos() {
        // LAURO DE FREITAS
        File arqLF = new File("C:\\SysConp\\ConectaLF.properties");
        if (arqLF.exists()) {
            pesquisarUnidadePrisionalLF();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Lauro de Freitas, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // SALVADOR
        File arqSSA = new File("C:\\SysConp\\ConectaSSA.properties");
        if (arqSSA.exists()) {
            pesquisarUnidadePrisionalSSA();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Salvador, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // ITABUNA
        File arqITB = new File("C:\\SysConp\\ConectaITB.properties");
        if (arqITB.exists()) {
            pesquisarUnidadePrisionalITB();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Itabuna, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // VITÓRIA DA CONQUISTA
        File arqVC = new File("C:\\SysConp\\ConectaVC.properties");
        if (arqVC.exists()) {
            pesquisarUnidadePrisionalVC();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Itabuna, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // BARREIRAS
        File arqBAR = new File("C:\\SysConp\\ConectaBAR.properties");
        if (arqBAR.exists()) {
            pesquisarUnidadePrisionalBAR();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Barreiras, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        //
        count4 = 0;
        count3 = 0;
        count2 = 0;
        count1 = 0;
        count = 0;
        ArrayList dados = new ArrayList();
        ArrayList dadosSSA = new ArrayList();
        ArrayList dadosITB = new ArrayList();
        ArrayList dadosVC = new ArrayList();
        ArrayList dadosBAR = new ArrayList();
        String[] Colunas = new String[]{"Código", "Status", "Matricula", "Nome do Colaborador", "Data Nasc.", "Unidade Prisional",};
        try {
            // LAURO DE FREITAS       
            conectaLF.abrirConexao();
            conectaLF.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE NomeFunc LIKE'%" + jPesquisaNomeColaborador.getText() + "%' "
                    + "AND StatusFunc='" + pSTATUS_inativo + "' ");
            conectaLF.rs.first();
            // LAURO DE FREITAS
            do {
                count = count + 1; // Contador de registros                
                dataEntrada = conectaLF.rs.getString("DataNascimento");
                if (dataEntrada != null) {
                    String dia = dataEntrada.substring(8, 10);
                    String mes = dataEntrada.substring(5, 7);
                    String ano = dataEntrada.substring(0, 4);
                    dataEntrada = dia + "/" + mes + "/" + ano;
                }
                dados.add(new Object[]{conectaLF.rs.getInt("IdFunc"), conectaLF.rs.getString("StatusFunc"), conectaLF.rs.getString("MatriculaFunc"), conectaLF.rs.getString("NomeFunc"), dataEntrada, nomeUnidadeLF});
            } while (conectaLF.rs.next());
        } catch (SQLException ex) {
        }
        // SALVADOR
        try {
            conectaSSA.abrirConexao();
            conectaSSA.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE NomeFunc LIKE'%" + jPesquisaNomeColaborador.getText() + "%' "
                    + "AND StatusFunc='" + pSTATUS_inativo + "' ");
            conectaSSA.rs.first();
            do {
                count1 = count1 + count;
                dataEntrada1 = conectaSSA.rs.getString("DataNascimento");
                if (dataEntrada1 != null) {
                    String dia1 = dataEntrada1.substring(8, 10);
                    String mes1 = dataEntrada1.substring(5, 7);
                    String ano1 = dataEntrada1.substring(0, 4);
                    dataEntrada1 = dia1 + "/" + mes1 + "/" + ano1;
                }
                dadosSSA.add(new Object[]{conectaSSA.rs.getInt("IdFunc"), conectaSSA.rs.getString("StatusFunc"), conectaSSA.rs.getString("MatriculaFunc"), conectaSSA.rs.getString("NomeFunc"), dataEntrada1, nomeUnidadeSSA});
                dados.addAll(dadosSSA);
            } while (conectaSSA.rs.next());
        } catch (Exception e) {
        }
        // ITABUNA
        try {
            conectaITB.abrirConexao();
            conectaITB.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR  "
                    + "WHERE NomeFunc LIKE'%" + jPesquisaNomeColaborador.getText() + "%' "
                    + "AND StatusFunc='" + pSTATUS_inativo + "' ");
            conectaITB.rs.first();
            do {
                count2 = count2 + count1 + count;
                dataEntrada2 = conectaITB.rs.getString("DataNascimento");
                if (dataEntrada2 != null) {
                    String dia2 = dataEntrada2.substring(8, 10);
                    String mes2 = dataEntrada2.substring(5, 7);
                    String ano2 = dataEntrada2.substring(0, 4);
                    dataEntrada2 = dia2 + "/" + mes2 + "/" + ano2;
                }
                dadosITB.add(new Object[]{conectaITB.rs.getInt("IdFunc"), conectaITB.rs.getString("StatusFunc"), conectaITB.rs.getString("MatriculaFunc"), conectaITB.rs.getString("NomeFunc"), dataEntrada2, nomeUnidadeITB});
                dados.addAll(dadosITB);
            } while (conectaITB.rs.next());
        } catch (Exception e) {
        }
        // VITORIA DA CONQUISTA
        try {
            conectaVC.abrirConexao();
            conectaVC.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE NomeFunc LIKE'%" + jPesquisaNomeColaborador.getText() + "%' "
                    + "AND StatusFunc='" + pSTATUS_inativo + "' ");
            conectaVC.rs.first();
            do {
                count3 = count3 + count2 + count1 + count;
                dataEntrada3 = conectaVC.rs.getString("DataNascimento");
                if (dataEntrada3 != null) {
                    String dia3 = dataEntrada3.substring(8, 10);
                    String mes3 = dataEntrada3.substring(5, 7);
                    String ano3 = dataEntrada3.substring(0, 4);
                    dataEntrada3 = dia3 + "/" + mes3 + "/" + ano3;
                }
                jtotalRegistros.setText(Integer.toString(count3)); // Converter inteiro em string para exibir na tela
                dadosVC.add(new Object[]{conectaVC.rs.getInt("IdFunc"), conectaVC.rs.getString("StatusFunc"), conectaVC.rs.getString("MatriculaFunc"), conectaVC.rs.getString("NomeFunc"), dataEntrada3, nomeUnidadeVC});
                dados.addAll(dadosVC);
            } while (conectaVC.rs.next());
        } catch (Exception e) {
        }
        // BARREIRAS
        try {
            conectaBAR.abrirConexao();
            conectaBAR.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE NomeFunc LIKE'%" + jPesquisaNomeColaborador.getText() + "%' "
                    + "AND StatusFunc='" + pSTATUS_inativo + "' ");
            conectaBAR.rs.first();
            do {
                count4 = count4 + count3 + count2 + count1 + count;
                dataEntrada4 = conectaBAR.rs.getString("DataNascimento");
                if (dataEntrada4 != null) {
                    String dia3 = dataEntrada4.substring(8, 10);
                    String mes3 = dataEntrada4.substring(5, 7);
                    String ano3 = dataEntrada4.substring(0, 4);
                    dataEntrada4 = dia3 + "/" + mes3 + "/" + ano3;
                }
                jtotalRegistros.setText(Integer.toString(count4)); // Converter inteiro em string para exibir na tela
                dadosBAR.add(new Object[]{conectaBAR.rs.getInt("IdFunc"), conectaBAR.rs.getString("StatusFunc"), conectaBAR.rs.getString("MatriculaFunc"), conectaBAR.rs.getString("NomeFunc"), dataEntrada4, nomeUnidadeBAR});
                dados.addAll(dadosBAR);
            } while (conectaBAR.rs.next());
        } catch (Exception e) {
            if (dados.equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Não existem dados a serem EXIBIDOS !!!");
            }
        }
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTabelaColaborador.setRowSorter(new TableRowSorter(modelo)); //FAZER ORDENAMENTO NA TABLEA        
        jTabelaColaborador.setModel(modelo);
        jTabelaColaborador.getColumnModel().getColumn(0).setPreferredWidth(70);
        jTabelaColaborador.getColumnModel().getColumn(0).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(1).setPreferredWidth(100);
        jTabelaColaborador.getColumnModel().getColumn(1).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(2).setPreferredWidth(80);
        jTabelaColaborador.getColumnModel().getColumn(2).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(3).setPreferredWidth(400);
        jTabelaColaborador.getColumnModel().getColumn(3).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(4).setPreferredWidth(80);
        jTabelaColaborador.getColumnModel().getColumn(4).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(5).setPreferredWidth(450);
        jTabelaColaborador.getColumnModel().getColumn(5).setResizable(false);
        jTabelaColaborador.getTableHeader().setReorderingAllowed(false);
        jTabelaColaborador.setAutoResizeMode(jTabelaColaborador.AUTO_RESIZE_OFF);
        jTabelaColaborador.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        alinharCamposTabelaProntuario();
        conectaBAR.desconecta();
    }

    public void pesquisarColaboradorMatricula() {
        // LAURO DE FREITAS
        File arqLF = new File("C:\\SysConp\\ConectaLF.properties");
        if (arqLF.exists()) {
            pesquisarUnidadePrisionalLF();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Lauro de Freitas, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // SALVADOR
        File arqSSA = new File("C:\\SysConp\\ConectaSSA.properties");
        if (arqSSA.exists()) {
            pesquisarUnidadePrisionalSSA();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Salvador, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // ITABUNA
        File arqITB = new File("C:\\SysConp\\ConectaITB.properties");
        if (arqITB.exists()) {
            pesquisarUnidadePrisionalITB();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Itabuna, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // VITÓRIA DA CONQUISTA
        File arqVC = new File("C:\\SysConp\\ConectaVC.properties");
        if (arqVC.exists()) {
            pesquisarUnidadePrisionalVC();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Itabuna, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // BARREIRAS
        File arqBAR = new File("C:\\SysConp\\ConectaBAR.properties");
        if (arqBAR.exists()) {
            pesquisarUnidadePrisionalBAR();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Itabuna, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        count4 = 0;
        count3 = 0;
        count2 = 0;
        count1 = 0;
        count = 0;
        ArrayList dados = new ArrayList();
        ArrayList dadosSSA = new ArrayList();
        ArrayList dadosITB = new ArrayList();
        ArrayList dadosVC = new ArrayList();
        ArrayList dadosBAR = new ArrayList();
        String[] Colunas = new String[]{"Código", "Status", "Matricula", "Nome do Colaborador", "Data Nasc.", "Unidade Prisional"};
        try {
            // LAURO DE FREITAS
            conectaLF.abrirConexao();
            conectaLF.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE MatriculaFunc='" + jPesquisaMatricula.getText() + "'");
            conectaLF.rs.first();
            // LAURO DE FREITAS
            do {
                count = count + 1; // Contador de registros                
                dataEntrada = conectaLF.rs.getString("DataNascimento");
                if (dataEntrada != null) {
                    String dia = dataEntrada.substring(8, 10);
                    String mes = dataEntrada.substring(5, 7);
                    String ano = dataEntrada.substring(0, 4);
                    dataEntrada = dia + "/" + mes + "/" + ano;
                }
                dados.add(new Object[]{conectaLF.rs.getInt("IdFunc"), conectaLF.rs.getString("StatusFunc"), conectaLF.rs.getString("MatriculaFunc"), conectaLF.rs.getString("NomeFunc"), dataEntrada, nomeUnidadeLF});
            } while (conectaLF.rs.next());
        } catch (SQLException ex) {
        }
        // SALVADOR
        try {
            conectaSSA.abrirConexao();
            conectaSSA.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE MatriculaFunc='" + jPesquisaMatricula.getText() + "'");
            conectaSSA.rs.first();
            do {
                count1 = count1 + count;
                dataEntrada1 = conectaSSA.rs.getString("DataNascimento");
                if (dataEntrada1 != null) {
                    String dia1 = dataEntrada1.substring(8, 10);
                    String mes1 = dataEntrada1.substring(5, 7);
                    String ano1 = dataEntrada1.substring(0, 4);
                    dataEntrada1 = dia1 + "/" + mes1 + "/" + ano1;
                }
                dadosSSA.add(new Object[]{conectaSSA.rs.getInt("IdFunc"), conectaSSA.rs.getString("StatusFunc"), conectaSSA.rs.getString("MatriculaFunc"), conectaSSA.rs.getString("NomeFunc"), dataEntrada1, nomeUnidadeSSA});
                dados.addAll(dadosSSA);
            } while (conectaSSA.rs.next());
        } catch (Exception e) {
        }
        // ITABUNA
        try {
            conectaITB.abrirConexao();
            conectaITB.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE MatriculaFunc='" + jPesquisaMatricula.getText() + "'");
            conectaITB.rs.first();
            do {
                count2 = count2 + count1 + count;
                dataEntrada2 = conectaITB.rs.getString("DataNascimento");
                if (dataEntrada2 != null) {
                    String dia2 = dataEntrada2.substring(8, 10);
                    String mes2 = dataEntrada2.substring(5, 7);
                    String ano2 = dataEntrada2.substring(0, 4);
                    dataEntrada2 = dia2 + "/" + mes2 + "/" + ano2;
                }
                dadosITB.add(new Object[]{conectaITB.rs.getInt("IdFunc"), conectaITB.rs.getString("StatusFunc"), conectaITB.rs.getString("MatriculaFunc"), conectaITB.rs.getString("NomeFunc"), dataEntrada2, nomeUnidadeITB});
                dados.addAll(dadosITB);
            } while (conectaITB.rs.next());
        } catch (Exception e) {
        }
        // VITORIA DA CONQUISTA
        try {
            conectaVC.abrirConexao();
            conectaVC.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE MatriculaFunc='" + jPesquisaMatricula.getText() + "'");
            conectaVC.rs.first();
            do {
                count3 = count3 + count2 + count1 + count;
                dataEntrada3 = conectaVC.rs.getString("DataNascimento");
                if (dataEntrada3 != null) {
                    String dia3 = dataEntrada3.substring(8, 10);
                    String mes3 = dataEntrada3.substring(5, 7);
                    String ano3 = dataEntrada3.substring(0, 4);
                    dataEntrada3 = dia3 + "/" + mes3 + "/" + ano3;
                }
                jtotalRegistros.setText(Integer.toString(count3)); // Converter inteiro em string para exibir na tela
                dadosVC.add(new Object[]{conectaVC.rs.getInt("IdFunc"), conectaVC.rs.getString("StatusFunc"), conectaVC.rs.getString("MatriculaFunc"), conectaVC.rs.getString("NomeFunc"), dataEntrada3, nomeUnidadeVC});
                dados.addAll(dadosVC);
            } while (conectaVC.rs.next());
        } catch (Exception e) {
        }
        // BARREIRAS
        try {
            conectaBAR.abrirConexao();
            conectaBAR.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE MatriculaFunc='" + jPesquisaMatricula.getText() + "'");
            conectaBAR.rs.first();
            do {
                count4 = count4 + count3 + count2 + count1 + count;
                dataEntrada4 = conectaBAR.rs.getString("DataNascimento");
                if (dataEntrada4 != null) {
                    String dia3 = dataEntrada4.substring(8, 10);
                    String mes3 = dataEntrada4.substring(5, 7);
                    String ano3 = dataEntrada4.substring(0, 4);
                    dataEntrada4 = dia3 + "/" + mes3 + "/" + ano3;
                }
                jtotalRegistros.setText(Integer.toString(count4)); // Converter inteiro em string para exibir na tela
                dadosBAR.add(new Object[]{conectaBAR.rs.getInt("IdFunc"), conectaBAR.rs.getString("StatusFunc"), conectaBAR.rs.getString("MatriculaFunc"), conectaBAR.rs.getString("NomeFunc"), dataEntrada4, nomeUnidadeBAR});
                dados.addAll(dadosBAR);
            } while (conectaBAR.rs.next());
        } catch (Exception e) {
            if (dados.equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Não existem dados a serem EXIBIDOS !!!");
            }
        }
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTabelaColaborador.setRowSorter(new TableRowSorter(modelo)); //FAZER ORDENAMENTO NA TABLEA        
        jTabelaColaborador.setModel(modelo);
        jTabelaColaborador.getColumnModel().getColumn(0).setPreferredWidth(70);
        jTabelaColaborador.getColumnModel().getColumn(0).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(1).setPreferredWidth(100);
        jTabelaColaborador.getColumnModel().getColumn(1).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(2).setPreferredWidth(80);
        jTabelaColaborador.getColumnModel().getColumn(2).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(3).setPreferredWidth(400);
        jTabelaColaborador.getColumnModel().getColumn(3).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(4).setPreferredWidth(80);
        jTabelaColaborador.getColumnModel().getColumn(4).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(5).setPreferredWidth(450);
        jTabelaColaborador.getColumnModel().getColumn(5).setResizable(false);
        jTabelaColaborador.getTableHeader().setReorderingAllowed(false);
        jTabelaColaborador.setAutoResizeMode(jTabelaColaborador.AUTO_RESIZE_OFF);
        jTabelaColaborador.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        alinharCamposTabelaProntuario();
        conectaBAR.desconecta();
    }

    public void pesquisarMaeColaborador() {
        // LAURO DE FREITAS
        File arqLF = new File("C:\\SysConp\\ConectaLF.properties");
        if (arqLF.exists()) {
            pesquisarUnidadePrisionalLF();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Lauro de Freitas, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // SALVADOR
        File arqSSA = new File("C:\\SysConp\\ConectaSSA.properties");
        if (arqSSA.exists()) {
            pesquisarUnidadePrisionalSSA();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Salvador, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // ITABUNA
        File arqITB = new File("C:\\SysConp\\ConectaITB.properties");
        if (arqITB.exists()) {
            pesquisarUnidadePrisionalITB();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Itabuna, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // VITÓRIA DA CONQUISTA
        File arqVC = new File("C:\\SysConp\\ConectaVC.properties");
        if (arqVC.exists()) {
            pesquisarUnidadePrisionalVC();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Itabuna, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // BARREIRAS
        File arqBAR = new File("C:\\SysConp\\ConectaBAR.properties");
        if (arqBAR.exists()) {
            pesquisarUnidadePrisionalBAR();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Barreiras, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        count4 = 0;
        count3 = 0;
        count2 = 0;
        count1 = 0;
        count = 0;
        ArrayList dados = new ArrayList();
        ArrayList dadosSSA = new ArrayList();
        ArrayList dadosITB = new ArrayList();
        ArrayList dadosVC = new ArrayList();
        ArrayList dadosBAR = new ArrayList();
        String[] Colunas = new String[]{"Código", "Status", "Matricula", "Nome do Colaborador", "Data Nasc.", "Unidade Prisional"};
        try {
            // LAURO DE FREITAS
            conectaLF.abrirConexao();
            conectaLF.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE NomeMae LIKE'%" + jPesquisarNomeMaeColaborador.getText() + "%'");
            conectaLF.rs.first();
            // LAURO DE FREITAS
            do {
                count = count + 1; // Contador de registros                
                dataEntrada = conectaLF.rs.getString("DataNascimento");
                if (dataEntrada != null) {
                    String dia = dataEntrada.substring(8, 10);
                    String mes = dataEntrada.substring(5, 7);
                    String ano = dataEntrada.substring(0, 4);
                    dataEntrada = dia + "/" + mes + "/" + ano;
                }
                dados.add(new Object[]{conectaLF.rs.getInt("IdFunc"), conectaLF.rs.getString("StatusFunc"), conectaLF.rs.getString("MatriculaFunc"), conectaLF.rs.getString("NomeFunc"), dataEntrada, nomeUnidadeLF});
            } while (conectaLF.rs.next());
        } catch (SQLException ex) {
        }
        // SALVADOR
        try {
            conectaSSA.abrirConexao();
            conectaSSA.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE NomeMae LIKE'%" + jPesquisarNomeMaeColaborador.getText() + "%'");
            conectaSSA.rs.first();
            do {
                count1 = count1 + count;
                dataEntrada1 = conectaSSA.rs.getString("DataNascimento");
                if (dataEntrada1 != null) {
                    String dia1 = dataEntrada1.substring(8, 10);
                    String mes1 = dataEntrada1.substring(5, 7);
                    String ano1 = dataEntrada1.substring(0, 4);
                    dataEntrada1 = dia1 + "/" + mes1 + "/" + ano1;
                }
                dadosSSA.add(new Object[]{conectaSSA.rs.getInt("IdFunc"), conectaSSA.rs.getString("StatusFunc"), conectaSSA.rs.getString("MatriculaFunc"), conectaSSA.rs.getString("NomeFunc"), dataEntrada1, nomeUnidadeSSA});
                dados.addAll(dadosSSA);
            } while (conectaSSA.rs.next());
        } catch (Exception e) {
        }
        // ITABUNA
        try {
            conectaITB.abrirConexao();
            conectaITB.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE NomeMae LIKE'%" + jPesquisarNomeMaeColaborador.getText() + "%'");
            conectaITB.rs.first();
            do {
                count2 = count2 + count1 + count;
                dataEntrada2 = conectaITB.rs.getString("DataNascimento");
                if (dataEntrada2 != null) {
                    String dia2 = dataEntrada2.substring(8, 10);
                    String mes2 = dataEntrada2.substring(5, 7);
                    String ano2 = dataEntrada2.substring(0, 4);
                    dataEntrada2 = dia2 + "/" + mes2 + "/" + ano2;
                }
                dadosITB.add(new Object[]{conectaITB.rs.getInt("IdFunc"), conectaITB.rs.getString("StatusFunc"), conectaITB.rs.getString("MatriculaFunc"), conectaITB.rs.getString("NomeFunc"), dataEntrada2, nomeUnidadeITB});
                dados.addAll(dadosITB);
            } while (conectaITB.rs.next());
        } catch (Exception e) {
        }
        // VITORIA DA CONQUISTA
        try {
            conectaVC.abrirConexao();
            conectaVC.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE NomeMae LIKE'%" + jPesquisarNomeMaeColaborador.getText() + "%'");
            conectaVC.rs.first();
            do {
                count3 = count3 + count2 + count1 + count;
                dataEntrada3 = conectaVC.rs.getString("DataNascimento");
                if (dataEntrada3 != null) {
                    String dia3 = dataEntrada3.substring(8, 10);
                    String mes3 = dataEntrada3.substring(5, 7);
                    String ano3 = dataEntrada3.substring(0, 4);
                    dataEntrada3 = dia3 + "/" + mes3 + "/" + ano3;
                }
                dadosVC.add(new Object[]{conectaVC.rs.getInt("IdFunc"), conectaVC.rs.getString("StatusFunc"), conectaVC.rs.getString("MatriculaFunc"), conectaVC.rs.getString("NomeFunc"), dataEntrada3, nomeUnidadeVC});
                dados.addAll(dadosVC);
            } while (conectaVC.rs.next());
        } catch (Exception e) {
        }
        // BARREIRAS
        try {
            conectaBAR.abrirConexao();
            conectaBAR.executaSQL("SELECT "
                    + "IdFunc,StatusFunc, "
                    + "MatriculaFunc,NomeFunc, "
                    + "DataNascimento,SexoFunc, "
                    + "NomeMae,ImagemFunc, "
                    + "ImagemFrenteCO "
                    + "FROM COLABORADOR "
                    + "WHERE NomeMae LIKE'%" + jPesquisarNomeMaeColaborador.getText() + "%'");
            conectaBAR.rs.first();
            do {
                count4 = count4 + count3 + count2 + count1 + count;
                dataEntrada4 = conectaITB.rs.getString("DataNascimento");
                if (dataEntrada4 != null) {
                    String dia4 = dataEntrada4.substring(8, 10);
                    String mes4 = dataEntrada4.substring(5, 7);
                    String ano4 = dataEntrada4.substring(0, 4);
                    dataEntrada4 = dia4 + "/" + mes4 + "/" + ano4;
                }
                jtotalRegistros.setText(Integer.toString(count4)); // Converter inteiro em string para exibir na tela
                dadosBAR.add(new Object[]{conectaBAR.rs.getInt("IdFunc"), conectaBAR.rs.getString("StatusFunc"), conectaBAR.rs.getString("MatriculaFunc"), conectaBAR.rs.getString("NomeFunc"), dataEntrada4, nomeUnidadeBAR});
                dados.addAll(dadosBAR);
            } while (conectaBAR.rs.next());
        } catch (Exception e) {
            if (dados.equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Não existem dados a serem EXIBIDOS !!!");
            }
        }
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTabelaColaborador.setRowSorter(new TableRowSorter(modelo)); //FAZER ORDENAMENTO NA TABLEA        
        jTabelaColaborador.setModel(modelo);
        jTabelaColaborador.getColumnModel().getColumn(0).setPreferredWidth(70);
        jTabelaColaborador.getColumnModel().getColumn(0).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(1).setPreferredWidth(100);
        jTabelaColaborador.getColumnModel().getColumn(1).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(2).setPreferredWidth(80);
        jTabelaColaborador.getColumnModel().getColumn(2).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(3).setPreferredWidth(400);
        jTabelaColaborador.getColumnModel().getColumn(3).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(4).setPreferredWidth(80);
        jTabelaColaborador.getColumnModel().getColumn(4).setResizable(false);
        jTabelaColaborador.getColumnModel().getColumn(5).setPreferredWidth(450);
        jTabelaColaborador.getColumnModel().getColumn(5).setResizable(false);
        jTabelaColaborador.getTableHeader().setReorderingAllowed(false);
        jTabelaColaborador.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        alinharCamposTabelaProntuario();
        conectaBAR.desconecta();
    }

    public void alinharCamposTabelaProntuario() {
        DefaultTableCellRenderer esquerda = new DefaultTableCellRenderer();
        DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
        DefaultTableCellRenderer direita = new DefaultTableCellRenderer();
        esquerda.setHorizontalAlignment(SwingConstants.LEFT);
        centralizado.setHorizontalAlignment(SwingConstants.CENTER);
        direita.setHorizontalAlignment(SwingConstants.RIGHT);
        //
        jTabelaColaborador.getColumnModel().getColumn(0).setCellRenderer(centralizado);
        jTabelaColaborador.getColumnModel().getColumn(1).setCellRenderer(centralizado);
        jTabelaColaborador.getColumnModel().getColumn(4).setCellRenderer(centralizado);
    }

    public void pesquisarUnidadePrisionalLF() {
        conectaLF.abrirConexao();
        try {
            conectaLF.executaSQL("SELECT DescricaoUnidade FROM UNIDADE_PENAL_EMPRESA");
            conectaLF.rs.first();
            nomeUnidadeLF = conectaLF.rs.getString("DescricaoUnidade");
        } catch (Exception e) {
        }
        conectaLF.desconecta();
    }

    public void pesquisarUnidadePrisionalSSA() {
        conectaSSA.abrirConexao();
        try {
            conectaSSA.executaSQL("SELECT DescricaoUnidade FROM UNIDADE_PENAL_EMPRESA");
            conectaSSA.rs.first();
            nomeUnidadeSSA = conectaSSA.rs.getString("DescricaoUnidade");
        } catch (Exception e) {
        }
        conectaSSA.desconecta();
    }

    public void pesquisarUnidadePrisionalITB() {
        conectaITB.abrirConexao();
        try {
            conectaITB.executaSQL("SELECT DescricaoUnidade FROM UNIDADE_PENAL_EMPRESA");
            conectaITB.rs.first();
            nomeUnidadeITB = conectaITB.rs.getString("DescricaoUnidade");
        } catch (Exception e) {
        }
        conectaITB.desconecta();
    }

    public void pesquisarUnidadePrisionalVC() {
        conectaVC.abrirConexao();
        try {
            conectaVC.executaSQL("SELECT DescricaoUnidade FROM UNIDADE_PENAL_EMPRESA");
            conectaVC.rs.first();
            nomeUnidadeVC = conectaVC.rs.getString("DescricaoUnidade");
        } catch (Exception e) {
        }
        conectaVC.desconecta();
    }

    public void pesquisarUnidadePrisionalBAR() {
        conectaBAR.abrirConexao();
        try {
            conectaBAR.executaSQL("SELECT DescricaoUnidade FROM UNIDADE_PENAL_EMPRESA");
            conectaBAR.rs.first();
            nomeUnidadeBAR = conectaBAR.rs.getString("DescricaoUnidade");
        } catch (Exception e) {
        }
        conectaBAR.desconecta();
    }
}
