/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestor.Visao;

import gestor.Dao.ConexaoBancoDados;
import gestor.Controle.ControleBaixaLoteKitHigiene;
import gestor.Controle.ControleItensRequisicaoMateriaisInternos;
import gestor.Controle.ControleLogSistema;
import gestor.Controle.ControleProdutosKitLote;
import gestor.Modelo.ItensRequisicaoMateriaisInternos;
import gestor.Modelo.LogSistema;
import gestor.Modelo.ProdutoInternosKitLote;
import static gestor.Visao.TelaLoginSenha.nameUser;
import static gestor.Visao.TelaModuloPrincipal.jDataSistema;
import static gestor.Visao.TelaModuloPrincipal.jHoraSistema;
import static gestor.Visao.TelaMontagemPagamentoKitInterno.pCodigoAlmxarifado;
import static gestor.Visao.TelaMontagemPagamentoKitInterno.idKit;
import static gestor.Visao.TelaMontagemPagamentoKitInterno.jBtCancelarProduto;
import static gestor.Visao.TelaMontagemPagamentoKitInterno.jBtNovoProduto;
import static gestor.Visao.TelaMontagemPagamentoKitInterno.jBtSalvarProduto;
import static gestor.Visao.TelaMontagemPagamentoKitInterno.jCodigoProd;
import static gestor.Visao.TelaMontagemPagamentoKitInterno.jUnidadeProd;
import static gestor.Visao.TelaMontagemPagamentoKitInterno.jQuantidadeProdEstoque;
import static gestor.Visao.TelaMontagemPagamentoKitInterno.jQuantidadeKit;
import static gestor.Visao.TelaMontagemPagamentoKitInterno.jDescricaoProd;
import static gestor.Visao.TelaMontagemPagamentoKitInterno.jIdRegistroComp;
import static gestor.Visao.TelaMontagemPagamentoKitInterno.jQtdAtendida;
import static gestor.Visao.TelaMontagemPagamentoKitInterno.jQuantidadeInternos;
import static gestor.Visao.TelaMontagemPagamentoKitInterno.jTabelaProdutos;
import static gestor.Visao.TelaMontagemPagamentoKitInterno.jtotalInternosSelecionados;
import static gestor.Visao.TelaMontagemPagamentoKitInterno.jtotalProdutosKitInternos;
import java.awt.Color;
import java.awt.Rectangle;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.Currency;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ronal
 */
public class TelaEstoqueProdutosKitBaixaLote extends javax.swing.JDialog {

    ConexaoBancoDados conecta = new ConexaoBancoDados();
    ProdutoInternosKitLote objProdKit = new ProdutoInternosKitLote();
    ControleBaixaLoteKitHigiene CONTROLE = new ControleBaixaLoteKitHigiene();
    //
    ItensRequisicaoMateriaisInternos objItensReqMatInter = new ItensRequisicaoMateriaisInternos();
    // DAR BAIXA ESTOQUE (LOTE_PRODUTOS_AC)
    ControleItensRequisicaoMateriaisInternos CONTROLE_LOTE = new ControleItensRequisicaoMateriaisInternos();
    ControleProdutosKitLote CONTROLE_PRODUTOS = new ControleProdutosKitLote();
    //
    ControleLogSistema controlLog = new ControleLogSistema();
    LogSistema objLogSys = new LogSistema();
    //
    String dataEntrada = "";
    String statusMov = "";
    String horaMov = "";
    String dataModFinal = "";
    //
    double qtdItem = 0;
    String qtdItemTab;
    //
    double qtdItemKit = 0;
    String qtdItemTabKit;
    //
    int count = 0;
    int flag = 0;
    String statusProd = "Ativo";
    float qtdEstoque = 0;
    String modulo = "A";
    String compoeKit = "Sim";
    public static String idProd;
    float qdtKit = 0;
    int qdtInterno = 0;
    float qtdTotal = 0;
    String nomeProduto = "";
    public static String pCODIGO_kit;
    //
    public static int pTOTAL_registros = 0;
    public static int pcodigoProduto;
    public static int pRegistroComp;
    //
    public static int pTOTAL_REGISTROS_pesquisado = 0;
    public static int pTOTAL_REGISTROS_gravado = 0;
    //
    int codProd = 0;
    int codEstoque = 0;
    float saldoEstoque = 0;
    float estoqueAtual = 0;
    int IdRegProdKit = 0;
    String pUtili = "Não";
    String nomeModuloTela3 = "Almoxarifado:Montagem de Pagamento do Kit de Interno:FASE - 3/LOTE";

    /**
     * Creates new form TelaConsultaEstoqueMontagemKit
     */
    public static TelaMontagemPagamentoKitInterno montaKitProd;

    public TelaEstoqueProdutosKitBaixaLote(TelaMontagemPagamentoKitInterno parent, boolean modal) {
        this.montaKitProd = parent;
        this.setModal(modal);
        setLocationRelativeTo(montaKitProd);
        initComponents();
        corCampos();
        bloquearCamposBotoes(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jBtSair = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jBtPesquisaNomeProd = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jCodigoProdPesquisa = new javax.swing.JTextField();
        jCodigoBarraPesquisa = new javax.swing.JTextField();
        jDescricapProdPesquisa = new javax.swing.JTextField();
        jBtPesquisaCodigoProd = new javax.swing.JButton();
        jBtConfirmar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jCheckBoxTodos = new javax.swing.JCheckBox();
        jBtExcluirSelecao = new javax.swing.JButton();
        jBtGravarLote = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabelaProdutosEstoque = new javax.swing.JTable();
        jPanel36 = new javax.swing.JPanel();
        jPanel37 = new javax.swing.JPanel();
        jLabel69 = new javax.swing.JLabel();
        jPanel38 = new javax.swing.JPanel();
        jTOTAL_REGISTROS_selecionados = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jTOTAL_REG_GRAVADO = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("....::: Consulta de Estoque - Almoxarifado Local :::...");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Consulta de Saldo de Estoque/Lançamento em Lote do Produtos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(204, 0, 0))); // NOI18N

        jBtSair.setForeground(new java.awt.Color(204, 0, 0));
        jBtSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/shutdown-icone-6920-16.png"))); // NOI18N
        jBtSair.setText("Sair");
        jBtSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtSairActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Pesquisa Individual", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(0, 0, 204))); // NOI18N

        jBtPesquisaNomeProd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtPesquisaNomeProd.setToolTipText("Pesquisar produto pela descrição.");
        jBtPesquisaNomeProd.setContentAreaFilled(false);
        jBtPesquisaNomeProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtPesquisaNomeProdActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Código");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Código Barra");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Descrição do Produto");

        jCodigoProdPesquisa.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jCodigoProdPesquisa.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jCodigoBarraPesquisa.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jCodigoBarraPesquisa.setToolTipText("Pesquisar produto pelo código de barras");
        jCodigoBarraPesquisa.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jCodigoBarraPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCodigoBarraPesquisaActionPerformed(evt);
            }
        });

        jDescricapProdPesquisa.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jBtPesquisaCodigoProd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtPesquisaCodigoProd.setToolTipText("Pesquisar produto pelo código.");
        jBtPesquisaCodigoProd.setContentAreaFilled(false);
        jBtPesquisaCodigoProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtPesquisaCodigoProdActionPerformed(evt);
            }
        });

        jBtConfirmar.setForeground(new java.awt.Color(0, 102, 0));
        jBtConfirmar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/40_16x16.png"))); // NOI18N
        jBtConfirmar.setText("Confirmar");
        jBtConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtConfirmarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jCodigoProdPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtPesquisaCodigoProd, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBtConfirmar))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(121, 121, 121)
                                        .addComponent(jCodigoBarraPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 96, Short.MAX_VALUE))
                            .addComponent(jDescricapProdPesquisa, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtPesquisaNomeProd, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jBtConfirmar)
                    .addComponent(jCodigoBarraPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtPesquisaCodigoProd)
                    .addComponent(jCodigoProdPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jBtPesquisaNomeProd)
                    .addComponent(jDescricapProdPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Selecionar Todos Registros do Kit", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(0, 102, 0))); // NOI18N

        jCheckBoxTodos.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBoxTodos.setText("Selecionar Todos Registros");
        jCheckBoxTodos.setToolTipText("Pesquisar todos os produtos");
        jCheckBoxTodos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxTodosItemStateChanged(evt);
            }
        });

        jBtExcluirSelecao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/191216104515_16.png"))); // NOI18N
        jBtExcluirSelecao.setText("Excluir");
        jBtExcluirSelecao.setToolTipText("Rxcluir Registro Selecionado");
        jBtExcluirSelecao.setEnabled(false);
        jBtExcluirSelecao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtExcluirSelecaoActionPerformed(evt);
            }
        });

        jBtGravarLote.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/1294_16x16.png"))); // NOI18N
        jBtGravarLote.setText("Gravar");
        jBtGravarLote.setToolTipText("Confirmar Gravação em Lote");
        jBtGravarLote.setEnabled(false);
        jBtGravarLote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtGravarLoteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jCheckBoxTodos))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jBtExcluirSelecao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBtGravarLote, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE))))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jCheckBoxTodos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtExcluirSelecao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBtGravarLote)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtSair, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jBtSair)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabelaProdutosEstoque.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jTabelaProdutosEstoque.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID_Kit", "Código", "Código Barra", "Descrição do Produto", "Un.", "Qtd. Estoque", "Qtd.Kit", "Lote"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTabelaProdutosEstoque.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabelaProdutosEstoqueMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTabelaProdutosEstoque);
        if (jTabelaProdutosEstoque.getColumnModel().getColumnCount() > 0) {
            jTabelaProdutosEstoque.getColumnModel().getColumn(0).setMinWidth(60);
            jTabelaProdutosEstoque.getColumnModel().getColumn(0).setMaxWidth(60);
            jTabelaProdutosEstoque.getColumnModel().getColumn(1).setMinWidth(70);
            jTabelaProdutosEstoque.getColumnModel().getColumn(1).setMaxWidth(70);
            jTabelaProdutosEstoque.getColumnModel().getColumn(2).setMinWidth(100);
            jTabelaProdutosEstoque.getColumnModel().getColumn(2).setMaxWidth(100);
            jTabelaProdutosEstoque.getColumnModel().getColumn(3).setMinWidth(350);
            jTabelaProdutosEstoque.getColumnModel().getColumn(3).setMaxWidth(350);
            jTabelaProdutosEstoque.getColumnModel().getColumn(4).setMinWidth(60);
            jTabelaProdutosEstoque.getColumnModel().getColumn(4).setMaxWidth(60);
            jTabelaProdutosEstoque.getColumnModel().getColumn(5).setMinWidth(80);
            jTabelaProdutosEstoque.getColumnModel().getColumn(5).setMaxWidth(80);
            jTabelaProdutosEstoque.getColumnModel().getColumn(6).setMinWidth(70);
            jTabelaProdutosEstoque.getColumnModel().getColumn(6).setMaxWidth(70);
            jTabelaProdutosEstoque.getColumnModel().getColumn(7).setMinWidth(90);
            jTabelaProdutosEstoque.getColumnModel().getColumn(7).setMaxWidth(90);
        }

        jPanel36.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        javax.swing.GroupLayout jPanel36Layout = new javax.swing.GroupLayout(jPanel36);
        jPanel36.setLayout(jPanel36Layout);
        jPanel36Layout.setHorizontalGroup(
            jPanel36Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 410, Short.MAX_VALUE)
        );
        jPanel36Layout.setVerticalGroup(
            jPanel36Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );

        jPanel37.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        jLabel69.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel69.setForeground(new java.awt.Color(204, 0, 0));
        jLabel69.setText("Total de Registros:");

        javax.swing.GroupLayout jPanel37Layout = new javax.swing.GroupLayout(jPanel37);
        jPanel37.setLayout(jPanel37Layout);
        jPanel37Layout.setHorizontalGroup(
            jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel37Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel69))
        );
        jPanel37Layout.setVerticalGroup(
            jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel69)
        );

        jPanel38.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        jTOTAL_REGISTROS_selecionados.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTOTAL_REGISTROS_selecionados.setForeground(new java.awt.Color(204, 0, 0));
        jTOTAL_REGISTROS_selecionados.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel38Layout = new javax.swing.GroupLayout(jPanel38);
        jPanel38.setLayout(jPanel38Layout);
        jPanel38Layout.setHorizontalGroup(
            jPanel38Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTOTAL_REGISTROS_selecionados, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
        );
        jPanel38Layout.setVerticalGroup(
            jPanel38Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTOTAL_REGISTROS_selecionados, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE)
        );

        jProgressBar1.setStringPainted(true);

        jTOTAL_REG_GRAVADO.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTOTAL_REG_GRAVADO.setForeground(new java.awt.Color(0, 102, 0));
        jTOTAL_REG_GRAVADO.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTOTAL_REG_GRAVADO.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jTOTAL_REG_GRAVADO.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 0));
        jLabel4.setText("Total Registros Gravados:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel37, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel38, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel36, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTOTAL_REG_GRAVADO, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jPanel37, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel38, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel36, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jTOTAL_REG_GRAVADO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtPesquisaCodigoProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtPesquisaCodigoProdActionPerformed
        // TODO add your handling code here:
        count = 0;
        flag = 1;
        if (jCodigoProdPesquisa.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Informe o código do produto para pesquisa.");
        } else {
            LIMPAR_tabela();
            PREENCEHR_TABELA_PRODUTOS_codigo();
        }
    }//GEN-LAST:event_jBtPesquisaCodigoProdActionPerformed

    private void jCodigoBarraPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCodigoBarraPesquisaActionPerformed
        // TODO add your handling code here:
        count = 0;
        flag = 1;
    }//GEN-LAST:event_jCodigoBarraPesquisaActionPerformed

    private void jCheckBoxTodosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxTodosItemStateChanged
        // TODO add your handling code here:
        count = 0;
        flag = 1;
        if (evt.getStateChange() == evt.SELECTED) {
            jBtExcluirSelecao.setEnabled(true);
            jBtGravarLote.setEnabled(true);
            LIMPAR_tabela();
            PREENCEHR_TABELA_PRODUTOS_todos();
        } else {
            jTOTAL_REGISTROS_selecionados.setText("");
            LIMPAR_tabela();
            jBtExcluirSelecao.setEnabled(!true);
            jBtGravarLote.setEnabled(!true);
        }
    }//GEN-LAST:event_jCheckBoxTodosItemStateChanged

    private void jBtPesquisaNomeProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtPesquisaNomeProdActionPerformed
        // TODO add your handling code here:
        count = 0;
        flag = 1;
        if (jDescricapProdPesquisa.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Informe o nome do produto para pesquisa.");
        } else {
            LIMPAR_tabela();
            PREENCEHR_TABELA_PRODUTOS_descricao();
        }
    }//GEN-LAST:event_jBtPesquisaNomeProdActionPerformed

    private void jTabelaProdutosEstoqueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabelaProdutosEstoqueMouseClicked
        // TODO add your handling code here:
        flag = 1;
        if (flag == 1) {
            nomeProduto = "" + jTabelaProdutosEstoque.getValueAt(jTabelaProdutosEstoque.getSelectedRow(), 3);
            jDescricapProdPesquisa.setText(nomeProduto);
            idProd = "" + jTabelaProdutosEstoque.getValueAt(jTabelaProdutosEstoque.getSelectedRow(), 1);
            jCodigoProdPesquisa.setText(idProd);
            pCODIGO_kit = "" + jTabelaProdutosEstoque.getValueAt(jTabelaProdutosEstoque.getSelectedRow(), 0);
        }
    }//GEN-LAST:event_jTabelaProdutosEstoqueMouseClicked

    private void jBtConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtConfirmarActionPerformed
        // TODO add your handling code here:
        flag = 1;
        DecimalFormat qtdReal = new DecimalFormat("###,##00.0");
        qtdReal.setCurrency(Currency.getInstance(new Locale("pt", "BR")));
        flag = 1;
        if (jDescricapProdPesquisa.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Selecione o nome do interno e clique no botão CONFIRMAR");
        } else {
            CONTROLE.SELECIONAR_produto(objProdKit);
            jCodigoProd.setText(String.valueOf(objProdKit.getIdProd()));
            jDescricaoProd.setText(objProdKit.getDescricaoProduto());
            jUnidadeProd.setText(objProdKit.getUnidadeProd());
            pCodigoAlmxarifado = objProdKit.getIdLocal();
            idKit = objProdKit.getIdKit();
            // Formata o valor para ser exibido na tela no formato BR                                                   
            qtdEstoque = objProdKit.getQtdEstoque();
            DecimalFormat vu = new DecimalFormat(",###0.00");
            String qEstoque = vu.format(qtdEstoque);
            jQuantidadeProdEstoque.setText(qEstoque);
            //
            qdtKit = objProdKit.getQuantidadeProd();
            DecimalFormat qk = new DecimalFormat("###,###0.00");
            String qKit = qk.format(qdtKit);
            jQuantidadeKit.setText(qKit);
            jQuantidadeInternos.setText(jtotalInternosSelecionados.getText());
            //CALCULAR QUANTIDADE DE PRODUTOS PARA TOTAL DE INTERNOS qdtInterno
            qdtInterno = Integer.parseInt(jtotalInternosSelecionados.getText());
            qtdTotal = qdtInterno * qdtKit;
            //
            DecimalFormat qtdTota = new DecimalFormat("###,###0.00");
            String tota = qtdTota.format(qtdTotal);
            jQtdAtendida.setText(String.valueOf(tota));
            dispose();
        }
    }//GEN-LAST:event_jBtConfirmarActionPerformed

    private void jBtSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtSairActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jBtSairActionPerformed

    private void jBtExcluirSelecaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtExcluirSelecaoActionPerformed
        // TODO add your handling code here:
        if (jCodigoProdPesquisa.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Não existem produto selecionado para exclusão, selecione priomeiro o produto a ser excluído.");
        } else if (jDescricapProdPesquisa.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Não existem produto selecionado para exclusão, selecione priomeiro o produto a ser excluído.");
        } else {
            int resposta = JOptionPane.showConfirmDialog(this, "Deseja realmente excluir o registro selecionado?", "Confirmação",
                    JOptionPane.YES_NO_OPTION);
            if (resposta == JOptionPane.YES_OPTION) {
                jCodigoProdPesquisa.setText("");
                jCodigoBarraPesquisa.setText("");
                jDescricapProdPesquisa.setText("");
                pTOTAL_REGISTROS_pesquisado = pTOTAL_REGISTROS_pesquisado - 1;
                jTOTAL_REGISTROS_selecionados.setText(String.valueOf(pTOTAL_REGISTROS_pesquisado));
                DefaultTableModel modelOrigem = (DefaultTableModel) jTabelaProdutosEstoque.getModel();
                modelOrigem.removeRow(jTabelaProdutosEstoque.getSelectedRow());
                JOptionPane.showMessageDialog(rootPane, "Registro excluído com sucesso.");
            } else {
                JOptionPane.showMessageDialog(rootPane, "Operação abortada pelo usuário.");
            }
        }
    }//GEN-LAST:event_jBtExcluirSelecaoActionPerformed

    private void jBtGravarLoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtGravarLoteActionPerformed
        // TODO add your handling code here:     
        if (pTOTAL_REGISTROS_pesquisado != 0) {
            int resposta = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja gravar os registros selecionados?\nDepois de confirmado, essa operação não poderá ser mais paralisada.", "Confirmação",
                    JOptionPane.YES_NO_OPTION);
            if (resposta == JOptionPane.YES_OPTION) {
                jCheckBoxTodos.setEnabled(!true);
                jBtGravarLote.setEnabled(!true);
                jBtExcluirSelecao.setEnabled(!true);
                jBtSair.setEnabled(!true);
                bloquearCamposBotoes(!true);
                //BOTÕES DA TELA DE MONTAGEM
                jBtSalvarProduto.setEnabled(!true);
                jBtCancelarProduto.setEnabled(!true);
                //IMPEDIR QUE A JANELA SEJA FECHADO NO X NO MOMENTO DA GRAVAÇÃO
                setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                GRAVAR_REGISTRO_BANCO_dados();
            } else {
                JOptionPane.showMessageDialog(rootPane, "Operação abortada pelo usuário.");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Não exite(m) item(ns) a ser(em) gravado(s).");
        }
    }//GEN-LAST:event_jBtGravarLoteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaEstoqueProdutosKitBaixaLote.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaEstoqueProdutosKitBaixaLote.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaEstoqueProdutosKitBaixaLote.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaEstoqueProdutosKitBaixaLote.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TelaEstoqueProdutosKitBaixaLote dialog = new TelaEstoqueProdutosKitBaixaLote(montaKitProd, true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtConfirmar;
    private javax.swing.JButton jBtExcluirSelecao;
    private javax.swing.JButton jBtGravarLote;
    private javax.swing.JButton jBtPesquisaCodigoProd;
    private javax.swing.JButton jBtPesquisaNomeProd;
    private javax.swing.JButton jBtSair;
    private javax.swing.JCheckBox jCheckBoxTodos;
    public static javax.swing.JTextField jCodigoBarraPesquisa;
    public static javax.swing.JTextField jCodigoProdPesquisa;
    public static javax.swing.JTextField jDescricapProdPesquisa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JLabel jTOTAL_REGISTROS_selecionados;
    private javax.swing.JTextField jTOTAL_REG_GRAVADO;
    private javax.swing.JTable jTabelaProdutosEstoque;
    // End of variables declaration//GEN-END:variables

    public void corCampos() {
        jCodigoProdPesquisa.setBackground(Color.white);
        jCodigoBarraPesquisa.setBackground(Color.white);
        jDescricapProdPesquisa.setBackground(Color.white);
        jTOTAL_REG_GRAVADO.setBackground(Color.white);
        jTOTAL_REGISTROS_selecionados.setBackground(Color.white);
    }

    public void bloquearCamposBotoes(boolean opcao) {
        jCodigoProdPesquisa.setEnabled(opcao);
        jCodigoBarraPesquisa.setEnabled(opcao);
        jDescricapProdPesquisa.setEnabled(opcao);
        //
        jBtPesquisaCodigoProd.setEnabled(opcao);
        jBtConfirmar.setEnabled(opcao);
        jBtPesquisaNomeProd.setEnabled(opcao);
    }

    public void PREENCEHR_TABELA_PRODUTOS_codigo() {
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaProdutosEstoque.getModel();
        try {
            for (ProdutoInternosKitLote dd : CONTROLE.PESQUISA_PRODUTOS_codigo()) {
                //
                DecimalFormat vi = new DecimalFormat(",###0.00");
                String vqtdItem = vi.format(dd.getQtdEstoque());
                qtdItemTab = vqtdItem;
                //              
                DecimalFormat qti = new DecimalFormat(",###0.00");
                String vqtdItemKit = qti.format(dd.getQuantidadeProd());
                qtdItemTabKit = vqtdItemKit;
                jTOTAL_REGISTROS_selecionados.setText(Integer.toString(pTOTAL_registros)); // Converter inteiro em string para exibir na tela 
                dadosOrigem.addRow(new Object[]{dd.getIdKit(), dd.getIdProd(), dd.getCodigoBarras(), dd.getDescricaoProduto(), dd.getUnidadeProd(), qtdItemTab, qtdItemTabKit, dd.getLote()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaProdutosEstoque.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer esquerda = new DefaultTableCellRenderer();
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                DefaultTableCellRenderer direita = new DefaultTableCellRenderer();
                esquerda.setHorizontalAlignment(SwingConstants.LEFT);
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                direita.setHorizontalAlignment(SwingConstants.RIGHT);
                //
                jTabelaProdutosEstoque.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaProdutosEstoque.getColumnModel().getColumn(1).setCellRenderer(centralizado);
                jTabelaProdutosEstoque.getColumnModel().getColumn(2).setCellRenderer(direita);
                jTabelaProdutosEstoque.getColumnModel().getColumn(4).setCellRenderer(direita);
                jTabelaProdutosEstoque.getColumnModel().getColumn(5).setCellRenderer(direita);
                jTabelaProdutosEstoque.getColumnModel().getColumn(6).setCellRenderer(direita);
                jTabelaProdutosEstoque.getColumnModel().getColumn(7).setCellRenderer(direita);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaEstoqueProdutosKitBaixaLote.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void PREENCEHR_TABELA_PRODUTOS_codigoBarras() {
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaProdutosEstoque.getModel();
        try {
            for (ProdutoInternosKitLote dd : CONTROLE.PESQUISA_PRODUTOS_codigoBarras()) {
                //
                DecimalFormat vi = new DecimalFormat(",###0.00");
                String vqtdItem = vi.format(dd.getQtdEstoque());
                qtdItemTab = vqtdItem;
                //              
                DecimalFormat qti = new DecimalFormat(",###0.00");
                String vqtdItemKit = qti.format(dd.getQuantidadeProd());
                qtdItemTabKit = vqtdItemKit;
                jTOTAL_REGISTROS_selecionados.setText(Integer.toString(pTOTAL_registros)); // Converter inteiro em string para exibir na tela 
                dadosOrigem.addRow(new Object[]{dd.getIdKit(), dd.getIdProd(), dd.getCodigoBarras(), dd.getDescricaoProduto(), dd.getUnidadeProd(), qtdItemTab, qtdItemTabKit, dd.getLote()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaProdutosEstoque.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer esquerda = new DefaultTableCellRenderer();
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                DefaultTableCellRenderer direita = new DefaultTableCellRenderer();
                esquerda.setHorizontalAlignment(SwingConstants.LEFT);
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                direita.setHorizontalAlignment(SwingConstants.RIGHT);
                //
                jTabelaProdutosEstoque.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaProdutosEstoque.getColumnModel().getColumn(1).setCellRenderer(centralizado);
                jTabelaProdutosEstoque.getColumnModel().getColumn(2).setCellRenderer(direita);
                jTabelaProdutosEstoque.getColumnModel().getColumn(4).setCellRenderer(direita);
                jTabelaProdutosEstoque.getColumnModel().getColumn(5).setCellRenderer(direita);
                jTabelaProdutosEstoque.getColumnModel().getColumn(6).setCellRenderer(direita);
                jTabelaProdutosEstoque.getColumnModel().getColumn(7).setCellRenderer(direita);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaEstoqueProdutosKitBaixaLote.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void PREENCEHR_TABELA_PRODUTOS_descricao() {
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaProdutosEstoque.getModel();
        try {
            for (ProdutoInternosKitLote dd : CONTROLE.PESQUISA_PRODUTOS_descricao()) {
                //
                DecimalFormat vi = new DecimalFormat(",###0.00");
                String vqtdItem = vi.format(dd.getQtdEstoque());
                qtdItemTab = vqtdItem;
                //              
                DecimalFormat qti = new DecimalFormat(",###0.00");
                String vqtdItemKit = qti.format(dd.getQuantidadeProd());
                qtdItemTabKit = vqtdItemKit;
                jTOTAL_REGISTROS_selecionados.setText(Integer.toString(pTOTAL_registros)); // Converter inteiro em string para exibir na tela 
                dadosOrigem.addRow(new Object[]{dd.getIdKit(), dd.getIdProd(), dd.getCodigoBarras(), dd.getDescricaoProduto(), dd.getUnidadeProd(), qtdItemTab, qtdItemTabKit, dd.getLote()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaProdutosEstoque.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer esquerda = new DefaultTableCellRenderer();
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                DefaultTableCellRenderer direita = new DefaultTableCellRenderer();
                esquerda.setHorizontalAlignment(SwingConstants.LEFT);
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                direita.setHorizontalAlignment(SwingConstants.RIGHT);
                //
                jTabelaProdutosEstoque.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaProdutosEstoque.getColumnModel().getColumn(1).setCellRenderer(centralizado);
                jTabelaProdutosEstoque.getColumnModel().getColumn(2).setCellRenderer(direita);
                jTabelaProdutosEstoque.getColumnModel().getColumn(4).setCellRenderer(direita);
                jTabelaProdutosEstoque.getColumnModel().getColumn(5).setCellRenderer(direita);
                jTabelaProdutosEstoque.getColumnModel().getColumn(6).setCellRenderer(direita);
                jTabelaProdutosEstoque.getColumnModel().getColumn(7).setCellRenderer(direita);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaEstoqueProdutosKitBaixaLote.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void PREENCEHR_TABELA_PRODUTOS_todos() {
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaProdutosEstoque.getModel();
        try {
            for (ProdutoInternosKitLote dd : CONTROLE.PESQUISA_PRODUTOS_todos()) {
                idKit = dd.getIdKit();
                //
                DecimalFormat vi = new DecimalFormat(",###0.00");
                String vqtdItem = vi.format(dd.getQtdEstoque());
                qtdItemTab = vqtdItem;
                //              
                DecimalFormat qti = new DecimalFormat(",###0.00");
                String vqtdItemKit = qti.format(dd.getQuantidadeProd());
                qtdItemTabKit = vqtdItemKit;
                jTOTAL_REGISTROS_selecionados.setText(Integer.toString(pTOTAL_REGISTROS_pesquisado)); // Converter inteiro em string para exibir na tela 
                dadosOrigem.addRow(new Object[]{dd.getIdKit(), dd.getIdProd(), dd.getCodigoBarras(), dd.getDescricaoProduto(), dd.getUnidadeProd(), qtdItemTab, qtdItemTabKit, dd.getLote()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaProdutosEstoque.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer esquerda = new DefaultTableCellRenderer();
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                DefaultTableCellRenderer direita = new DefaultTableCellRenderer();
                esquerda.setHorizontalAlignment(SwingConstants.LEFT);
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                direita.setHorizontalAlignment(SwingConstants.RIGHT);
                //
                jTabelaProdutosEstoque.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaProdutosEstoque.getColumnModel().getColumn(1).setCellRenderer(centralizado);
                jTabelaProdutosEstoque.getColumnModel().getColumn(2).setCellRenderer(direita);
                jTabelaProdutosEstoque.getColumnModel().getColumn(4).setCellRenderer(direita);
                jTabelaProdutosEstoque.getColumnModel().getColumn(5).setCellRenderer(direita);
                jTabelaProdutosEstoque.getColumnModel().getColumn(6).setCellRenderer(direita);
                jTabelaProdutosEstoque.getColumnModel().getColumn(7).setCellRenderer(direita);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaEstoqueProdutosKitBaixaLote.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void LIMPAR_tabela() {
        // APAGAR DADOS DA TABELA
        while (jTabelaProdutosEstoque.getModel().getRowCount() > 0) {
            ((DefaultTableModel) jTabelaProdutosEstoque.getModel()).removeRow(0);
        }
        // LIMPAR O TOTALIZADOR DA TABELA INTERNOS SELECIONADOS
        jTOTAL_REGISTROS_selecionados.setText("");
    }

    public void LIMPAR_TABELA_produtos() {
        // APAGAR DADOS DA TABELA
        while (jTabelaProdutos.getModel().getRowCount() > 0) {
            ((DefaultTableModel) jTabelaProdutos.getModel()).removeRow(0);
        }
    }

    public void GRAVAR_REGISTRO_BANCO_dados() {
        pTOTAL_REGISTROS_gravado = 0;
        // THREAD DOS DADOS
        try {
            Thread t0 = new Thread() {
                public void run() {
                    statusMov = "Incluiu";
                    horaMov = jHoraSistema.getText();
                    dataModFinal = jDataSistema.getText();
                    DecimalFormat qtdReal = new DecimalFormat("###,##00.0");
                    qtdReal.setCurrency(Currency.getInstance(new Locale("pt", "BR")));
                    // GRAVAR NA TABELA ITENS_PRODUTOS_INTERNOS_PAVILHAO_KIT_LOTE                    
                    for (int i = 0; i < jTabelaProdutosEstoque.getRowCount(); i++) {
                        objProdKit.setUsuarioInsert(nameUser);
                        objProdKit.setDataInsert(dataModFinal);
                        objProdKit.setHorarioInsert(horaMov);
                        //
                        objProdKit.setIdKit((int) jTabelaProdutosEstoque.getValueAt(i, 0));
                        objProdKit.setIdRegistroComp(Integer.valueOf(jIdRegistroComp.getText()));// TABELA PRINCIPAL (COMPOSICAO_PAGAMENTO_KIT_INTERNOS_LOTE)                                                        
                        objProdKit.setIdProd((int) jTabelaProdutosEstoque.getValueAt(i, 1));
                        objProdKit.setDescricaoProduto((String) jTabelaProdutosEstoque.getValueAt(i, 3));
                        pUtili = objProdKit.getpUtili();
                        try {
                            objProdKit.setQuantidadeProd(qtdReal.parse((String) jTabelaProdutosEstoque.getValueAt(i, 6)).intValue());
                        } catch (ParseException ex) {
                        }
                        //CALCULAR A QUANTIDADE TOTAL DE PRODUTOS
                        qdtKit = objProdKit.getQuantidadeProd();
                        qdtInterno = Integer.parseInt(jtotalInternosSelecionados.getText());
                        qtdTotal = qdtInterno * qdtKit;
                        objProdKit.setQuantidadeTotal(qtdTotal);
                        VERIFICAR_PRODUTOS_incluido();
                        if (!jIdRegistroComp.getText().equals(pRegistroComp)
                                && objProdKit.getIdProd() != pcodigoProduto) {
                            // PEGA PRODUTO PARA CALCULAR SALDO DE ESTOQUE                       
                            PEGAR_SALDO_estoque(objProdKit.getIdProd());
                            // SE O SALDO DE ESTOQUE FOR MAIOR QUE A QUANTIDADE DO ITEM, GRAVA
                            if (saldoEstoque >= objProdKit.getQuantidadeTotal()) {
                                // CALCULA O NOVO SALDO DE ESTOQUE
                                estoqueAtual = saldoEstoque - qtdTotal;
                                // TABELA ITENS_PRODUTOS_INTERNOS_PAVILHAO_KIT_LOTE
                                CONTROLE_PRODUTOS.incluirProdutosKitInternosLote(objProdKit);
                                BUSCAR_CODIGO_item();
                                //
                                objItensReqMatInter.setIdProd(objProdKit.getIdProd());
                                objItensReqMatInter.setQtdItem(estoqueAtual);
                                CONTROLE_LOTE.alterarEstoqueMaterais(objItensReqMatInter); // TABELA DE LOTE_PRODUTOS_AC   
                                objLog3();
                                controlLog.incluirLogSistema(objLogSys); // Grava o log da operação   
                                //EXIBIR NA TELA DOS PRODUTOS OS ITENS GRAVADO (jTabelaProdutos)
                                LIMPAR_TABELA_produtos();
                                MOSTRAR_REGISTROS_GRAVADO_tabela();
                            }
                        }
                        pTOTAL_REGISTROS_gravado = i + 1;
                        jTOTAL_REG_GRAVADO.setText(String.valueOf(pTOTAL_REGISTROS_gravado));
                        jProgressBar1.setValue(i);
                    }
                    jProgressBar1.setValue(100);
                    if (pTOTAL_REGISTROS_gravado == pTOTAL_REGISTROS_pesquisado) {
                        LIMPAR_tabela();
                        JOptionPane.showMessageDialog(rootPane, "Operação Concluída com sucesso...");
                        LIMPAR_TABELA_produtos();
                        MOSTRAR_REGISTROS_GRAVADO_tabela();
                        jCheckBoxTodos.setSelected(!true);
                        jCheckBoxTodos.setEnabled(true);
                        bloquearCamposBotoes(true);
                        //BOTÃO DE NOVO PRODUTO DA TELA DE MONTAGEM DE KIT FASE-3
                        jBtNovoProduto.setEnabled(true);
                        jBtSair.setEnabled(true);
                        jtotalProdutosKitInternos.setText(jTOTAL_REG_GRAVADO.getText());
                        jTOTAL_REG_GRAVADO.setText("");
                        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); //Impedir que a janela seja fechada pelo X 
                        dispose();
                    }
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException ex) {
                    }
                }
            };
            t0.start();
        } catch (Exception e) {
        }
        // THREAD DA BARRA DE EXECUÇÃO
        try {
            Thread t = new Thread() {
                public void run() {
                    jProgressBar1.setMaximum(jTabelaProdutosEstoque.getRowCount());
                    Rectangle rect;
                    for (int a = 0; a < jTabelaProdutosEstoque.getRowCount(); a++) {
                        rect = jTabelaProdutosEstoque.getCellRect(a, 0, true);
                        try {
                            jTabelaProdutosEstoque.scrollRectToVisible(rect);
                        } catch (java.lang.ClassCastException e) {
                        }
                        if (a == 0) {
                            jTabelaProdutosEstoque.setRowSelectionInterval(a, 0);
                            jProgressBar1.setValue((a + 1));
                        } else if (a > 0) {
                            jTabelaProdutosEstoque.setRowSelectionInterval(a, 1);
                            jProgressBar1.setValue((a + 1));
                        }
                        jProgressBar1.setValue(a);
                        try {
                            Thread.sleep(100);
                        } catch (InterruptedException ex) {
                        }
                    }
                    jProgressBar1.setValue(0);
                    try {
                    } catch (Exception e) {
                    }
                }
            };
            t.start();
        } catch (Exception e) {
        }
    }

    public void VERIFICAR_PRODUTOS_incluido() {
        CONTROLE.VERIFICAR_PRODUTOS_incluido(objProdKit);
    }

    public void PEGAR_SALDO_estoque(int idProd) {
        CONTROLE.VERIFICAR_PRODUTO_estoque(objProdKit);
        codProd = objProdKit.getIdProd();
        codEstoque = objProdKit.getIdItem();
        saldoEstoque = objProdKit.getQtdEstoque();
    }

    public void BUSCAR_CODIGO_item() {
        CONTROLE.BUSCAR_CODIGO_PRODUTO_gravado(objProdKit);
        IdRegProdKit = objProdKit.getIdRegProdKit();
    }

    public void MOSTRAR_REGISTROS_GRAVADO_tabela() {
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaProdutos.getModel();
        try {
            for (ProdutoInternosKitLote dd : CONTROLE.MOSTRAR_TABELA_PRODUTO_gravado()) {
                //
                DecimalFormat vi = new DecimalFormat(",###0.00");
                String vqtdItem = vi.format(dd.getQuantidadeProd());
                qtdItemTab = vqtdItem;
                //              
                jtotalProdutosKitInternos.setText(Integer.toString(pTOTAL_REGISTROS_gravado)); // Converter inteiro em string para exibir na tela 
                dadosOrigem.addRow(new Object[]{dd.getIdRegProdKit(), dd.getIdProd(), dd.getDescricaoProduto(), dd.getUnidadeProd(), qtdItemTab});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaProdutos.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                //
                jTabelaProdutos.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaProdutos.getColumnModel().getColumn(1).setCellRenderer(centralizado);
                jTabelaProdutos.getColumnModel().getColumn(3).setCellRenderer(centralizado);
                jTabelaProdutos.getColumnModel().getColumn(4).setCellRenderer(centralizado);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaEstoqueProdutosKitBaixaLote.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void objLog3() {
        objLogSys.setDataMov(dataModFinal);
        objLogSys.setHorarioMov(horaMov);
        objLogSys.setNomeModuloTela(nomeModuloTela3);
        objLogSys.setIdLancMov(Integer.valueOf(jIdRegistroComp.getText()));
        objLogSys.setNomeUsuarioLogado(nameUser);
        objLogSys.setStatusMov(statusMov);
    }
}
