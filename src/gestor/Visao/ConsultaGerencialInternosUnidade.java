/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestor.Visao;

import gestor.Dao.ConexaoBancoDadosBAR;
import gestor.Dao.ConexaoBancoDadosITB;
import gestor.Dao.ConexaoBancoDadosLF;
import gestor.Dao.ConexaoBancoDadosSSA;
import gestor.Dao.ConexaoBancoDadosVC;
import gestor.Dao.ModeloTabela;
import java.awt.Color;
import java.awt.Image;
import java.io.File;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author ronaldo.silva7
 */
public class ConsultaGerencialInternosUnidade extends javax.swing.JInternalFrame {

    ConexaoBancoDadosLF conectaLF = new ConexaoBancoDadosLF();
    ConexaoBancoDadosSSA conectaSSA = new ConexaoBancoDadosSSA();
    ConexaoBancoDadosITB conectaITB = new ConexaoBancoDadosITB();
    ConexaoBancoDadosVC conectaVC = new ConexaoBancoDadosVC();
    ConexaoBancoDadosBAR conectaBAR = new ConexaoBancoDadosBAR();
    //
    int count = 0;
    int count1 = 0;
    int count2 = 0;
    int count3 = 0;
    int count4 = 0;
    String dataEntrada = ""; // LAURO DE FREITAS
    String dataEntrada1 = ""; // SALVADOR 
    String dataEntrada2 = ""; // ITABUNA
    String dataEntrada3 = ""; // VITÓRIA DA CONQUISTA
    String dataEntrada4 = ""; // BARREIRAS
    //
    int flag = 0;
    String caminho = "";
    public static String nomeUnidadeLF = "";
    public static String nomeUnidadeSSA = "";
    public static String nomeUnidadeITB = "";
    public static String nomeUnidadeVC = "";
    public static String nomeUnidadeBAR = "";
    public static String nomeUnidadeIRE = ""; // AINDA NÃO FOI ATIVADA (03/05/2018)
    //
    String situacaoEntrada = "ENTRADA NA UNIDADE";
    String situacaoRetorno = "RETORNO A UNIDADE";

    /**
     * Creates new form ConsultaGerencialInternosUnidade
     */
    public ConsultaGerencialInternosUnidade() {
        initComponents();
        corCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jIdInternoExt = new javax.swing.JTextField();
        jCnc = new javax.swing.JTextField();
        jNomeInternoCrc = new javax.swing.JTextField();
        jNomeMaeInterno = new javax.swing.JTextField();
        jDataNascimento = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jSituacaoCrc = new javax.swing.JTextField();
        jPanel30 = new javax.swing.JPanel();
        jLabel63 = new javax.swing.JLabel();
        jPanel31 = new javax.swing.JPanel();
        jPanel32 = new javax.swing.JPanel();
        jtotalRegistros = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabelaInterno = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jFotoInterno = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPesquisaNomeInterno = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jBtPesquisaInternoNome = new javax.swing.JButton();
        jPesquisaCnc = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jBtPesquisarCNC = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jPesquisarNomeMaeInterno = new javax.swing.JTextField();
        jBtNomeMaeInterno = new javax.swing.JButton();
        jComboBoxFiltroPesquisa = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jBtProntuarioCrc = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("...::: Consulta Gerencial de Internos - Unidade Prisional :::...");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Código");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("CNC");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Data Nasc.");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Nome Completo do Interno");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Nome da Mãe do Interno");

        jIdInternoExt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jIdInternoExt.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jIdInternoExt.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jIdInternoExt.setEnabled(false);

        jCnc.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jCnc.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jCnc.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jCnc.setEnabled(false);

        jNomeInternoCrc.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jNomeInternoCrc.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jNomeInternoCrc.setEnabled(false);

        jNomeMaeInterno.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jNomeMaeInterno.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jNomeMaeInterno.setEnabled(false);

        jDataNascimento.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jDataNascimento.setEnabled(false);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Situação");

        jSituacaoCrc.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jSituacaoCrc.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jSituacaoCrc.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jNomeMaeInterno)
                    .addComponent(jNomeInternoCrc)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jIdInternoExt, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 130, Short.MAX_VALUE))
                            .addComponent(jCnc))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSituacaoCrc, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(14, 14, 14))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jSituacaoCrc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCnc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jIdInternoExt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jNomeInternoCrc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jNomeMaeInterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jNomeInternoCrc, jNomeMaeInterno});

        jPanel30.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        jLabel63.setText("Total de Registros:");

        javax.swing.GroupLayout jPanel30Layout = new javax.swing.GroupLayout(jPanel30);
        jPanel30.setLayout(jPanel30Layout);
        jPanel30Layout.setHorizontalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel30Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel63))
        );
        jPanel30Layout.setVerticalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel63)
        );

        jPanel31.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        javax.swing.GroupLayout jPanel31Layout = new javax.swing.GroupLayout(jPanel31);
        jPanel31.setLayout(jPanel31Layout);
        jPanel31Layout.setHorizontalGroup(
            jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel31Layout.setVerticalGroup(
            jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );

        jPanel32.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        jtotalRegistros.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel32Layout = new javax.swing.GroupLayout(jPanel32);
        jPanel32.setLayout(jPanel32Layout);
        jPanel32Layout.setHorizontalGroup(
            jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtotalRegistros, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
        );
        jPanel32Layout.setVerticalGroup(
            jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtotalRegistros, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE)
        );

        jTabelaInterno.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jTabelaInterno.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "CNC", "Nome do Interno", "Situação", "Data Nasc.", "Unidade Prisional"
            }
        ));
        jTabelaInterno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabelaInternoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTabelaInterno);
        if (jTabelaInterno.getColumnModel().getColumnCount() > 0) {
            jTabelaInterno.getColumnModel().getColumn(0).setMinWidth(70);
            jTabelaInterno.getColumnModel().getColumn(0).setMaxWidth(70);
            jTabelaInterno.getColumnModel().getColumn(1).setMinWidth(80);
            jTabelaInterno.getColumnModel().getColumn(1).setMaxWidth(80);
            jTabelaInterno.getColumnModel().getColumn(2).setMinWidth(400);
            jTabelaInterno.getColumnModel().getColumn(2).setMaxWidth(400);
            jTabelaInterno.getColumnModel().getColumn(3).setMinWidth(150);
            jTabelaInterno.getColumnModel().getColumn(3).setMaxWidth(150);
            jTabelaInterno.getColumnModel().getColumn(4).setMinWidth(80);
            jTabelaInterno.getColumnModel().getColumn(4).setMaxWidth(80);
            jTabelaInterno.getColumnModel().getColumn(5).setMinWidth(450);
            jTabelaInterno.getColumnModel().getColumn(5).setMaxWidth(450);
        }

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jFotoInterno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jFotoInterno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true), "Pesquisas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(204, 0, 0))); // NOI18N

        jPesquisaNomeInterno.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Nome do Interno");

        jBtPesquisaInternoNome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtPesquisaInternoNome.setContentAreaFilled(false);
        jBtPesquisaInternoNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtPesquisaInternoNomeActionPerformed(evt);
            }
        });

        jPesquisaCnc.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPesquisaCnc.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("CNC");

        jBtPesquisarCNC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtPesquisarCNC.setContentAreaFilled(false);
        jBtPesquisarCNC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtPesquisarCNCActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Nome da Mãe do Interno");

        jPesquisarNomeMaeInterno.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jBtNomeMaeInterno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtNomeMaeInterno.setContentAreaFilled(false);
        jBtNomeMaeInterno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtNomeMaeInternoActionPerformed(evt);
            }
        });

        jComboBoxFiltroPesquisa.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBoxFiltroPesquisa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione...", "Ativos", "Inativos", "Todos" }));
        jComboBoxFiltroPesquisa.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Filtro de Pesquisa");

        jBtProntuarioCrc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/SEM FOTO_HOMEM_16.jpg"))); // NOI18N
        jBtProntuarioCrc.setToolTipText("Prontuário de Interno");
        jBtProntuarioCrc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtProntuarioCrcActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPesquisarNomeMaeInterno, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPesquisaNomeInterno))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jBtPesquisaInternoNome, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtNomeMaeInterno, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPesquisaCnc, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jComboBoxFiltroPesquisa, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(142, 142, 142)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBtPesquisarCNC, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtProntuarioCrc, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jBtProntuarioCrc)
                    .addComponent(jComboBoxFiltroPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtPesquisaInternoNome)
                    .addComponent(jPesquisaNomeInterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8))
                .addGap(8, 8, 8)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jPesquisarNomeMaeInterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtNomeMaeInterno)
                    .addComponent(jPesquisaCnc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtPesquisarCNC))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 828, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jPanel30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel31, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );

        setBounds(300, 30, 864, 533);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtPesquisaInternoNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtPesquisaInternoNomeActionPerformed
        // TODO add your handling code here:
        if (jPesquisaNomeInterno.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Informe o nome do interno para pesquisa global.");
        } else if (!jPesquisaNomeInterno.getText().equals("") && jComboBoxFiltroPesquisa.getSelectedItem().equals("Selecione...")) {
            JOptionPane.showMessageDialog(rootPane, "Selecione um filtro para pesquisa.");
        } else if (!jPesquisaNomeInterno.getText().equals("") && jComboBoxFiltroPesquisa.getSelectedItem().equals("Todos")) {
            preencherTodosInternos();
        } else if (!jPesquisaNomeInterno.getText().equals("") && jComboBoxFiltroPesquisa.getSelectedItem().equals("Ativos")) {
            pesquisarInternosAtivos();
        } else if (!jPesquisaNomeInterno.getText().equals("") && jComboBoxFiltroPesquisa.getSelectedItem().equals("Inativos")) {
            pesquisarInternosInativos();
        }
    }//GEN-LAST:event_jBtPesquisaInternoNomeActionPerformed

    private void jBtPesquisarCNCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtPesquisarCNCActionPerformed
        // TODO add your handling code here:
        if (jPesquisaCnc.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Informe o núemro do CNC do interno para pesquisa global.");
        } else if (!jPesquisaCnc.getText().equals("") && jComboBoxFiltroPesquisa.getSelectedItem().equals("Selecione...")) {
            pesquisarInternoCNC();
        }
    }//GEN-LAST:event_jBtPesquisarCNCActionPerformed

    private void jBtNomeMaeInternoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtNomeMaeInternoActionPerformed
        // TODO add your handling code here:
        if (jPesquisarNomeMaeInterno.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Informe o nome da mãe do interno para pesquisa global.");
        } else if (!jPesquisarNomeMaeInterno.getText().equals("") && jComboBoxFiltroPesquisa.getSelectedItem().equals("Selecione...")) {
            pesquisarMaeInterno();
        }
    }//GEN-LAST:event_jBtNomeMaeInternoActionPerformed

    private void jTabelaInternoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabelaInternoMouseClicked
        // TODO add your handling code here:
        flag = 1;
        if (flag == 1) {
            String nomeInterno = "" + jTabelaInterno.getValueAt(jTabelaInterno.getSelectedRow(), 2);
            jPesquisaNomeInterno.setText(nomeInterno);
            String idInt = "" + jTabelaInterno.getValueAt(jTabelaInterno.getSelectedRow(), 0);
            jIdInternoExt.setText(idInt);
            //
            limparCampos();
            //
            conectaLF.abrirConexao();
            conectaSSA.abrirConexao();
            conectaITB.abrirConexao();
            conectaVC.abrirConexao();
            conectaBAR.abrirConexao();
            try {
                if (nomeUnidadeLF == jTabelaInterno.getValueAt(jTabelaInterno.getSelectedRow(), 5)) {
                    // LAURO DE FREITAS
                    conectaLF.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                            + "INNER JOIN DADOSPENAISINTERNOS "
                            + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                            + "INNER JOIN UNIDADE "
                            + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                            + "WHERE PRONTUARIOSCRC.NomeInternoCrc='" + jPesquisaNomeInterno.getText() + "'");
                    conectaLF.rs.first();
                    jIdInternoExt.setText(String.valueOf(conectaLF.rs.getInt("IdInternoCrc")));
                    jCnc.setText(conectaLF.rs.getString("Cnc"));
                    jDataNascimento.setDate(conectaLF.rs.getDate("DataNasciCrc"));
                    jSituacaoCrc.setText(conectaLF.rs.getString("SituacaoCrc"));
                    jNomeInternoCrc.setText(conectaLF.rs.getString("NomeInternoCrc"));
                    jNomeMaeInterno.setText(conectaLF.rs.getString("MaeInternoCrc"));
                    caminho = conectaLF.rs.getString("FotoInternoCrc");
                    if (caminho != null) {
                        javax.swing.ImageIcon i = new javax.swing.ImageIcon(caminho);
                        jFotoInterno.setIcon(i);
                        jFotoInterno.setIcon(new ImageIcon(i.getImage().getScaledInstance(jFotoInterno.getWidth(), jFotoInterno.getHeight(), Image.SCALE_DEFAULT)));
                    }
                    // FOTO DE FRENTE - BANCO DE DADOS
                    byte[] imgBytes = ((byte[]) conectaLF.rs.getBytes("ImagemFrente"));
                    if (imgBytes != null) {
                        ImageIcon pic = null;
                        pic = new ImageIcon(imgBytes);
                        Image scaled = pic.getImage().getScaledInstance(jFotoInterno.getWidth(), jFotoInterno.getHeight(), Image.SCALE_DEFAULT);
                        ImageIcon icon = new ImageIcon(scaled);
                        jFotoInterno.setIcon(icon);
                    }
                    //
                } else if (nomeUnidadeSSA == jTabelaInterno.getValueAt(jTabelaInterno.getSelectedRow(), 5)) {
                    // SALVADOR
                    conectaSSA.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                            + "INNER JOIN DADOSPENAISINTERNOS "
                            + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                            + "INNER JOIN UNIDADE "
                            + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                            + "WHERE PRONTUARIOSCRC.NomeInternoCrc='" + jPesquisaNomeInterno.getText() + "'");
                    conectaSSA.rs.first();
                    jIdInternoExt.setText(String.valueOf(conectaSSA.rs.getInt("IdInternoCrc")));
                    jCnc.setText(conectaSSA.rs.getString("Cnc"));
                    jDataNascimento.setDate(conectaSSA.rs.getDate("DataNasciCrc"));
                    jSituacaoCrc.setText(conectaSSA.rs.getString("SituacaoCrc"));
                    jNomeInternoCrc.setText(conectaSSA.rs.getString("NomeInternoCrc"));
                    jNomeMaeInterno.setText(conectaSSA.rs.getString("MaeInternoCrc"));
                    caminho = conectaSSA.rs.getString("FotoInternoCrc");
                    if (caminho != null) {
                        javax.swing.ImageIcon s = new javax.swing.ImageIcon(caminho);
                        jFotoInterno.setIcon(s);
                        jFotoInterno.setIcon(new ImageIcon(s.getImage().getScaledInstance(jFotoInterno.getWidth(), jFotoInterno.getHeight(), Image.SCALE_DEFAULT)));
                    }
                    // FOTO DE FRENTE - BANCO DE DADOS
                    byte[] imgsBytes = ((byte[]) conectaSSA.rs.getBytes("ImagemFrente"));
                    if (imgsBytes != null) {
                        ImageIcon pics = null;
                        pics = new ImageIcon(imgsBytes);
                        Image scaleds = pics.getImage().getScaledInstance(jFotoInterno.getWidth(), jFotoInterno.getHeight(), Image.SCALE_DEFAULT);
                        ImageIcon icon = new ImageIcon(scaleds);
                        jFotoInterno.setIcon(icon);
                    }
                } else if (nomeUnidadeITB == jTabelaInterno.getValueAt(jTabelaInterno.getSelectedRow(), 5)) {
                    // ITABUNA
                    conectaITB.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                            + "INNER JOIN DADOSPENAISINTERNOS "
                            + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                            + "INNER JOIN UNIDADE "
                            + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                            + "WHERE PRONTUARIOSCRC.NomeInternoCrc='" + jPesquisaNomeInterno.getText() + "'");
                    conectaITB.rs.first();
                    jIdInternoExt.setText(String.valueOf(conectaITB.rs.getInt("IdInternoCrc")));
                    jCnc.setText(conectaITB.rs.getString("Cnc"));
                    jDataNascimento.setDate(conectaITB.rs.getDate("DataNasciCrc"));
                    jSituacaoCrc.setText(conectaITB.rs.getString("SituacaoCrc"));
                    jNomeInternoCrc.setText(conectaITB.rs.getString("NomeInternoCrc"));
                    jNomeMaeInterno.setText(conectaITB.rs.getString("MaeInternoCrc"));
                    caminho = conectaITB.rs.getString("FotoInternoCrc");
                    if (caminho != null) {
                        javax.swing.ImageIcon t = new javax.swing.ImageIcon(caminho);
                        jFotoInterno.setIcon(t);
                        jFotoInterno.setIcon(new ImageIcon(t.getImage().getScaledInstance(jFotoInterno.getWidth(), jFotoInterno.getHeight(), Image.SCALE_DEFAULT)));
                    }
                    // FOTO DE FRENTE - BANCO DE DADOS
                    byte[] imgiBytes = ((byte[]) conectaITB.rs.getBytes("ImagemFrente"));
                    if (imgiBytes != null) {
                        ImageIcon pici = null;
                        pici = new ImageIcon(imgiBytes);
                        Image scaledi = pici.getImage().getScaledInstance(jFotoInterno.getWidth(), jFotoInterno.getHeight(), Image.SCALE_DEFAULT);
                        ImageIcon icon = new ImageIcon(scaledi);
                        jFotoInterno.setIcon(icon);
                    }
                } else if (nomeUnidadeVC == jTabelaInterno.getValueAt(jTabelaInterno.getSelectedRow(), 5)) {
                    // VITORIA DA CONQUISTA
                    conectaVC.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                            + "INNER JOIN DADOSPENAISINTERNOS "
                            + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                            + "INNER JOIN UNIDADE "
                            + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                            + "WHERE PRONTUARIOSCRC.NomeInternoCrc='" + jPesquisaNomeInterno.getText() + "'");
                    conectaVC.rs.first();
                    jIdInternoExt.setText(String.valueOf(conectaVC.rs.getInt("IdInternoCrc")));
                    jCnc.setText(conectaVC.rs.getString("Cnc"));
                    jDataNascimento.setDate(conectaVC.rs.getDate("DataNasciCrc"));
                    jSituacaoCrc.setText(conectaVC.rs.getString("SituacaoCrc"));
                    jNomeInternoCrc.setText(conectaVC.rs.getString("NomeInternoCrc"));
                    jNomeMaeInterno.setText(conectaVC.rs.getString("MaeInternoCrc"));
                    caminho = conectaVC.rs.getString("FotoInternoCrc");
                    if (caminho != null) {
                        javax.swing.ImageIcon v = new javax.swing.ImageIcon(caminho);
                        jFotoInterno.setIcon(v);
                        jFotoInterno.setIcon(new ImageIcon(v.getImage().getScaledInstance(jFotoInterno.getWidth(), jFotoInterno.getHeight(), Image.SCALE_DEFAULT)));
                    }
                    // FOTO DE FRENTE - BANCO DE DADOS
                    byte[] imgvBytes = ((byte[]) conectaVC.rs.getBytes("ImagemFrente"));
                    if (imgvBytes != null) {
                        ImageIcon picv = null;
                        picv = new ImageIcon(imgvBytes);
                        Image scaledv = picv.getImage().getScaledInstance(jFotoInterno.getWidth(), jFotoInterno.getHeight(), Image.SCALE_DEFAULT);
                        ImageIcon icon = new ImageIcon(scaledv);
                        jFotoInterno.setIcon(icon);
                    }
                } else if (nomeUnidadeBAR == jTabelaInterno.getValueAt(jTabelaInterno.getSelectedRow(), 5)) {
                    // BARREIRAS
                    conectaBAR.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                            + "INNER JOIN DADOSPENAISINTERNOS "
                            + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                            + "INNER JOIN UNIDADE "
                            + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                            + "WHERE PRONTUARIOSCRC.NomeInternoCrc='" + jPesquisaNomeInterno.getText() + "'");
                    conectaBAR.rs.first();
                    jIdInternoExt.setText(String.valueOf(conectaBAR.rs.getInt("IdInternoCrc")));
                    jCnc.setText(conectaBAR.rs.getString("Cnc"));
                    jDataNascimento.setDate(conectaBAR.rs.getDate("DataNasciCrc"));
                    jSituacaoCrc.setText(conectaBAR.rs.getString("SituacaoCrc"));
                    jNomeInternoCrc.setText(conectaBAR.rs.getString("NomeInternoCrc"));
                    jNomeMaeInterno.setText(conectaBAR.rs.getString("MaeInternoCrc"));
                    caminho = conectaBAR.rs.getString("FotoInternoCrc");
                    if (caminho != null) {
                        javax.swing.ImageIcon b = new javax.swing.ImageIcon(caminho);
                        jFotoInterno.setIcon(b);
                        jFotoInterno.setIcon(new ImageIcon(b.getImage().getScaledInstance(jFotoInterno.getWidth(), jFotoInterno.getHeight(), Image.SCALE_DEFAULT)));
                    }
                    // FOTO DE FRENTE - BANCO DE DADOS
                    byte[] imgbBytes = ((byte[]) conectaBAR.rs.getBytes("ImagemFrente"));
                    if (imgbBytes != null) {
                        ImageIcon picb = null;
                        picb = new ImageIcon(imgbBytes);
                        Image scaledb = picb.getImage().getScaledInstance(jFotoInterno.getWidth(), jFotoInterno.getHeight(), Image.SCALE_DEFAULT);
                        ImageIcon icon = new ImageIcon(scaledb);
                        jFotoInterno.setIcon(icon);
                    }
                }
            } catch (Exception e) {
            }
            conectaLF.desconecta();
            conectaSSA.desconecta();
            conectaITB.desconecta();
            conectaVC.desconecta();
            conectaBAR.desconecta();
        }
    }//GEN-LAST:event_jTabelaInternoMouseClicked

    private void jBtProntuarioCrcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtProntuarioCrcActionPerformed
        // TODO add your handling code here:
        if (jIdInternoExt.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Informe o código do interno para pesquisa.");
        } else {
            TelaConsultaProntuarioInternoCrcExt objConsultaIntExt = new TelaConsultaProntuarioInternoCrcExt();
            TelaModuloCRC.jPainelCRC.add(objConsultaIntExt);
            objConsultaIntExt.show();
        }
    }//GEN-LAST:event_jBtProntuarioCrcActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtNomeMaeInterno;
    private javax.swing.JButton jBtPesquisaInternoNome;
    private javax.swing.JButton jBtPesquisarCNC;
    private javax.swing.JButton jBtProntuarioCrc;
    private javax.swing.JTextField jCnc;
    private javax.swing.JComboBox<String> jComboBoxFiltroPesquisa;
    private com.toedter.calendar.JDateChooser jDataNascimento;
    private javax.swing.JLabel jFotoInterno;
    public static javax.swing.JTextField jIdInternoExt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jNomeInternoCrc;
    private javax.swing.JTextField jNomeMaeInterno;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JTextField jPesquisaCnc;
    private javax.swing.JTextField jPesquisaNomeInterno;
    private javax.swing.JTextField jPesquisarNomeMaeInterno;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jSituacaoCrc;
    public static javax.swing.JTable jTabelaInterno;
    private javax.swing.JLabel jtotalRegistros;
    // End of variables declaration//GEN-END:variables

    public void corCampos() {
        jIdInternoExt.setBackground(Color.white);
        jCnc.setBackground(Color.white);
        jDataNascimento.setBackground(Color.white);
        jSituacaoCrc.setBackground(Color.white);
        jNomeInternoCrc.setBackground(Color.white);
        jNomeMaeInterno.setBackground(Color.white);
    }

    public void limparCampos() {
        jIdInternoExt.setText("");
        jCnc.setText("");
        jDataNascimento.setDate(null);
        jSituacaoCrc.setText("");
        jNomeInternoCrc.setText("");
        jNomeMaeInterno.setText("");
        jFotoInterno.setIcon(null);
    }

    public void preencherTodosInternos() {
        // LAURO DE FREITAS
        File arqLF = new File("C:\\SysConp\\ConectaLF.properties");
        if (arqLF.exists()) {
            pesquisarUnidadePrisionalLF();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Lauro de Freitas, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // SALVADOR
        File arqSSA = new File("C:\\SysConp\\ConectaSSA.properties");
        if (arqSSA.exists()) {
            pesquisarUnidadePrisionalSSA();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Salvador, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // ITABUNA
        File arqITB = new File("C:\\SysConp\\ConectaITB.properties");
        if (arqITB.exists()) {
            pesquisarUnidadePrisionalITB();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Itabuna, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // VITÓRIA DA CONQUISTA
        File arqVC = new File("C:\\SysConp\\ConectaVC.properties");
        if (arqVC.exists()) {
            pesquisarUnidadePrisionalVC();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Itabuna, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // BARREIRAS
        File arqBAR = new File("C:\\SysConp\\ConectaBAR.properties");
        if (arqBAR.exists()) {
            pesquisarUnidadePrisionalBAR();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Barreiras, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        //
        count4 = 0;
        count3 = 0;
        count2 = 0;
        count1 = 0;
        count = 0;
        ArrayList dados = new ArrayList();
        ArrayList dadosSSA = new ArrayList();
        ArrayList dadosITB = new ArrayList();
        ArrayList dadosVC = new ArrayList();
        ArrayList dadosBAR = new ArrayList();
        String[] Colunas = new String[]{"Código", "CNC", "Nome do Interno", "Situação", "Data Nasc.", "Unidade Prisional",};
        try {
            // LAURO DE FREITAS       
            conectaLF.abrirConexao();
            conectaLF.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%'");
            conectaLF.rs.first();
            // LAURO DE FREITAS
            do {
                count = count + 1; // Contador de registros                
                dataEntrada = conectaLF.rs.getString("DataNascICrc");
                String dia = dataEntrada.substring(8, 10);
                String mes = dataEntrada.substring(5, 7);
                String ano = dataEntrada.substring(0, 4);
                dataEntrada = dia + "/" + mes + "/" + ano;
                dados.add(new Object[]{conectaLF.rs.getInt("IdInternoCrc"), conectaLF.rs.getString("Cnc"), conectaLF.rs.getString("NomeInternoCrc"), conectaLF.rs.getString("SituacaoCrc"), dataEntrada, nomeUnidadeLF});
            } while (conectaLF.rs.next());
        } catch (SQLException ex) {
        }
        // SALVADOR
        try {
            conectaSSA.abrirConexao();
            conectaSSA.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%'");
            conectaSSA.rs.first();
            do {
                count1 = count1 + count;
                dataEntrada1 = conectaSSA.rs.getString("DataNascICrc");
                String dia1 = dataEntrada1.substring(8, 10);
                String mes1 = dataEntrada1.substring(5, 7);
                String ano1 = dataEntrada1.substring(0, 4);
                dataEntrada1 = dia1 + "/" + mes1 + "/" + ano1;
                dadosSSA.add(new Object[]{conectaSSA.rs.getInt("IdInternoCrc"), conectaSSA.rs.getString("Cnc"), conectaSSA.rs.getString("NomeInternoCrc"), conectaSSA.rs.getString("SituacaoCrc"), dataEntrada, nomeUnidadeSSA});
                dados.addAll(dadosSSA);
            } while (conectaSSA.rs.next());
        } catch (Exception e) {
        }
        // ITABUNA
        try {
            conectaITB.abrirConexao();
            conectaITB.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%'");
            conectaITB.rs.first();
            do {
                count2 = count2 + count1 + count;
                dataEntrada2 = conectaITB.rs.getString("DataNascICrc");
                String dia2 = dataEntrada2.substring(8, 10);
                String mes2 = dataEntrada2.substring(5, 7);
                String ano2 = dataEntrada2.substring(0, 4);
                dataEntrada2 = dia2 + "/" + mes2 + "/" + ano2;
                dadosITB.add(new Object[]{conectaITB.rs.getInt("IdInternoCrc"), conectaITB.rs.getString("Cnc"), conectaITB.rs.getString("NomeInternoCrc"), conectaITB.rs.getString("SituacaoCrc"), dataEntrada, nomeUnidadeITB});
                dados.addAll(dadosITB);
            } while (conectaITB.rs.next());
        } catch (Exception e) {
        }
        // VITORIA DA CONQUISTA
        try {
            conectaVC.abrirConexao();
            conectaVC.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%'");
            conectaVC.rs.first();
            do {
                count3 = count3 + count2 + count1 + count;
                dataEntrada3 = conectaVC.rs.getString("DataNascICrc");
                String dia3 = dataEntrada3.substring(8, 10);
                String mes3 = dataEntrada3.substring(5, 7);
                String ano3 = dataEntrada3.substring(0, 4);
                dataEntrada3 = dia3 + "/" + mes3 + "/" + ano3;
                jtotalRegistros.setText(Integer.toString(count3)); // Converter inteiro em string para exibir na tela
                dadosVC.add(new Object[]{conectaVC.rs.getInt("IdInternoCrc"), conectaVC.rs.getString("Cnc"), conectaVC.rs.getString("NomeInternoCrc"), conectaVC.rs.getString("SituacaoCrc"), dataEntrada, nomeUnidadeVC});
                dados.addAll(dadosVC);
            } while (conectaVC.rs.next());
        } catch (Exception e) {
        }
        // BARREIRAS
        try {
            conectaBAR.abrirConexao();
            conectaBAR.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%'");
            conectaBAR.rs.first();
            do {
                count4 = count4 + count3 + count2 + count1 + count;
                dataEntrada4 = conectaBAR.rs.getString("DataNascICrc");
                String dia3 = dataEntrada4.substring(8, 10);
                String mes3 = dataEntrada4.substring(5, 7);
                String ano3 = dataEntrada4.substring(0, 4);
                dataEntrada4 = dia3 + "/" + mes3 + "/" + ano3;
                jtotalRegistros.setText(Integer.toString(count4)); // Converter inteiro em string para exibir na tela
                dadosBAR.add(new Object[]{conectaBAR.rs.getInt("IdInternoCrc"), conectaBAR.rs.getString("Cnc"), conectaBAR.rs.getString("NomeInternoCrc"), conectaBAR.rs.getString("SituacaoCrc"), dataEntrada4, nomeUnidadeBAR});
                dados.addAll(dadosBAR);
            } while (conectaBAR.rs.next());
        } catch (Exception e) {
            if (dados.equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Não existem dados a serem EXIBIDOS !!!");
            }
        }
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTabelaInterno.setRowSorter(new TableRowSorter(modelo)); //FAZER ORDENAMENTO NA TABLEA        
        jTabelaInterno.setModel(modelo);
        jTabelaInterno.getColumnModel().getColumn(0).setPreferredWidth(70);
        jTabelaInterno.getColumnModel().getColumn(0).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(1).setPreferredWidth(80);
        jTabelaInterno.getColumnModel().getColumn(1).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(2).setPreferredWidth(400);
        jTabelaInterno.getColumnModel().getColumn(2).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(3).setPreferredWidth(150);
        jTabelaInterno.getColumnModel().getColumn(3).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(4).setPreferredWidth(80);
        jTabelaInterno.getColumnModel().getColumn(4).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(5).setPreferredWidth(450);
        jTabelaInterno.getColumnModel().getColumn(5).setResizable(false);
        jTabelaInterno.getTableHeader().setReorderingAllowed(false);
        jTabelaInterno.setAutoResizeMode(jTabelaInterno.AUTO_RESIZE_OFF);
        jTabelaInterno.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        alinharCamposTabelaProntuario();
        conectaBAR.desconecta();
    }

    public void pesquisarInternosAtivos() {
        // LAURO DE FREITAS
        File arqLF = new File("C:\\SysConp\\ConectaLF.properties");
        if (arqLF.exists()) {
            pesquisarUnidadePrisionalLF();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Lauro de Freitas, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // SALVADOR
        File arqSSA = new File("C:\\SysConp\\ConectaSSA.properties");
        if (arqSSA.exists()) {
            pesquisarUnidadePrisionalSSA();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Salvador, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // ITABUNA
        File arqITB = new File("C:\\SysConp\\ConectaITB.properties");
        if (arqITB.exists()) {
            pesquisarUnidadePrisionalITB();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Itabuna, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // VITÓRIA DA CONQUISTA
        File arqVC = new File("C:\\SysConp\\ConectaVC.properties");
        if (arqVC.exists()) {
            pesquisarUnidadePrisionalVC();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Itabuna, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // BARREIRAS
        File arqBAR = new File("C:\\SysConp\\ConectaBAR.properties");
        if (arqBAR.exists()) {
            pesquisarUnidadePrisionalBAR();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Barreiras, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        //
        count4 = 0;
        count3 = 0;
        count2 = 0;
        count1 = 0;
        count = 0;
        ArrayList dados = new ArrayList();
        ArrayList dadosSSA = new ArrayList();
        ArrayList dadosITB = new ArrayList();
        ArrayList dadosVC = new ArrayList();
        ArrayList dadosBAR = new ArrayList();
        String[] Colunas = new String[]{"Código", "CNC", "Nome do Interno", "Situação", "Data Nasc.", "Unidade Prisional",};
        try {
            // LAURO DE FREITAS       
            conectaLF.abrirConexao();
            conectaLF.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%' "
                    + "AND PRONTUARIOSCRC.SituacaoCrc='" + situacaoEntrada + "' "
                    + "OR PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%' "
                    + "AND PRONTUARIOSCRC.SituacaoCrc='" + situacaoRetorno + "'");
            conectaLF.rs.first();
            // LAURO DE FREITAS
            do {
                count = count + 1; // Contador de registros                
                dataEntrada = conectaLF.rs.getString("DataNasciCrc");
                String dia = dataEntrada.substring(8, 10);
                String mes = dataEntrada.substring(5, 7);
                String ano = dataEntrada.substring(0, 4);
                dataEntrada = dia + "/" + mes + "/" + ano;
                dados.add(new Object[]{conectaLF.rs.getInt("IdInternoCrc"), conectaLF.rs.getString("Cnc"), conectaLF.rs.getString("NomeInternoCrc"), conectaLF.rs.getString("SituacaoCrc"), dataEntrada, nomeUnidadeLF});
            } while (conectaLF.rs.next());
        } catch (SQLException ex) {
        }
        // SALVADOR
        try {
            conectaSSA.abrirConexao();
            conectaSSA.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%' "
                    + "AND PRONTUARIOSCRC.SituacaoCrc='" + situacaoEntrada + "' "
                    + "OR PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%' "
                    + "AND PRONTUARIOSCRC.SituacaoCrc='" + situacaoRetorno + "'");
            conectaSSA.rs.first();
            do {
                count1 = count1 + count;
                dataEntrada1 = conectaSSA.rs.getString("DataNasciCrc");
                String dia1 = dataEntrada1.substring(8, 10);
                String mes1 = dataEntrada1.substring(5, 7);
                String ano1 = dataEntrada1.substring(0, 4);
                dataEntrada1 = dia1 + "/" + mes1 + "/" + ano1;
                dadosSSA.add(new Object[]{conectaSSA.rs.getInt("IdInternoCrc"), conectaSSA.rs.getString("Cnc"), conectaSSA.rs.getString("NomeInternoCrc"), conectaSSA.rs.getString("SituacaoCrc"), dataEntrada1, nomeUnidadeSSA});
                dados.addAll(dadosSSA);
            } while (conectaSSA.rs.next());
        } catch (Exception e) {
        }
        // ITABUNA
        try {
            conectaITB.abrirConexao();
            conectaITB.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%' "
                    + "AND PRONTUARIOSCRC.SituacaoCrc='" + situacaoEntrada + "' "
                    + "OR PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%' "
                    + "AND PRONTUARIOSCRC.SituacaoCrc='" + situacaoRetorno + "'");
            conectaITB.rs.first();
            do {
                count2 = count2 + count1 + count;
                dataEntrada2 = conectaITB.rs.getString("DataNasciCrc");
                String dia2 = dataEntrada2.substring(8, 10);
                String mes2 = dataEntrada2.substring(5, 7);
                String ano2 = dataEntrada2.substring(0, 4);
                dataEntrada2 = dia2 + "/" + mes2 + "/" + ano2;
                dadosITB.add(new Object[]{conectaITB.rs.getInt("IdInternoCrc"), conectaITB.rs.getString("Cnc"), conectaITB.rs.getString("NomeInternoCrc"), conectaITB.rs.getString("SituacaoCrc"), dataEntrada2, nomeUnidadeITB});
                dados.addAll(dadosITB);
            } while (conectaITB.rs.next());
        } catch (Exception e) {
        }
        // VITORIA DA CONQUISTA
        try {
            conectaVC.abrirConexao();
            conectaVC.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%' "
                    + "AND PRONTUARIOSCRC.SituacaoCrc='" + situacaoEntrada + "' "
                    + "OR PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%' "
                    + "AND PRONTUARIOSCRC.SituacaoCrc='" + situacaoRetorno + "'");
            conectaVC.rs.first();
            do {
                count3 = count3 + count2 + count1 + count;
                dataEntrada3 = conectaVC.rs.getString("DataNasciCrc");
                String dia3 = dataEntrada3.substring(8, 10);
                String mes3 = dataEntrada3.substring(5, 7);
                String ano3 = dataEntrada3.substring(0, 4);
                dataEntrada3 = dia3 + "/" + mes3 + "/" + ano3;
                jtotalRegistros.setText(Integer.toString(count3)); // Converter inteiro em string para exibir na tela
                dadosVC.add(new Object[]{conectaVC.rs.getInt("IdInternoCrc"), conectaVC.rs.getString("Cnc"), conectaVC.rs.getString("NomeInternoCrc"), conectaVC.rs.getString("SituacaoCrc"), dataEntrada3, nomeUnidadeVC});
                dados.addAll(dadosVC);
            } while (conectaVC.rs.next());
        } catch (Exception e) {
        }
        // BARREIRAS
        try {
            conectaBAR.abrirConexao();
            conectaBAR.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%'");
            conectaBAR.rs.first();
            do {
                count4 = count4 + count3 + count2 + count1 + count;
                dataEntrada4 = conectaBAR.rs.getString("DataNascICrc");
                String dia3 = dataEntrada4.substring(8, 10);
                String mes3 = dataEntrada4.substring(5, 7);
                String ano3 = dataEntrada4.substring(0, 4);
                dataEntrada4 = dia3 + "/" + mes3 + "/" + ano3;
                jtotalRegistros.setText(Integer.toString(count4)); // Converter inteiro em string para exibir na tela
                dadosBAR.add(new Object[]{conectaBAR.rs.getInt("IdInternoCrc"), conectaBAR.rs.getString("Cnc"), conectaBAR.rs.getString("NomeInternoCrc"), conectaBAR.rs.getString("SituacaoCrc"), dataEntrada4, nomeUnidadeBAR});
                dados.addAll(dadosBAR);
            } while (conectaBAR.rs.next());
        } catch (Exception e) {
            if (dados.equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Não existem dados a serem EXIBIDOS !!!");
            }
        }
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTabelaInterno.setRowSorter(new TableRowSorter(modelo)); //FAZER ORDENAMENTO NA TABLEA        
        jTabelaInterno.setModel(modelo);
        jTabelaInterno.getColumnModel().getColumn(0).setPreferredWidth(70);
        jTabelaInterno.getColumnModel().getColumn(0).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(1).setPreferredWidth(80);
        jTabelaInterno.getColumnModel().getColumn(1).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(2).setPreferredWidth(400);
        jTabelaInterno.getColumnModel().getColumn(2).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(3).setPreferredWidth(150);
        jTabelaInterno.getColumnModel().getColumn(3).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(4).setPreferredWidth(80);
        jTabelaInterno.getColumnModel().getColumn(4).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(5).setPreferredWidth(450);
        jTabelaInterno.getColumnModel().getColumn(5).setResizable(false);
        jTabelaInterno.getTableHeader().setReorderingAllowed(false);
        jTabelaInterno.setAutoResizeMode(jTabelaInterno.AUTO_RESIZE_OFF);
        jTabelaInterno.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        alinharCamposTabelaProntuario();
        conectaBAR.desconecta();
    }

    public void pesquisarInternosInativos() {
        // LAURO DE FREITAS
        File arqLF = new File("C:\\SysConp\\ConectaLF.properties");
        if (arqLF.exists()) {
            pesquisarUnidadePrisionalLF();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Lauro de Freitas, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // SALVADOR
        File arqSSA = new File("C:\\SysConp\\ConectaSSA.properties");
        if (arqSSA.exists()) {
            pesquisarUnidadePrisionalSSA();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Salvador, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // ITABUNA
        File arqITB = new File("C:\\SysConp\\ConectaITB.properties");
        if (arqITB.exists()) {
            pesquisarUnidadePrisionalITB();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Itabuna, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // VITÓRIA DA CONQUISTA
        File arqVC = new File("C:\\SysConp\\ConectaVC.properties");
        if (arqVC.exists()) {
            pesquisarUnidadePrisionalVC();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Itabuna, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // BARREIRAS
        File arqBAR = new File("C:\\SysConp\\ConectaBAR.properties");
        if (arqBAR.exists()) {
            pesquisarUnidadePrisionalBAR();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Barreiras, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        //
        count4 = 0;
        count3 = 0;
        count2 = 0;
        count1 = 0;
        count = 0;
        ArrayList dados = new ArrayList();
        ArrayList dadosSSA = new ArrayList();
        ArrayList dadosITB = new ArrayList();
        ArrayList dadosVC = new ArrayList();
        ArrayList dadosBAR = new ArrayList();
        String[] Colunas = new String[]{"Código", "CNC", "Nome do Interno", "Situação", "Data Nasc.", "Unidade Prisional",};
        try {
            // LAURO DE FREITAS       
            conectaLF.abrirConexao();
            conectaLF.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%' "
                    + "AND PRONTUARIOSCRC.SituacaoCrc!='" + situacaoEntrada + "' "
                    + "OR PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%' "
                    + "AND PRONTUARIOSCRC.SituacaoCrc!='" + situacaoRetorno + "'");
            conectaLF.rs.first();
            // LAURO DE FREITAS
            do {
                count = count + 1; // Contador de registros                
                dataEntrada = conectaLF.rs.getString("DataNascICrc");
                String dia = dataEntrada.substring(8, 10);
                String mes = dataEntrada.substring(5, 7);
                String ano = dataEntrada.substring(0, 4);
                dataEntrada = dia + "/" + mes + "/" + ano;
                dados.add(new Object[]{conectaLF.rs.getInt("IdInternoCrc"), conectaLF.rs.getString("Cnc"), conectaLF.rs.getString("NomeInternoCrc"), conectaLF.rs.getString("SituacaoCrc"), dataEntrada, nomeUnidadeLF});
            } while (conectaLF.rs.next());
        } catch (SQLException ex) {
        }
        // SALVADOR
        try {
            conectaSSA.abrirConexao();
            conectaSSA.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%' "
                    + "AND PRONTUARIOSCRC.SituacaoCrc!='" + situacaoEntrada + "' "
                    + "OR PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%' "
                    + "AND PRONTUARIOSCRC.SituacaoCrc!='" + situacaoRetorno + "'");
            conectaSSA.rs.first();
            do {
                count1 = count1 + count;
                dataEntrada1 = conectaSSA.rs.getString("DataNascICrc");
                String dia1 = dataEntrada1.substring(8, 10);
                String mes1 = dataEntrada1.substring(5, 7);
                String ano1 = dataEntrada1.substring(0, 4);
                dataEntrada1 = dia1 + "/" + mes1 + "/" + ano1;
                dadosSSA.add(new Object[]{conectaSSA.rs.getInt("IdInternoCrc"), conectaSSA.rs.getString("Cnc"), conectaSSA.rs.getString("NomeInternoCrc"), conectaSSA.rs.getString("SituacaoCrc"), dataEntrada, nomeUnidadeSSA});
                dados.addAll(dadosSSA);
            } while (conectaSSA.rs.next());
        } catch (Exception e) {
        }
        // ITABUNA
        try {
            conectaITB.abrirConexao();
            conectaITB.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%' "
                    + "AND PRONTUARIOSCRC.SituacaoCrc!='" + situacaoEntrada + "' "
                    + "OR PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%' "
                    + "AND PRONTUARIOSCRC.SituacaoCrc!='" + situacaoRetorno + "'");
            conectaITB.rs.first();
            do {
                count2 = count2 + count1 + count;
                dataEntrada2 = conectaITB.rs.getString("DataNascICrc");
                String dia2 = dataEntrada2.substring(8, 10);
                String mes2 = dataEntrada2.substring(5, 7);
                String ano2 = dataEntrada2.substring(0, 4);
                dataEntrada2 = dia2 + "/" + mes2 + "/" + ano2;
                dadosITB.add(new Object[]{conectaITB.rs.getInt("IdInternoCrc"), conectaITB.rs.getString("Cnc"), conectaITB.rs.getString("NomeInternoCrc"), conectaITB.rs.getString("SituacaoCrc"), dataEntrada, nomeUnidadeITB});
                dados.addAll(dadosITB);
            } while (conectaITB.rs.next());
        } catch (Exception e) {
        }
        // VITORIA DA CONQUISTA
        try {
            conectaVC.abrirConexao();
            conectaVC.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%' "
                    + "AND PRONTUARIOSCRC.SituacaoCrc!='" + situacaoEntrada + "' "
                    + "OR PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%' "
                    + "AND PRONTUARIOSCRC.SituacaoCrc!='" + situacaoRetorno + "'");
            conectaVC.rs.first();
            do {
                count3 = count3 + count2 + count1 + count;
                dataEntrada3 = conectaVC.rs.getString("DataNascICrc");
                String dia3 = dataEntrada3.substring(8, 10);
                String mes3 = dataEntrada3.substring(5, 7);
                String ano3 = dataEntrada3.substring(0, 4);
                dataEntrada3 = dia3 + "/" + mes3 + "/" + ano3;
                jtotalRegistros.setText(Integer.toString(count3)); // Converter inteiro em string para exibir na tela
                dadosVC.add(new Object[]{conectaVC.rs.getInt("IdInternoCrc"), conectaVC.rs.getString("Cnc"), conectaVC.rs.getString("NomeInternoCrc"), conectaVC.rs.getString("SituacaoCrc"), dataEntrada, nomeUnidadeVC});
                dados.addAll(dadosVC);
            } while (conectaVC.rs.next());
        } catch (Exception e) {
        }
        // BARREIRAS
        try {
            conectaBAR.abrirConexao();
            conectaBAR.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%'");
            conectaBAR.rs.first();
            do {
                count4 = count4 + count3 + count2 + count1 + count;
                dataEntrada4 = conectaBAR.rs.getString("DataNascICrc");
                String dia3 = dataEntrada4.substring(8, 10);
                String mes3 = dataEntrada4.substring(5, 7);
                String ano3 = dataEntrada4.substring(0, 4);
                dataEntrada4 = dia3 + "/" + mes3 + "/" + ano3;
                jtotalRegistros.setText(Integer.toString(count4)); // Converter inteiro em string para exibir na tela
                dadosBAR.add(new Object[]{conectaBAR.rs.getInt("IdInternoCrc"), conectaBAR.rs.getString("Cnc"), conectaBAR.rs.getString("NomeInternoCrc"), conectaBAR.rs.getString("SituacaoCrc"), dataEntrada4, nomeUnidadeBAR});
                dados.addAll(dadosBAR);
            } while (conectaBAR.rs.next());
        } catch (Exception e) {
            if (dados.equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Não existem dados a serem EXIBIDOS !!!");
            }
        }
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTabelaInterno.setRowSorter(new TableRowSorter(modelo)); //FAZER ORDENAMENTO NA TABLEA        
        jTabelaInterno.setModel(modelo);
        jTabelaInterno.getColumnModel().getColumn(0).setPreferredWidth(70);
        jTabelaInterno.getColumnModel().getColumn(0).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(1).setPreferredWidth(80);
        jTabelaInterno.getColumnModel().getColumn(1).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(2).setPreferredWidth(400);
        jTabelaInterno.getColumnModel().getColumn(2).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(3).setPreferredWidth(150);
        jTabelaInterno.getColumnModel().getColumn(3).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(4).setPreferredWidth(80);
        jTabelaInterno.getColumnModel().getColumn(4).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(5).setPreferredWidth(450);
        jTabelaInterno.getColumnModel().getColumn(5).setResizable(false);
        jTabelaInterno.getTableHeader().setReorderingAllowed(false);
        jTabelaInterno.setAutoResizeMode(jTabelaInterno.AUTO_RESIZE_OFF);
        jTabelaInterno.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        alinharCamposTabelaProntuario();
        conectaBAR.desconecta();
    }

    public void pesquisarInternoCNC() {
        // LAURO DE FREITAS
        File arqLF = new File("C:\\SysConp\\ConectaLF.properties");
        if (arqLF.exists()) {
            pesquisarUnidadePrisionalLF();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Lauro de Freitas, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // SALVADOR
        File arqSSA = new File("C:\\SysConp\\ConectaSSA.properties");
        if (arqSSA.exists()) {
            pesquisarUnidadePrisionalSSA();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Salvador, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // ITABUNA
        File arqITB = new File("C:\\SysConp\\ConectaITB.properties");
        if (arqITB.exists()) {
            pesquisarUnidadePrisionalITB();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Itabuna, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // VITÓRIA DA CONQUISTA
        File arqVC = new File("C:\\SysConp\\ConectaVC.properties");
        if (arqVC.exists()) {
            pesquisarUnidadePrisionalVC();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Itabuna, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // BARREIRAS
        File arqBAR = new File("C:\\SysConp\\ConectaBAR.properties");
        if (arqBAR.exists()) {
            pesquisarUnidadePrisionalBAR();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Itabuna, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        count4 = 0;
        count3 = 0;
        count2 = 0;
        count1 = 0;
        count = 0;
        ArrayList dados = new ArrayList();
        ArrayList dadosSSA = new ArrayList();
        ArrayList dadosITB = new ArrayList();
        ArrayList dadosVC = new ArrayList();
        ArrayList dadosBAR = new ArrayList();
        String[] Colunas = new String[]{"Código", "CNC", "Nome do Interno", "Situação", "Data Nasc.", "Unidade Prisional",};
        try {
            // LAURO DE FREITAS
            conectaLF.abrirConexao();
            conectaLF.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.Cnc='" + jPesquisaCnc.getText() + "'");
            conectaLF.rs.first();
            // LAURO DE FREITAS
            do {
                count = count + 1; // Contador de registros                
                dataEntrada = conectaLF.rs.getString("DataNascICrc");
                String dia = dataEntrada.substring(8, 10);
                String mes = dataEntrada.substring(5, 7);
                String ano = dataEntrada.substring(0, 4);
                dataEntrada = dia + "/" + mes + "/" + ano;
                dados.add(new Object[]{conectaLF.rs.getInt("IdInternoCrc"), conectaLF.rs.getString("Cnc"), conectaLF.rs.getString("NomeInternoCrc"), conectaLF.rs.getString("SituacaoCrc"), dataEntrada, nomeUnidadeLF});
            } while (conectaLF.rs.next());
        } catch (SQLException ex) {
        }
        // SALVADOR
        try {
            conectaSSA.abrirConexao();
            conectaSSA.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.Cnc='" + jPesquisaCnc.getText() + "'");
            conectaSSA.rs.first();
            do {
                count1 = count1 + count;
                dataEntrada1 = conectaSSA.rs.getString("DataNascICrc");
                String dia1 = dataEntrada1.substring(8, 10);
                String mes1 = dataEntrada1.substring(5, 7);
                String ano1 = dataEntrada1.substring(0, 4);
                dataEntrada1 = dia1 + "/" + mes1 + "/" + ano1;
                dadosSSA.add(new Object[]{conectaSSA.rs.getInt("IdInternoCrc"), conectaSSA.rs.getString("Cnc"), conectaSSA.rs.getString("NomeInternoCrc"), conectaSSA.rs.getString("SituacaoCrc"), dataEntrada, nomeUnidadeSSA});
                dados.addAll(dadosSSA);
            } while (conectaSSA.rs.next());
        } catch (Exception e) {
        }
        // ITABUNA
        try {
            conectaITB.abrirConexao();
            conectaITB.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.Cnc='" + jPesquisaCnc.getText() + "'");
            conectaITB.rs.first();
            do {
                count2 = count2 + count1 + count;
                dataEntrada2 = conectaITB.rs.getString("DataNascICrc");
                String dia2 = dataEntrada2.substring(8, 10);
                String mes2 = dataEntrada2.substring(5, 7);
                String ano2 = dataEntrada2.substring(0, 4);
                dataEntrada2 = dia2 + "/" + mes2 + "/" + ano2;
                dadosITB.add(new Object[]{conectaITB.rs.getInt("IdInternoCrc"), conectaITB.rs.getString("Cnc"), conectaITB.rs.getString("NomeInternoCrc"), conectaITB.rs.getString("SituacaoCrc"), dataEntrada, nomeUnidadeITB});
                dados.addAll(dadosITB);
            } while (conectaITB.rs.next());
        } catch (Exception e) {
        }
        // VITORIA DA CONQUISTA
        try {
            conectaVC.abrirConexao();
            conectaVC.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%' "
                    + "AND PRONTUARIOSCRC.SituacaoCrc!='" + situacaoEntrada + "' "
                    + "OR PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%' "
                    + "AND PRONTUARIOSCRC.SituacaoCrc!='" + situacaoRetorno + "'");
            conectaVC.rs.first();
            do {
                count3 = count3 + count2 + count1 + count;
                dataEntrada3 = conectaVC.rs.getString("DataNascICrc");
                String dia3 = dataEntrada3.substring(8, 10);
                String mes3 = dataEntrada3.substring(5, 7);
                String ano3 = dataEntrada3.substring(0, 4);
                dataEntrada3 = dia3 + "/" + mes3 + "/" + ano3;
                jtotalRegistros.setText(Integer.toString(count3)); // Converter inteiro em string para exibir na tela
                dadosVC.add(new Object[]{conectaVC.rs.getInt("IdInternoCrc"), conectaVC.rs.getString("Cnc"), conectaVC.rs.getString("NomeInternoCrc"), conectaVC.rs.getString("SituacaoCrc"), dataEntrada, nomeUnidadeVC});
                dados.addAll(dadosVC);
            } while (conectaVC.rs.next());
        } catch (Exception e) {
        }
        // BARREIRAS
        try {
            conectaBAR.abrirConexao();
            conectaBAR.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.NomeInternoCrc LIKE '%" + jPesquisaNomeInterno.getText() + "%'");
            conectaBAR.rs.first();
            do {
                count4 = count4 + count3 + count2 + count1 + count;
                dataEntrada4 = conectaBAR.rs.getString("DataNascICrc");
                String dia3 = dataEntrada4.substring(8, 10);
                String mes3 = dataEntrada4.substring(5, 7);
                String ano3 = dataEntrada4.substring(0, 4);
                dataEntrada4 = dia3 + "/" + mes3 + "/" + ano3;
                jtotalRegistros.setText(Integer.toString(count4)); // Converter inteiro em string para exibir na tela
                dadosBAR.add(new Object[]{conectaBAR.rs.getInt("IdInternoCrc"), conectaBAR.rs.getString("Cnc"), conectaBAR.rs.getString("NomeInternoCrc"), conectaBAR.rs.getString("SituacaoCrc"), dataEntrada4, nomeUnidadeBAR});
                dados.addAll(dadosBAR);
            } while (conectaBAR.rs.next());
        } catch (Exception e) {
            if (dados.equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Não existem dados a serem EXIBIDOS !!!");
            }
        }
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTabelaInterno.setRowSorter(new TableRowSorter(modelo)); //FAZER ORDENAMENTO NA TABLEA        
        jTabelaInterno.setModel(modelo);
        jTabelaInterno.getColumnModel().getColumn(0).setPreferredWidth(70);
        jTabelaInterno.getColumnModel().getColumn(0).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(1).setPreferredWidth(80);
        jTabelaInterno.getColumnModel().getColumn(1).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(2).setPreferredWidth(400);
        jTabelaInterno.getColumnModel().getColumn(2).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(3).setPreferredWidth(150);
        jTabelaInterno.getColumnModel().getColumn(3).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(4).setPreferredWidth(80);
        jTabelaInterno.getColumnModel().getColumn(4).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(5).setPreferredWidth(450);
        jTabelaInterno.getColumnModel().getColumn(5).setResizable(false);
        jTabelaInterno.getTableHeader().setReorderingAllowed(false);
        jTabelaInterno.setAutoResizeMode(jTabelaInterno.AUTO_RESIZE_OFF);
        jTabelaInterno.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        alinharCamposTabelaProntuario();
        conectaBAR.desconecta();
    }

    public void pesquisarMaeInterno() {
        // LAURO DE FREITAS
        File arqLF = new File("C:\\SysConp\\ConectaLF.properties");
        if (arqLF.exists()) {
            pesquisarUnidadePrisionalLF();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Lauro de Freitas, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // SALVADOR
        File arqSSA = new File("C:\\SysConp\\ConectaSSA.properties");
        if (arqSSA.exists()) {
            pesquisarUnidadePrisionalSSA();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Salvador, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // ITABUNA
        File arqITB = new File("C:\\SysConp\\ConectaITB.properties");
        if (arqITB.exists()) {
            pesquisarUnidadePrisionalITB();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Itabuna, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // VITÓRIA DA CONQUISTA
        File arqVC = new File("C:\\SysConp\\ConectaVC.properties");
        if (arqVC.exists()) {
            pesquisarUnidadePrisionalVC();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Itabuna, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        // BARREIRAS
        File arqBAR = new File("C:\\SysConp\\ConectaBAR.properties");
        if (arqBAR.exists()) {
            pesquisarUnidadePrisionalBAR();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo de conexão de Barreiras, não existe. Solicite ajuda do Administrador do Sistema.");
        }
        count4 = 0;
        count3 = 0;
        count2 = 0;
        count1 = 0;
        count = 0;
        ArrayList dados = new ArrayList();
        ArrayList dadosSSA = new ArrayList();
        ArrayList dadosITB = new ArrayList();
        ArrayList dadosVC = new ArrayList();
        ArrayList dadosBAR = new ArrayList();
        String[] Colunas = new String[]{"Código", "CNC", "Nome do Interno", "Situação", "Data Nasc.", "Unidade Prisional",};
        try {
            // LAURO DE FREITAS
            conectaLF.abrirConexao();
            conectaLF.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.MaeInternoCrc LIKE '%" + jPesquisarNomeMaeInterno.getText() + "%'");
            conectaLF.rs.first();
            // LAURO DE FREITAS
            do {
                count = count + 1; // Contador de registros                
                dataEntrada = conectaLF.rs.getString("DataNascICrc");
                String dia = dataEntrada.substring(8, 10);
                String mes = dataEntrada.substring(5, 7);
                String ano = dataEntrada.substring(0, 4);
                dataEntrada = dia + "/" + mes + "/" + ano;
                dados.add(new Object[]{conectaLF.rs.getInt("IdInternoCrc"), conectaLF.rs.getString("Cnc"), conectaLF.rs.getString("NomeInternoCrc"), conectaLF.rs.getString("SituacaoCrc"), dataEntrada, nomeUnidadeLF});
            } while (conectaLF.rs.next());
        } catch (SQLException ex) {
        }
        // SALVADOR
        try {
            conectaSSA.abrirConexao();
            conectaSSA.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.MaeInternoCrc LIKE '%" + jPesquisarNomeMaeInterno.getText() + "%'");
            conectaSSA.rs.first();
            do {
                count1 = count1 + count;
                dataEntrada1 = conectaSSA.rs.getString("DataNascICrc");
                String dia1 = dataEntrada1.substring(8, 10);
                String mes1 = dataEntrada1.substring(5, 7);
                String ano1 = dataEntrada1.substring(0, 4);
                dataEntrada1 = dia1 + "/" + mes1 + "/" + ano1;
                dadosSSA.add(new Object[]{conectaSSA.rs.getInt("IdInternoCrc"), conectaSSA.rs.getString("Cnc"), conectaSSA.rs.getString("NomeInternoCrc"), conectaSSA.rs.getString("SituacaoCrc"), dataEntrada1, nomeUnidadeSSA});
                dados.addAll(dadosSSA);
            } while (conectaSSA.rs.next());
        } catch (Exception e) {
        }
        // ITABUNA
        try {
            conectaITB.abrirConexao();
            conectaITB.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.MaeInternoCrc LIKE '%" + jPesquisarNomeMaeInterno.getText() + "%'");
            conectaITB.rs.first();
            do {
                count2 = count2 + count1 + count;
                dataEntrada2 = conectaITB.rs.getString("DataNascICrc");
                String dia2 = dataEntrada2.substring(8, 10);
                String mes2 = dataEntrada2.substring(5, 7);
                String ano2 = dataEntrada2.substring(0, 4);
                dataEntrada2 = dia2 + "/" + mes2 + "/" + ano2;
                dadosITB.add(new Object[]{conectaITB.rs.getInt("IdInternoCrc"), conectaITB.rs.getString("Cnc"), conectaITB.rs.getString("NomeInternoCrc"), conectaITB.rs.getString("SituacaoCrc"), dataEntrada2, nomeUnidadeITB});
                dados.addAll(dadosITB);
            } while (conectaITB.rs.next());
        } catch (Exception e) {
        }
        // VITORIA DA CONQUISTA
        try {
            conectaVC.abrirConexao();
            conectaVC.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.MaeInternoCrc LIKE '%" + jPesquisarNomeMaeInterno.getText() + "%'");
            conectaVC.rs.first();
            do {
                count3 = count3 + count2 + count1 + count;
                dataEntrada3 = conectaVC.rs.getString("DataNascICrc");
                String dia3 = dataEntrada3.substring(8, 10);
                String mes3 = dataEntrada3.substring(5, 7);
                String ano3 = dataEntrada3.substring(0, 4);
                dataEntrada3 = dia3 + "/" + mes3 + "/" + ano3;
                dadosVC.add(new Object[]{conectaVC.rs.getInt("IdInternoCrc"), conectaVC.rs.getString("Cnc"), conectaVC.rs.getString("NomeInternoCrc"), conectaVC.rs.getString("SituacaoCrc"), dataEntrada3, nomeUnidadeVC});
                dados.addAll(dadosVC);
            } while (conectaVC.rs.next());
        } catch (Exception e) {
        }
        // BARREIRAS
        try {
            conectaBAR.abrirConexao();
            conectaBAR.executaSQL("SELECT * FROM  PRONTUARIOSCRC "
                    + "INNER JOIN DADOSPENAISINTERNOS "
                    + "ON PRONTUARIOSCRC.IdInternoCrc=DADOSPENAISINTERNOS.IdInternoCrc "
                    + "INNER JOIN UNIDADE "
                    + "ON DADOSPENAISINTERNOS.IdUnid=UNIDADE.IdUnid "
                    + "WHERE PRONTUARIOSCRC.MaeInternoCrc LIKE '%" + jPesquisarNomeMaeInterno.getText() + "%'");
            conectaBAR.rs.first();
            do {
                count4 = count4 + count3 + count2 + count1 + count;
                dataEntrada4 = conectaITB.rs.getString("DataNascICrc");
                String dia2 = dataEntrada4.substring(8, 10);
                String mes2 = dataEntrada4.substring(5, 7);
                String ano2 = dataEntrada4.substring(0, 4);
                dataEntrada4 = dia2 + "/" + mes2 + "/" + ano2;
                jtotalRegistros.setText(Integer.toString(count4)); // Converter inteiro em string para exibir na tela
                dadosBAR.add(new Object[]{conectaBAR.rs.getInt("IdInternoCrc"), conectaBAR.rs.getString("Cnc"), conectaBAR.rs.getString("NomeInternoCrc"), conectaBAR.rs.getString("SituacaoCrc"), dataEntrada4, nomeUnidadeBAR});
                dados.addAll(dadosBAR);
            } while (conectaBAR.rs.next());
        } catch (Exception e) {
            if (dados.equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Não existem dados a serem EXIBIDOS !!!");
            }
        }
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTabelaInterno.setRowSorter(new TableRowSorter(modelo)); //FAZER ORDENAMENTO NA TABLEA        
        jTabelaInterno.setModel(modelo);
        jTabelaInterno.getColumnModel().getColumn(0).setPreferredWidth(70);
        jTabelaInterno.getColumnModel().getColumn(0).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(1).setPreferredWidth(80);
        jTabelaInterno.getColumnModel().getColumn(1).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(2).setPreferredWidth(400);
        jTabelaInterno.getColumnModel().getColumn(2).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(3).setPreferredWidth(150);
        jTabelaInterno.getColumnModel().getColumn(3).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(4).setPreferredWidth(80);
        jTabelaInterno.getColumnModel().getColumn(4).setResizable(false);
        jTabelaInterno.getColumnModel().getColumn(5).setPreferredWidth(450);
        jTabelaInterno.getColumnModel().getColumn(5).setResizable(false);
        jTabelaInterno.getTableHeader().setReorderingAllowed(false);
        jTabelaInterno.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        alinharCamposTabelaProntuario();
        conectaBAR.desconecta();
    }

    public void alinharCamposTabelaProntuario() {
        DefaultTableCellRenderer esquerda = new DefaultTableCellRenderer();
        DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
        DefaultTableCellRenderer direita = new DefaultTableCellRenderer();
        esquerda.setHorizontalAlignment(SwingConstants.LEFT);
        centralizado.setHorizontalAlignment(SwingConstants.CENTER);
        direita.setHorizontalAlignment(SwingConstants.RIGHT);
        //
        jTabelaInterno.getColumnModel().getColumn(0).setCellRenderer(centralizado);
        jTabelaInterno.getColumnModel().getColumn(1).setCellRenderer(centralizado);
        jTabelaInterno.getColumnModel().getColumn(4).setCellRenderer(centralizado);
    }

    public void pesquisarUnidadePrisionalLF() {
        conectaLF.abrirConexao();
        try {
            conectaLF.executaSQL("SELECT * FROM UNIDADE_PENAL_EMPRESA");
            conectaLF.rs.first();
            nomeUnidadeLF = conectaLF.rs.getString("DescricaoUnidade");
        } catch (Exception e) {
        }
        conectaLF.desconecta();
    }

    public void pesquisarUnidadePrisionalSSA() {
        conectaSSA.abrirConexao();
        try {
            conectaSSA.executaSQL("SELECT * FROM UNIDADE_PENAL_EMPRESA");
            conectaSSA.rs.first();
            nomeUnidadeSSA = conectaSSA.rs.getString("DescricaoUnidade");
        } catch (Exception e) {
        }
        conectaSSA.desconecta();
    }

    public void pesquisarUnidadePrisionalITB() {
        conectaITB.abrirConexao();
        try {
            conectaITB.executaSQL("SELECT * FROM UNIDADE_PENAL_EMPRESA");
            conectaITB.rs.first();
            nomeUnidadeITB = conectaITB.rs.getString("DescricaoUnidade");
        } catch (Exception e) {
        }
        conectaITB.desconecta();
    }

    public void pesquisarUnidadePrisionalVC() {
        conectaVC.abrirConexao();
        try {
            conectaVC.executaSQL("SELECT * FROM UNIDADE_PENAL_EMPRESA");
            conectaVC.rs.first();
            nomeUnidadeVC = conectaVC.rs.getString("DescricaoUnidade");
        } catch (Exception e) {
        }
        conectaVC.desconecta();
    }

    public void pesquisarUnidadePrisionalBAR() {
        conectaBAR.abrirConexao();
        try {
            conectaBAR.executaSQL("SELECT * FROM UNIDADE_PENAL_EMPRESA");
            conectaBAR.rs.first();
            nomeUnidadeBAR = conectaBAR.rs.getString("DescricaoUnidade");
        } catch (Exception e) {
        }
        conectaBAR.desconecta();
    }
}
