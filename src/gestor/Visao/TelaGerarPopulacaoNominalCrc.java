/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestor.Visao;

import gestor.Controle.ControleGerarPopulacao;
import gestor.Controle.ControleLogSistema;
import gestor.Controle.ControleMovInternos;
import gestor.Dao.ConexaoBancoDados;
import gestor.Controle.listarInternosPopulacaoNominal;
import gestor.Modelo.GerarPopNominal;
import gestor.Modelo.LogSistema;
import static gestor.Visao.TelaModuloPrincipal.jDataSistema;
import static gestor.Visao.TelaModuloPrincipal.jHoraSistema;
import static gestor.Visao.TelaModuloPrincipal.tipoServidor;
import java.awt.Color;
import java.awt.Rectangle;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ronaldo
 */
public class TelaGerarPopulacaoNominalCrc extends javax.swing.JInternalFrame {

    ConexaoBancoDados conecta = new ConexaoBancoDados();
    listarInternosPopulacaoNominal listaDAO = new listarInternosPopulacaoNominal();
    ControleGerarPopulacao control = new ControleGerarPopulacao();
    GerarPopNominal objPopNom = new GerarPopNominal();
    ControleMovInternos controlMov = new ControleMovInternos();  // HISTÓRICO DE MOVIMENTAÇÃO DE SAIDA NO CRC
    //
    ControleLogSistema controlLog = new ControleLogSistema();
    LogSistema objLogSys = new LogSistema();
    // Variáveis para gravar o log
    String nomeModuloTela = "CRC:Lançar População Nominal de Internos";
    String statusMov;
    String horaMov;
    String dataModFinal;
    int flag;
    int acao;
    //         
    String dataGeracao, dataPopulacao;
    Date dataBanco;
    // String beneficio = "SAIDA TEMPORARIA";
    String situacaoEnt = "ENTRADA NA UNIDADE";
    String situacaoRet = "RETORNO A UNIDADE";
    String situacaoTmp = "SAIDA TEMPORARIA";
    String situacaoLimpa = "";
    //
    String nrDocumentoRetorno = ""; //Número documeto vazio para gerar o aviso de evasão
    String evadido = "";
    int count = 0;
    int count2 = 0;
    int qtdTotal = 0;
    int pTOTAL_REGISTROS_COPIADO = 0;
    int pTOTAL_REGISTROS_GRAVADO = 0;
    public static int qtdInternosPop = 0;
    String idInterno = "";
    String pTIPO_OPERCAO = "População";

    /**
     * Creates new form TelaGerarValeTransporte
     */
    public TelaGerarPopulacaoNominalCrc() {
        initComponents();
        jDataLancamento.setCalendar(Calendar.getInstance());
        corCampos();
        jProgressBar1.setVisible(!true);
        setDefaultCloseOperation(JInternalFrame.DO_NOTHING_ON_CLOSE); //Impedir que a janela seja fechada pelo X  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTabelaDestinoInternos = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabelaOrigemInternos = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jCheckBoxBuscarTodos = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jDataLancamento = new com.toedter.calendar.JDateChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtotalRegistrosOrigem = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jtotalRegistrosDestino = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jBtSelecionarUm = new javax.swing.JButton();
        jBtSelecionarTodos = new javax.swing.JButton();
        jBtRetornarTodos = new javax.swing.JButton();
        jBtRetornarUm = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jTotalRegistrosGravados = new javax.swing.JLabel();
        jTOTAL_REG_GRAVADO = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTOTAL_REG_COPIADO = new javax.swing.JTextField();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel8 = new javax.swing.JPanel();
        jBtSalvar = new javax.swing.JButton();
        jBtSair = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("...::: Gerar População Nominal de Internos Por Data :::...");

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "População Atual", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(0, 0, 255))); // NOI18N

        jTabelaDestinoInternos.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jTabelaDestinoInternos.setForeground(new java.awt.Color(0, 0, 255));
        jTabelaDestinoInternos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "CNC", "Nome do Interno"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTabelaDestinoInternos.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(jTabelaDestinoInternos);
        if (jTabelaDestinoInternos.getColumnModel().getColumnCount() > 0) {
            jTabelaDestinoInternos.getColumnModel().getColumn(0).setMinWidth(70);
            jTabelaDestinoInternos.getColumnModel().getColumn(0).setMaxWidth(70);
            jTabelaDestinoInternos.getColumnModel().getColumn(1).setMinWidth(80);
            jTabelaDestinoInternos.getColumnModel().getColumn(1).setMaxWidth(80);
            jTabelaDestinoInternos.getColumnModel().getColumn(2).setMinWidth(350);
            jTabelaDestinoInternos.getColumnModel().getColumn(2).setMaxWidth(350);
        }

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Lista de Internos na Unidade", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jTabelaOrigemInternos.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jTabelaOrigemInternos.setForeground(new java.awt.Color(255, 0, 0));
        jTabelaOrigemInternos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "CNC", "Nome Interno"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTabelaOrigemInternos);
        if (jTabelaOrigemInternos.getColumnModel().getColumnCount() > 0) {
            jTabelaOrigemInternos.getColumnModel().getColumn(0).setMinWidth(70);
            jTabelaOrigemInternos.getColumnModel().getColumn(0).setMaxWidth(70);
            jTabelaOrigemInternos.getColumnModel().getColumn(1).setMinWidth(80);
            jTabelaOrigemInternos.getColumnModel().getColumn(1).setMaxWidth(80);
            jTabelaOrigemInternos.getColumnModel().getColumn(2).setMinWidth(350);
            jTabelaOrigemInternos.getColumnModel().getColumn(2).setMaxWidth(350);
        }

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Dados da Polução dos Internos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(255, 0, 0))); // NOI18N

        jCheckBoxBuscarTodos.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBoxBuscarTodos.setText("Buscar Internos");
        jCheckBoxBuscarTodos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxBuscarTodosItemStateChanged(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Data Lançamento:");

        jDataLancamento.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jDataLancamento.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxBuscarTodos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDataLancamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jCheckBoxBuscarTodos)
                    .addComponent(jLabel3)
                    .addComponent(jDataLancamento, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 1, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("Total de Registros--->:");

        jtotalRegistrosOrigem.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtotalRegistrosOrigem.setForeground(new java.awt.Color(255, 0, 0));
        jtotalRegistrosOrigem.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtotalRegistrosOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1)
            .addComponent(jtotalRegistrosOrigem)
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jtotalRegistrosOrigem});

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true)));

        jtotalRegistrosDestino.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtotalRegistrosDestino.setForeground(new java.awt.Color(0, 0, 255));
        jtotalRegistrosDestino.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 255));
        jLabel2.setText("Total Registros Atual--->:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(183, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtotalRegistrosDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 2, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jtotalRegistrosDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Seleção", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jBtSelecionarUm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/250718131515_16.png"))); // NOI18N
        jBtSelecionarUm.setToolTipText("Seleciona apenas um registro");
        jBtSelecionarUm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtSelecionarUmActionPerformed(evt);
            }
        });

        jBtSelecionarTodos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/250718131115_16.png"))); // NOI18N
        jBtSelecionarTodos.setToolTipText("Seleciona todos os registros");
        jBtSelecionarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtSelecionarTodosActionPerformed(evt);
            }
        });

        jBtRetornarTodos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/250718131210_16.png"))); // NOI18N
        jBtRetornarTodos.setToolTipText("Retorno todos os registros selecionados");
        jBtRetornarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtRetornarTodosActionPerformed(evt);
            }
        });

        jBtRetornarUm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/250718131526_16.png"))); // NOI18N
        jBtRetornarUm.setToolTipText("Retorno apenas um registro selecionado");
        jBtRetornarUm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtRetornarUmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jBtSelecionarTodos, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtRetornarTodos, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jBtRetornarUm, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtSelecionarUm, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBtRetornarTodos, jBtRetornarUm, jBtSelecionarTodos, jBtSelecionarUm});

        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addComponent(jBtSelecionarUm, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtSelecionarTodos, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtRetornarTodos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtRetornarUm)
                .addContainerGap(80, Short.MAX_VALUE))
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jBtRetornarTodos, jBtRetornarUm, jBtSelecionarTodos, jBtSelecionarUm});

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true)));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 0, 0));
        jLabel8.setText("ATENÇÃO: ");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Essa tarefa só poderá ser executada uma vez por data. Caso seja executado mais de uma vez na mesma data, irá truncar a população. ");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Dúvidas, solicite apoio do Administrador do Sistema.");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel5))
                    .addComponent(jLabel7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true)));

        jTotalRegistrosGravados.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTotalRegistrosGravados.setText("Registros Gravados:");

        jTOTAL_REG_GRAVADO.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTOTAL_REG_GRAVADO.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTOTAL_REG_GRAVADO.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jTOTAL_REG_GRAVADO.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTOTAL_REG_GRAVADO.setEnabled(false);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTotalRegistrosGravados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTOTAL_REG_GRAVADO, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTotalRegistrosGravados)
                    .addComponent(jTOTAL_REG_GRAVADO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true)));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Registros Copiados:");

        jTOTAL_REG_COPIADO.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTOTAL_REG_COPIADO.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTOTAL_REG_COPIADO.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jTOTAL_REG_COPIADO.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTOTAL_REG_COPIADO.setEnabled(false);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTOTAL_REG_COPIADO, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(jTOTAL_REG_COPIADO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jProgressBar1.setStringPainted(true);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true)));

        jBtSalvar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jBtSalvar.setForeground(new java.awt.Color(0, 204, 51));
        jBtSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/1294_16x16.png"))); // NOI18N
        jBtSalvar.setText("Gravar");
        jBtSalvar.setEnabled(false);
        jBtSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtSalvarActionPerformed(evt);
            }
        });

        jBtSair.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jBtSair.setForeground(new java.awt.Color(255, 0, 0));
        jBtSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/Log_Out_Icon_16.png"))); // NOI18N
        jBtSair.setText("Sair");
        jBtSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtSairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(jBtSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtSair)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBtSair, jBtSalvar});

        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jBtSalvar)
                    .addComponent(jBtSair))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jBtSair, jBtSalvar});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(3, 3, 3)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(3, 3, 3)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jPanel1, jPanel3});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jPanel10, jPanel9});

        setBounds(250, 10, 879, 486);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtSalvarActionPerformed
        statusMov = "Incluiu";
        horaMov = jHoraSistema.getText();
        dataModFinal = jDataSistema.getText();
        if (tipoServidor == null || tipoServidor.equals("")) {
            JOptionPane.showMessageDialog(rootPane, "É necessário definir o parâmtero para o sistema operacional utilizado no servidor, (UBUNTU-LINUX ou WINDOWS SERVER).");
        } else if (tipoServidor.equals("Servidor Linux (Ubuntu)/MS-SQL Server")) {
            verificarPopulacaoLinux(); // Verificar se a população já foi gerada pelo usuário.
            SimpleDateFormat formatoAmerica = new SimpleDateFormat("yyyy/MM/dd");
            dataGeracao = formatoAmerica.format(jDataLancamento.getDate().getTime());
            if (dataBanco != null) {
                dataPopulacao = formatoAmerica.format(dataBanco);
            }
            if (dataPopulacao != null && dataGeracao.compareTo(dataPopulacao) <= 0) {
                JOptionPane.showMessageDialog(rootPane, "População já foi cadastrada.");
            } else {
                if (jDataLancamento.getDate() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a data da População.");
                    jDataLancamento.requestFocus();
                    jDataLancamento.setBackground(Color.red);
                } else {
                    int resposta = JOptionPane.showConfirmDialog(this, "Antes de realizar essa tarefa, faça todas as entradas e saidas dos internos.\nTem certeza que deseja gerar a população diária dos internos?", "Confirmação",
                            JOptionPane.YES_NO_OPTION);
                    if (resposta == JOptionPane.YES_OPTION) {
                        jProgressBar1.setVisible(true);
                        jBtSalvar.setEnabled(!true);
                        jBtSair.setEnabled(!true);
                        jCheckBoxBuscarTodos.setEnabled(!true);
                        jDataLancamento.setEnabled(!true);
                        //
                        jBtSelecionarUm.setEnabled(!true);
                        jBtSelecionarTodos.setEnabled(!true);
                        jBtRetornarTodos.setEnabled(!true);
                        jBtRetornarUm.setEnabled(!true);
                        gravarDadosBanco();
                    }
                }
            }
        } else if (tipoServidor.equals("Servidor Windows/MS-SQL Server")) {
            verificarPopulacaoWindows(); // Verificar se a população já foi gerada pelo usuário.
            SimpleDateFormat formatoAmerica = new SimpleDateFormat("dd/MM/yyyy");
            dataGeracao = formatoAmerica.format(jDataLancamento.getDate().getTime());
            if (dataBanco != null) {
                dataPopulacao = formatoAmerica.format(dataBanco);
            }
            if (dataPopulacao != null && dataGeracao.compareTo(dataPopulacao) <= 0) {
                JOptionPane.showMessageDialog(rootPane, "População já foi cadastrada.");
            } else {
                if (jDataLancamento.getDate() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a data da População.");
                    jDataLancamento.requestFocus();
                    jDataLancamento.setBackground(Color.red);
                } else {
                    int resposta = JOptionPane.showConfirmDialog(this, "Antes de realizar essa tarefa, faça todas as entradas e saidas dos internos.\nTem certeza que deseja gerar a população diária dos internos?", "Confirmação",
                            JOptionPane.YES_NO_OPTION);
                    if (resposta == JOptionPane.YES_OPTION) {
                        jProgressBar1.setVisible(true);
                        jBtSalvar.setEnabled(!true);
                        jBtSair.setEnabled(!true);
                        jCheckBoxBuscarTodos.setEnabled(!true);
                        jDataLancamento.setEnabled(!true);
                        //
                        jBtSelecionarUm.setEnabled(!true);
                        jBtSelecionarTodos.setEnabled(!true);
                        jBtRetornarTodos.setEnabled(!true);
                        jBtRetornarUm.setEnabled(!true);
                        gravarDadosBanco();
                    }
                }
            }
        }
    }//GEN-LAST:event_jBtSalvarActionPerformed

    private void jBtSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtSairActionPerformed
        // TODO add your handling code here:
        qtdInternosPop = 0;
        dispose();
    }//GEN-LAST:event_jBtSairActionPerformed

    private void jCheckBoxBuscarTodosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxBuscarTodosItemStateChanged
        // TODO add your handling code here:
        count = 0;
        flag = 1;
        jCheckBoxBuscarTodos.setEnabled(!true);
        jDataLancamento.setEnabled(true);
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaOrigemInternos.getModel();
        GerarPopNominal p = new GerarPopNominal();
        try {
            for (GerarPopNominal pp : listaDAO.read()) {
                jtotalRegistrosOrigem.setText(Integer.toString(qtdInternosPop)); // Converter inteiro em string para exibir na tela 
                count = qtdInternosPop;
                dadosOrigem.addRow(new Object[]{pp.getIdInternoCrc(), pp.getCnc(), pp.getNomeInterno()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaOrigemInternos.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                //
                jTabelaOrigemInternos.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaOrigemInternos.getColumnModel().getColumn(1).setCellRenderer(centralizado);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaMontagemPagamentoKitInterno.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCheckBoxBuscarTodosItemStateChanged

    private void jBtSelecionarUmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtSelecionarUmActionPerformed
        // TODO add your handling code here:
        Integer row = jTabelaDestinoInternos.getRowCount();
        boolean encontrou = !true;
        if (jTabelaOrigemInternos.getSelectedRowCount() != 0 && row == 0) { //Verifica se existe linha selecionada para não dar erro na hora de pegar os valores  
            if (row == 0) {
                count2 = count2 + 1;
                qtdInternosPop = qtdInternosPop - 1;
                jtotalRegistrosDestino.setText(Integer.toString(count2)); // Converter inteiro em string para exibir na tela 
                jtotalRegistrosOrigem.setText(Integer.toString(qtdInternosPop));
            } else if (row != 0) {
                qtdTotal = count2 + qtdInternosPop;
                jtotalRegistrosDestino.setText(Integer.toString(qtdTotal)); // Converter inteiro em string para exibir na tela                                
            }
            //Pega os models das listas, para fazer as inserções e remoções
            DefaultTableModel modelOrigem = (DefaultTableModel) jTabelaOrigemInternos.getModel();
            DefaultTableModel modelDestino = (DefaultTableModel) jTabelaDestinoInternos.getModel();
            //Cria uma linha para ser incluida na tabela de destino, no meu caso tem duas colunas, adapte para as suas tabelas
            Object[] obj = {jTabelaOrigemInternos.getValueAt(jTabelaOrigemInternos.getSelectedRow(), 0), jTabelaOrigemInternos.getValueAt(jTabelaOrigemInternos.getSelectedRow(), 1), jTabelaOrigemInternos.getValueAt(jTabelaOrigemInternos.getSelectedRow(), 2)};
            // BARRA DE ROLAGEM HORIZONTAL
            jTabelaDestinoInternos.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            // ALINHAR TEXTO DA TABELA CENTRALIZADO
            DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
            centralizado.setHorizontalAlignment(SwingConstants.CENTER);
            //
            jTabelaDestinoInternos.getColumnModel().getColumn(0).setCellRenderer(centralizado);
            jTabelaDestinoInternos.getColumnModel().getColumn(1).setCellRenderer(centralizado);
            //Adiciona no destino e remove da origem
            modelDestino.addRow(obj);
            modelOrigem.removeRow(jTabelaOrigemInternos.getSelectedRow());
        } else if (jTabelaOrigemInternos.getSelectedRowCount() != 0 && row != 0) {
            DefaultTableModel modelOrigem = (DefaultTableModel) jTabelaOrigemInternos.getModel();
            DefaultTableModel modelDestino = (DefaultTableModel) jTabelaDestinoInternos.getModel();
            // VERIFICAR SE O PRODUTO JÁ EXISTE NA TABELA, SE EXITIR AVISA.
            for (int i = 0; i < jTabelaDestinoInternos.getRowCount(); i++) {
                String codInter = "" + jTabelaDestinoInternos.getValueAt(i, 0).toString();
                if (idInterno.equals(codInter)) {
                    encontrou = true;
                    break;
                } else {
                    encontrou = !true;
                }
            }
            if (encontrou == true) {
                JOptionPane.showMessageDialog(rootPane, "Interno já foi selecionado, escolha outro.");
            } else if (encontrou == !true) {
                count2 = count2 + 1;
                qtdInternosPop = qtdInternosPop - 1;
                jtotalRegistrosDestino.setText(Integer.toString(count2)); // Converter inteiro em string para exibir na tela 
                jtotalRegistrosOrigem.setText(Integer.toString(qtdInternosPop));
                //Adiciona no destino e remove da origem
                Object[] obj = {jTabelaOrigemInternos.getValueAt(jTabelaOrigemInternos.getSelectedRow(), 0), jTabelaOrigemInternos.getValueAt(jTabelaOrigemInternos.getSelectedRow(), 1), jTabelaOrigemInternos.getValueAt(jTabelaOrigemInternos.getSelectedRow(), 2)};
                modelDestino.addRow(obj);
                modelOrigem.removeRow(jTabelaOrigemInternos.getSelectedRow());
            }
            // BARRA DE ROLAGEM HORIZONTAL
            jTabelaDestinoInternos.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            // ALINHAR TEXTO DA TABELA CENTRALIZADO
            DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
            centralizado.setHorizontalAlignment(SwingConstants.CENTER);
            //
            jTabelaDestinoInternos.getColumnModel().getColumn(0).setCellRenderer(centralizado);
            jTabelaDestinoInternos.getColumnModel().getColumn(1).setCellRenderer(centralizado);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Selecione pelo menos uma linha para transferir todos registros da tabela.");
            //Não tem nenhuma linha selecionada na tabela de origem, faça um aviso para o usuário ou algo do tipo.                    
        }
    }//GEN-LAST:event_jBtSelecionarUmActionPerformed

    private void jBtSelecionarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtSelecionarTodosActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dadosDestino = (DefaultTableModel) jTabelaDestinoInternos.getModel();
        GerarPopNominal p = new GerarPopNominal();
        try {
            for (GerarPopNominal pp : listaDAO.read()) {
//                jtotalRegistros.setText(Integer.toString(qtdInternosPop));
                jtotalRegistrosDestino.setText(jtotalRegistrosOrigem.getText().toString()); // Converter inteiro em string para exibir na tela                                                             
                dadosDestino.addRow(new Object[]{pp.getIdInternoCrc(), pp.getCnc(), pp.getNomeInterno()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaDestinoInternos.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                //
                jTabelaDestinoInternos.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaDestinoInternos.getColumnModel().getColumn(1).setCellRenderer(centralizado);

            }
        } catch (Exception ex) {
            Logger.getLogger(TelaGerarPopulacaoNominalCrc.class.getName()).log(Level.SEVERE, null, ex);
        }
        // APAGAR TODOS OS REGISTROS DA TABELA COPIADA
        DefaultTableModel tblRemove = (DefaultTableModel) jTabelaOrigemInternos.getModel();
        if (tblRemove.getRowCount() > 0) {
            for (int i = 0; i <= tblRemove.getRowCount(); i++) {
                tblRemove.removeRow(i);
                tblRemove.setRowCount(0);
                if (tblRemove.getRowCount() < i) {
                    tblRemove.removeRow(i);
                    tblRemove.setRowCount(0);
                }
            }
        }
        // LIMPAR O TOTALIZADOR DA TABELA
        jtotalRegistrosOrigem.setText("0");
        jBtSalvar.setEnabled(true);
        jDataLancamento.setEnabled(true);
    }//GEN-LAST:event_jBtSelecionarTodosActionPerformed

    private void jBtRetornarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtRetornarTodosActionPerformed
        // TODO add your handling code here:
        Integer rows = jTabelaDestinoInternos.getModel().getRowCount();
        if (rows != 0) {
            DefaultTableModel dadosDestino = (DefaultTableModel) jTabelaOrigemInternos.getModel();
            GerarPopNominal p = new GerarPopNominal();
            try {
                for (GerarPopNominal pp : listaDAO.read()) {
                    jtotalRegistrosOrigem.setText(jtotalRegistrosDestino.getText()); // Converter inteiro em string para exibir na tela                                     
                    dadosDestino.addRow(new Object[]{pp.getIdInternoCrc(), pp.getCnc(), pp.getNomeInterno()});
                    // BARRA DE ROLAGEM HORIZONTAL
                    jTabelaOrigemInternos.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                    // ALINHAR TEXTO DA TABELA CENTRALIZADO
                    DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                    centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                    //
                    jTabelaOrigemInternos.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                    jTabelaOrigemInternos.getColumnModel().getColumn(1).setCellRenderer(centralizado);

                }
            } catch (Exception ex) {
                Logger.getLogger(TelaMontagemPagamentoKitInterno.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        // APAGAR DADOS DA TABELA
        while (jTabelaDestinoInternos.getModel().getRowCount() > 0) {
            ((DefaultTableModel) jTabelaDestinoInternos.getModel()).removeRow(0);
        }
        // LIMPAR O TOTALIZADOR DA TABELA
        jtotalRegistrosDestino.setText("0");
    }//GEN-LAST:event_jBtRetornarTodosActionPerformed

    private void jBtRetornarUmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtRetornarUmActionPerformed
        // TODO add your handling code here:
        Integer rows = jTabelaDestinoInternos.getModel().getRowCount();
        Integer row0 = jTabelaOrigemInternos.getModel().getRowCount();
        if (rows != 0) {
            if (jTabelaDestinoInternos.getSelectedRowCount() != 0) { //Verifica se existe linha selecionada para não dar erro na hora de pegar os valores               
                if (row0 == 0) {
                    qtdInternosPop = 0;
                    qtdInternosPop++;
                    count2 = 0;
                    count2 = qtdTotal - 1;
                    jtotalRegistrosDestino.setText(Integer.toString(count2)); // Converter inteiro em string para exibir na tela 
                    jtotalRegistrosOrigem.setText(Integer.toString(qtdInternosPop));
                } else if (row0 != 0) {
                    qtdInternosPop++;
                    count2 = count2 - 1;
                    jtotalRegistrosDestino.setText(Integer.toString(count2)); // Converter inteiro em string para exibir na tela 
                    jtotalRegistrosOrigem.setText(Integer.toString(qtdInternosPop));
                }
                //Pega os models das listas, para fazer as inserções e remoções
                DefaultTableModel modelOrigem = (DefaultTableModel) jTabelaDestinoInternos.getModel();
                DefaultTableModel modelDestino = (DefaultTableModel) jTabelaOrigemInternos.getModel();
                //Cria uma linha para ser incluida na tabela de destino, no meu caso tem duas colunas, adapte para as suas tabelas
                Object[] obj = {jTabelaDestinoInternos.getValueAt(jTabelaDestinoInternos.getSelectedRow(), 0), jTabelaDestinoInternos.getValueAt(jTabelaDestinoInternos.getSelectedRow(), 1), jTabelaDestinoInternos.getValueAt(jTabelaDestinoInternos.getSelectedRow(), 2)};
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaOrigemInternos.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                //
                jTabelaOrigemInternos.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaOrigemInternos.getColumnModel().getColumn(1).setCellRenderer(centralizado);
                //Adiciona no destino e remove da origem
                modelDestino.addRow(obj);
                modelOrigem.removeRow(jTabelaDestinoInternos.getSelectedRow());
            } else {
                JOptionPane.showMessageDialog(rootPane, "Selecione pelo menos uma linha para transferir todos registros da tabela.");
                //Não tem nenhuma linha selecionada na tabela de origem, faça um aviso para o usuário ou algo do tipo.            
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Não existe dados a ser excluído.");
        }
    }//GEN-LAST:event_jBtRetornarUmActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtRetornarTodos;
    private javax.swing.JButton jBtRetornarUm;
    private javax.swing.JButton jBtSair;
    private javax.swing.JButton jBtSalvar;
    private javax.swing.JButton jBtSelecionarTodos;
    private javax.swing.JButton jBtSelecionarUm;
    private javax.swing.JCheckBox jCheckBoxBuscarTodos;
    public static com.toedter.calendar.JDateChooser jDataLancamento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTOTAL_REG_COPIADO;
    private javax.swing.JTextField jTOTAL_REG_GRAVADO;
    public static javax.swing.JTable jTabelaDestinoInternos;
    private javax.swing.JTable jTabelaOrigemInternos;
    private javax.swing.JLabel jTotalRegistrosGravados;
    private javax.swing.JLabel jtotalRegistrosDestino;
    private javax.swing.JLabel jtotalRegistrosOrigem;
    // End of variables declaration//GEN-END:variables

    public void corCampos() {
        jDataLancamento.setBackground(Color.white);
        jTOTAL_REG_COPIADO.setBackground(Color.white);
        jTOTAL_REG_GRAVADO.setBackground(Color.white);
    }

    public void gravarDadosBanco() {
        try {
            Thread t0 = new Thread() {
                public void run() {
                    statusMov = "Incluiu";
                    horaMov = jHoraSistema.getText();
                    dataModFinal = jDataSistema.getText();
                    for (int i = 0; i < jTabelaDestinoInternos.getRowCount(); i++) {//      
                        objPopNom.setDataLanc(jDataLancamento.getDate());
                        objPopNom.setIdInternoCrc((int) jTabelaDestinoInternos.getValueAt(i, 0));
                        control.incluirPopulacaoNominal(objPopNom);
                        pTOTAL_REGISTROS_GRAVADO = i + 1;
                        jTOTAL_REG_GRAVADO.setText(String.valueOf(pTOTAL_REGISTROS_GRAVADO));
                        jProgressBar1.setValue(i);
                        if (pTOTAL_REGISTROS_GRAVADO == pTOTAL_REGISTROS_COPIADO) {
                            jProgressBar1.setValue(100);
                            qtdInternosPop = 0;                            
                            JOptionPane.showMessageDialog(rootPane, "Operação Concluída com sucesso...");                            
                            dispose();
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                    }
                }
            };
            t0.start();
        } catch (Exception e) {
        }
        // THREAD DA BARRA DE EXECUÇÃO
        try {
            Thread t = new Thread() {
                public void run() {
                    jProgressBar1.setMaximum(jTabelaDestinoInternos.getRowCount());
                    Rectangle rect;
                    for (int i = 0; i < jTabelaDestinoInternos.getRowCount(); i++) {
                        rect = jTabelaDestinoInternos.getCellRect(i, 0, true);
                        try {
                            jTabelaDestinoInternos.scrollRectToVisible(rect);
                        } catch (java.lang.ClassCastException e) {
                        }
                        if (i == 0) {
                            jTabelaDestinoInternos.setRowSelectionInterval(i, 0);
                            jProgressBar1.setValue((i + 1));
                        } else if (i > 0) {
                            jTabelaDestinoInternos.setRowSelectionInterval(i, 1);
                            jProgressBar1.setValue((i + 1));
                        }
                        pTOTAL_REGISTROS_COPIADO = i + 1;
                        jTOTAL_REG_COPIADO.setText(String.valueOf(pTOTAL_REGISTROS_COPIADO));
                        jProgressBar1.setValue(i);
                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                        }
                    }
                    try {
                    } catch (Exception e) {
                    }
                }
            };
            t.start();
        } catch (Exception e) {
        }
    }

    public void alinharCamposTabelaPrevisao() {
        DefaultTableCellRenderer esquerda = new DefaultTableCellRenderer();
        DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
        DefaultTableCellRenderer direita = new DefaultTableCellRenderer();
        esquerda.setHorizontalAlignment(SwingConstants.LEFT);
        centralizado.setHorizontalAlignment(SwingConstants.CENTER);
        direita.setHorizontalAlignment(SwingConstants.RIGHT);
        //
        jTabelaOrigemInternos.getColumnModel().getColumn(0).setCellRenderer(centralizado);
    }

    public void alinharCamposTabelaAtual() {
        DefaultTableCellRenderer esquerda = new DefaultTableCellRenderer();
        DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
        DefaultTableCellRenderer direita = new DefaultTableCellRenderer();
        esquerda.setHorizontalAlignment(SwingConstants.LEFT);
        centralizado.setHorizontalAlignment(SwingConstants.CENTER);
        direita.setHorizontalAlignment(SwingConstants.RIGHT);
        //
        jTabelaDestinoInternos.getColumnModel().getColumn(0).setCellRenderer(centralizado);
    }

    public void verificarPopulacaoWindows() {
        SimpleDateFormat formatoAmerica = new SimpleDateFormat("dd/MM/yyyy");
        dataGeracao = formatoAmerica.format(jDataLancamento.getDate().getTime());
        conecta.abrirConexao();
        try {
            conecta.executaSQL("SELECT * FROM POPULACAOINTERNOS_CRC WHERE DataPop='" + dataGeracao + "'");
            conecta.rs.first();
            dataBanco = conecta.rs.getDate("DataPop");
        } catch (Exception e) {
        }
    }

    public void verificarPopulacaoLinux() {
        SimpleDateFormat formatoAmerica = new SimpleDateFormat("yyyy/MM/dd");
        dataGeracao = formatoAmerica.format(jDataLancamento.getDate().getTime());
        conecta.abrirConexao();
        try {
            conecta.executaSQL("SELECT * FROM POPULACAOINTERNOS_CRC WHERE DataPop='" + dataGeracao + "'");
            conecta.rs.first();
            dataBanco = conecta.rs.getDate("DataPop");
        } catch (Exception e) {
        }
    }
}
