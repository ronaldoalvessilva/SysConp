/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestor.Visao;

import gestor.Dao.ConexaoBancoDados;
import static gestor.Visao.TelaLoginSenha.descricaoUnidade;
import static gestor.Visao.TelaLoginSenha.nameUser;
import static gestor.Visao.TelaModuloPrincipal.tipoServidor;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRResultSetDataSource;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Socializa TI 02
 */
public class TelaRelatorioProgramacaoKits extends javax.swing.JInternalFrame {

    ConexaoBancoDados conecta = new ConexaoBancoDados();

    int flag;
    String dataInicial, dataFinal;

    /**
     * Creates new form TelaRelatorioProgramacaoKits
     */
    public TelaRelatorioProgramacaoKits() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoBotoesKit = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jDataPesqInicial = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jDataPesFinal = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jRBt_QUINZENAL = new javax.swing.JRadioButton();
        jRBt_DECENDIAL = new javax.swing.JRadioButton();
        jRBt_MENSAL = new javax.swing.JRadioButton();
        jRBt_SEMESTRAL = new javax.swing.JRadioButton();
        jRBt_ANUAL = new javax.swing.JRadioButton();
        jBtConfirmar = new javax.swing.JButton();
        jBtSair = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("...::: Relatório Geral de Previsao de Kits :::...");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/gtklp-icone-3770-16.png"))); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Selecione o Tipo de Kit:");

        jDataPesqInicial.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Período");

        jDataPesFinal.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("De:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Até:");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        grupoBotoesKit.add(jRBt_QUINZENAL);
        jRBt_QUINZENAL.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jRBt_QUINZENAL.setForeground(new java.awt.Color(204, 0, 0));
        jRBt_QUINZENAL.setText("Quinzenal");

        grupoBotoesKit.add(jRBt_DECENDIAL);
        jRBt_DECENDIAL.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jRBt_DECENDIAL.setForeground(new java.awt.Color(0, 102, 0));
        jRBt_DECENDIAL.setSelected(true);
        jRBt_DECENDIAL.setText("Decendial");

        grupoBotoesKit.add(jRBt_MENSAL);
        jRBt_MENSAL.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jRBt_MENSAL.setForeground(new java.awt.Color(0, 0, 204));
        jRBt_MENSAL.setText("Mensal");

        grupoBotoesKit.add(jRBt_SEMESTRAL);
        jRBt_SEMESTRAL.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jRBt_SEMESTRAL.setForeground(new java.awt.Color(102, 0, 51));
        jRBt_SEMESTRAL.setText("Semestral");

        grupoBotoesKit.add(jRBt_ANUAL);
        jRBt_ANUAL.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jRBt_ANUAL.setText("Anual");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRBt_ANUAL)
                    .addComponent(jRBt_MENSAL)
                    .addComponent(jRBt_QUINZENAL)
                    .addComponent(jRBt_DECENDIAL)
                    .addComponent(jRBt_SEMESTRAL))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRBt_DECENDIAL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRBt_QUINZENAL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRBt_MENSAL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRBt_SEMESTRAL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRBt_ANUAL)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jDataPesFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jDataPesqInicial, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel2)
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDataPesqInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jDataPesFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jBtConfirmar.setForeground(new java.awt.Color(0, 102, 51));
        jBtConfirmar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/tick.png"))); // NOI18N
        jBtConfirmar.setText("Confirmar");
        jBtConfirmar.setToolTipText("Confirmar operação");
        jBtConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtConfirmarActionPerformed(evt);
            }
        });

        jBtSair.setForeground(new java.awt.Color(204, 0, 0));
        jBtSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gestor/Imagens/shutdown-icone-6920-16.png"))); // NOI18N
        jBtSair.setText("Sair");
        jBtSair.setToolTipText("Sair da tela de Relatório");
        jBtSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtSairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBtConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtSair)
                .addGap(32, 32, 32))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBtConfirmar, jBtSair});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtConfirmar)
                    .addComponent(jBtSair))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jBtConfirmar, jBtSair});

        setBounds(300, 60, 291, 275);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtConfirmarActionPerformed
        // TODO add your handling code here:
        if (jRBt_DECENDIAL.isSelected() == true) {
            if (tipoServidor == null || tipoServidor.equals("")) {
                JOptionPane.showMessageDialog(rootPane, "É necessário definir o parâmtero para o sistema operacional utilizado no servidor, (UBUNTU-LINUX ou WINDOWS SERVER).");
            } else if (tipoServidor.equals("Servidor Linux (Ubuntu)/MS-SQL Server")) {
                if (jDataPesqInicial.getDate() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a data inicial para pesquisa.");
                    jDataPesqInicial.requestFocus();
                } else {
                    if (jDataPesFinal.getDate() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a data final para pesquisa.");
                        jDataPesFinal.requestFocus();
                    } else {
                        if (jDataPesqInicial.getDate().after(jDataPesFinal.getDate())) {
                            JOptionPane.showMessageDialog(rootPane, "Data Inicial não pode ser maior que data final");
                        } else {
                            SimpleDateFormat formatoAmerica = new SimpleDateFormat("yyyy/MM/dd");
                            dataInicial = formatoAmerica.format(jDataPesqInicial.getDate().getTime());
                            dataFinal = formatoAmerica.format(jDataPesFinal.getDate().getTime());
                            final ViewAguarde carregando = new ViewAguarde(); //Teste tela aguarde
                            carregando.setVisible(true);//Teste tela aguarde
                            Thread t = new Thread() { //Teste tela aguarde
                                public void run() { //Teste tela aguarde
                                    try {
                                        conecta.abrirConexao();
                                        String path = "reports/Almoxarifado/ProgramacaoKitDecendial.jasper";
                                        conecta.executaSQL("SELECT * FROM PROGRAMACAO_PAGAMENTO_KITS_INTERNOS "
                                                + "INNER JOIN KITS_DECENDIAL_INTERNOS "
                                                + "ON PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.IdPROG=KITS_DECENDIAL_INTERNOS.IDREG_PROG "
                                                + "INNER JOIN PAVILHAO "
                                                + "ON PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.IdPav=PAVILHAO.IdPav "
                                                + "INNER JOIN PRONTUARIOSCRC "
                                                + "ON KITS_DECENDIAL_INTERNOS.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                                                + "WHERE CONVERT(DATE,DataPrevisao) BETWEEN'" + dataInicial + "' "
                                                + "AND'" + dataFinal + "' "
                                                + "ORDER BY DataPrevisao");
                                        HashMap parametros = new HashMap();
                                        parametros.put("pDataInicial", dataInicial);
                                        parametros.put("pDataFinal", dataFinal);
                                        parametros.put("pUsuario", nameUser);
                                        parametros.put("pUnidade", descricaoUnidade);
                                        JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                                        JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                                        JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                                        jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                                        jv.setTitle("Relatório de Programação de Kit Decendial");
                                        jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                                        jv.toFront(); // Traz o relatorio para frente da aplicação    
                                        carregando.dispose(); //Teste tela aguarde
                                        conecta.desconecta();
                                    } catch (JRException e) {
                                        JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
                                    }
                                }
                            }; //Teste tela aguarde
                            t.start(); //Teste tela aguarde
                        } //Teste tela aguarde
                    }
                }
            } else if (tipoServidor.equals("Servidor Windows/MS-SQL Server")) {
                if (jDataPesqInicial.getDate() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a data inicial para pesquisa.");
                    jDataPesqInicial.requestFocus();
                } else {
                    if (jDataPesFinal.getDate() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a data final para pesquisa.");
                        jDataPesFinal.requestFocus();
                    } else {
                        if (jDataPesqInicial.getDate().after(jDataPesFinal.getDate())) {
                            JOptionPane.showMessageDialog(rootPane, "Data Inicial não pode ser maior que data final");
                        } else {
                            SimpleDateFormat formatoAmerica = new SimpleDateFormat("dd/MM/yyyy");
                            dataInicial = formatoAmerica.format(jDataPesqInicial.getDate().getTime());
                            dataFinal = formatoAmerica.format(jDataPesFinal.getDate().getTime());
                            final ViewAguarde carregando = new ViewAguarde(); //Teste tela aguarde
                            carregando.setVisible(true);//Teste tela aguarde
                            Thread t = new Thread() { //Teste tela aguarde
                                public void run() { //Teste tela aguarde
                                    try {
                                        conecta.abrirConexao();
                                        String path = "reports/Almoxarifado/ProgramacaoKitDecendial.jasper";
                                        conecta.executaSQL("SELECT * FROM PROGRAMACAO_PAGAMENTO_KITS_INTERNOS "
                                                + "INNER JOIN KITS_DECENDIAL_INTERNOS "
                                                + "ON PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.IdPROG=KITS_DECENDIAL_INTERNOS.IDREG_PROG "
                                                + "INNER JOIN PAVILHAO "
                                                + "ON PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.IdPav=PAVILHAO.IdPav "
                                                + "INNER JOIN PRONTUARIOSCRC "
                                                + "ON KITS_DECENDIAL_INTERNOS.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                                                + "WHERE CONVERT(DATE,DataPrevisao) BETWEEN'" + dataInicial + "' "
                                                + "AND'" + dataFinal + "' "
                                                + "ORDER BY DataPrevisao");
                                        HashMap parametros = new HashMap();
                                        parametros.put("pDataInicial", dataInicial);
                                        parametros.put("pDataFinal", dataFinal);
                                        parametros.put("pUsuario", nameUser);
                                        parametros.put("pUnidade", descricaoUnidade);
                                        JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                                        JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                                        JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                                        jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                                        jv.setTitle("Relatório de Programação de Kit Decendial");
                                        jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                                        jv.toFront(); // Traz o relatorio para frente da aplicação    
                                        carregando.dispose(); //Teste tela aguarde
                                        conecta.desconecta();
                                    } catch (JRException e) {
                                        JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
                                    }
                                }
                            }; //Teste tela aguarde
                            t.start(); //Teste tela aguarde
                        }
                    }
                }
            }
        } else if (jRBt_QUINZENAL.isSelected() == true) {
            if (tipoServidor == null || tipoServidor.equals("")) {
                JOptionPane.showMessageDialog(rootPane, "É necessário definir o parâmtero para o sistema operacional utilizado no servidor, (UBUNTU-LINUX ou WINDOWS SERVER).");
            } else if (tipoServidor.equals("Servidor Linux (Ubuntu)/MS-SQL Server")) {
                if (jDataPesqInicial.getDate() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a data inicial para pesquisa.");
                    jDataPesqInicial.requestFocus();
                } else {
                    if (jDataPesFinal.getDate() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a data final para pesquisa.");
                        jDataPesFinal.requestFocus();
                    } else {
                        if (jDataPesqInicial.getDate().after(jDataPesFinal.getDate())) {
                            JOptionPane.showMessageDialog(rootPane, "Data Inicial não pode ser maior que data final");
                        } else {
                            SimpleDateFormat formatoAmerica = new SimpleDateFormat("yyyy/MM/dd");
                            dataInicial = formatoAmerica.format(jDataPesqInicial.getDate().getTime());
                            dataFinal = formatoAmerica.format(jDataPesFinal.getDate().getTime());
                            final ViewAguarde carregando = new ViewAguarde(); //Teste tela aguarde
                            carregando.setVisible(true);//Teste tela aguarde
                            Thread t = new Thread() { //Teste tela aguarde
                                public void run() { //Teste tela aguarde

                                    try {
                                        conecta.abrirConexao();
                                        String path = "reports/Almoxarifado/ProgramacaoKitQuinzenal.jasper";
                                        conecta.executaSQL("SELECT * FROM PROGRAMACAO_PAGAMENTO_KITS_INTERNOS "
                                                + "INNER JOIN KITS_QUINZENAL_INTERNOS "
                                                + "ON PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.IdPROG=KITS_QUINZENAL_INTERNOS.IDREG_PROG "
                                                + "INNER JOIN PAVILHAO "
                                                + "ON PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.IdPav=PAVILHAO.IdPav "
                                                + "INNER JOIN PRONTUARIOSCRC "
                                                + "ON KITS_QUINZENAL_INTERNOS.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                                                + "WHERE CONVERT(DATE,PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.DataPrevisao) BETWEEN'" + dataInicial + "' "
                                                + "AND'" + dataFinal + "' "
                                                + "ORDER BY PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.DataPrevisao");
                                        HashMap parametros = new HashMap();
                                        parametros.put("pDataInicial", dataInicial);
                                        parametros.put("pDataFinal", dataFinal);
                                        parametros.put("pUsuario", nameUser);
                                        parametros.put("pUnidade", descricaoUnidade);
                                        JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                                        JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                                        JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                                        jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                                        jv.setTitle("Relatório de Programação de Kit Quinzenal");
                                        jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                                        jv.toFront(); // Traz o relatorio para frente da aplicação   
                                        carregando.dispose(); //Teste tela aguarde
                                        conecta.desconecta();
                                    } catch (JRException e) {
                                        JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
                                    }
                                }
                            }; //Teste tela aguarde
                            t.start(); //Teste tela aguarde
                        } //Teste tela aguarde
                    }
                }
            } else if (tipoServidor.equals("Servidor Windows/MS-SQL Server")) {
                if (jDataPesqInicial.getDate() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a data inicial para pesquisa.");
                    jDataPesqInicial.requestFocus();
                } else {
                    if (jDataPesFinal.getDate() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a data final para pesquisa.");
                        jDataPesFinal.requestFocus();
                    } else {
                        if (jDataPesqInicial.getDate().after(jDataPesFinal.getDate())) {
                            JOptionPane.showMessageDialog(rootPane, "Data Inicial não pode ser maior que data final");
                        } else {
                            SimpleDateFormat formatoAmerica = new SimpleDateFormat("dd/MM/yyyy");
                            dataInicial = formatoAmerica.format(jDataPesqInicial.getDate().getTime());
                            dataFinal = formatoAmerica.format(jDataPesFinal.getDate().getTime());
                            final ViewAguarde carregando = new ViewAguarde(); //Teste tela aguarde
                            carregando.setVisible(true);//Teste tela aguarde
                            Thread t = new Thread() { //Teste tela aguarde
                                public void run() { //Teste tela aguarde
                                    try {
                                        conecta.abrirConexao();
                                        String path = "reports/Almoxarifado/ProgramacaoKitQuinzenal.jasper";
                                        conecta.executaSQL("SELECT * FROM PROGRAMACAO_PAGAMENTO_KITS_INTERNOS "
                                                + "INNER JOIN KITS_QUINZENAL_INTERNOS "
                                                + "ON PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.IdPROG=KITS_QUINZENAL_INTERNOS.IDREG_PROG "
                                                + "INNER JOIN PAVILHAO "
                                                + "ON PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.IdPav=PAVILHAO.IdPav "
                                                + "INNER JOIN PRONTUARIOSCRC "
                                                + "ON KITS_QUINZENAL_INTERNOS.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                                                + "WHERE CONVERT(DATE,PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.DataPrevisao) BETWEEN'" + dataInicial + "' "
                                                + "AND'" + dataFinal + "' "
                                                + "ORDER BY PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.DataPrevisao");
                                        HashMap parametros = new HashMap();
                                        parametros.put("pDataInicial", dataInicial);
                                        parametros.put("pDataFinal", dataFinal);
                                        parametros.put("pUsuario", nameUser);
                                        parametros.put("pUnidade", descricaoUnidade);
                                        JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                                        JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                                        JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                                        jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                                        jv.setTitle("Relatório de Programação de Kit Quinzenal");
                                        jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                                        jv.toFront(); // Traz o relatorio para frente da aplicação  
                                        carregando.dispose(); //Teste tela aguarde
                                        conecta.desconecta();
                                    } catch (JRException e) {
                                        JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
                                    }
                                }
                            }; //Teste tela aguarde
                            t.start(); //Teste tela aguarde
                        }
                    }
                }
            }
        } else if (jRBt_MENSAL.isSelected() == true) {
            if (tipoServidor == null || tipoServidor.equals("")) {
                JOptionPane.showMessageDialog(rootPane, "É necessário definir o parâmetro para o sistema operacional utilizado no servidor, (UBUNTU-LINUX ou WINDOWS SERVER).");
            } else if (tipoServidor.equals("Servidor Linux (Ubuntu)/MS-SQL Server")) {
                if (jDataPesqInicial.getDate() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a data inicial para pesquisa.");
                    jDataPesqInicial.requestFocus();
                } else {
                    if (jDataPesFinal.getDate() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a data final para pesquisa.");
                        jDataPesFinal.requestFocus();
                    } else {
                        if (jDataPesqInicial.getDate().after(jDataPesFinal.getDate())) {
                            JOptionPane.showMessageDialog(rootPane, "Data Inicial não pode ser maior que data final");
                        } else {
                            SimpleDateFormat formatoAmerica = new SimpleDateFormat("yyyy/MM/dd");
                            dataInicial = formatoAmerica.format(jDataPesqInicial.getDate().getTime());
                            dataFinal = formatoAmerica.format(jDataPesFinal.getDate().getTime());
                            final ViewAguarde carregando = new ViewAguarde(); //Teste tela aguarde
                            carregando.setVisible(true);//Teste tela aguarde
                            Thread t = new Thread() { //Teste tela aguarde
                                public void run() { //Teste tela aguarde                            
                                    try {
                                        conecta.abrirConexao();
                                        String path = "reports/Almoxarifado/ProgramacaoKitMensal.jasper";
                                        conecta.executaSQL("SELECT * FROM PROGRAMACAO_PAGAMENTO_KITS_INTERNOS "
                                                + "INNER JOIN KITS_MENSAL_INTERNOS "
                                                + "ON PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.IdPROG=KITS_MENSAL_INTERNOS.IDREG_PROG "
                                                + "INNER JOIN PAVILHAO "
                                                + "ON PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.IdPav=PAVILHAO.IdPav "
                                                + "INNER JOIN PRONTUARIOSCRC "
                                                + "ON KITS_MENSAL_INTERNOS.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                                                + "WHERE CONVERT(DATE,DataPrevisao) BETWEEN'" + dataInicial + "' "
                                                + "AND'" + dataFinal + "' "
                                                + "ORDER BY DataPrevisao");
                                        HashMap parametros = new HashMap();
                                        parametros.put("pDataInicial", dataInicial);
                                        parametros.put("pDataFinal", dataFinal);
                                        parametros.put("pUsuario", nameUser);
                                        parametros.put("pUnidade", descricaoUnidade);
                                        JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                                        JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                                        JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                                        jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                                        jv.setTitle("Relatório de Programação de Kit Mensal");
                                        jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                                        jv.toFront(); // Traz o relatorio para frente da aplicação    
                                        carregando.dispose(); //Teste tela aguarde
                                        conecta.desconecta();
                                    } catch (JRException e) {
                                        JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
                                    }
                                }
                            }; //Teste tela aguarde
                            t.start(); //Teste tela aguarde
                        } //Teste tela aguarde
                    }
                }
            } else if (tipoServidor.equals("Servidor Windows/MS-SQL Server")) {
                if (jDataPesqInicial.getDate() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a data inicial para pesquisa.");
                    jDataPesqInicial.requestFocus();
                } else {
                    if (jDataPesFinal.getDate() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a data final para pesquisa.");
                        jDataPesFinal.requestFocus();
                    } else {
                        if (jDataPesqInicial.getDate().after(jDataPesFinal.getDate())) {
                            JOptionPane.showMessageDialog(rootPane, "Data Inicial não pode ser maior que data final");
                        } else {
                            SimpleDateFormat formatoAmerica = new SimpleDateFormat("dd/MM/yyyy");
                            dataInicial = formatoAmerica.format(jDataPesqInicial.getDate().getTime());
                            dataFinal = formatoAmerica.format(jDataPesFinal.getDate().getTime());
                            final ViewAguarde carregando = new ViewAguarde(); //Teste tela aguarde
                            carregando.setVisible(true);//Teste tela aguarde
                            Thread t = new Thread() { //Teste tela aguarde
                                public void run() { //Teste tela aguarde
                                    try {
                                        conecta.abrirConexao();
                                        String path = "reports/Almoxarifado/ProgramacaoKitMensal.jasper";
                                        conecta.executaSQL("SELECT * FROM PROGRAMACAO_PAGAMENTO_KITS_INTERNOS "
                                                + "INNER JOIN KITS_MENSAL_INTERNOS "
                                                + "ON PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.IdPROG=KITS_MENSAL_INTERNOS.IDREG_PROG "
                                                + "INNER JOIN PAVILHAO "
                                                + "ON PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.IdPav=PAVILHAO.IdPav "
                                                + "INNER JOIN PRONTUARIOSCRC "
                                                + "ON KITS_MENSAL_INTERNOS.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                                                + "WHERE CONVERT(DATE,DataPrevisao) BETWEEN'" + dataInicial + "' "
                                                + "AND'" + dataFinal + "' "
                                                + "ORDER BY DataPrevisao");
                                        HashMap parametros = new HashMap();
                                        parametros.put("pDataInicial", dataInicial);
                                        parametros.put("pDataFinal", dataFinal);
                                        parametros.put("pUsuario", nameUser);
                                        parametros.put("pUnidade", descricaoUnidade);
                                        JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                                        JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                                        JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                                        jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                                        jv.setTitle("Relatório de Programação de Kit Mensal");
                                        jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                                        jv.toFront(); // Traz o relatorio para frente da aplicação       
                                        carregando.dispose(); //Teste tela aguarde
                                        conecta.desconecta();
                                    } catch (JRException e) {
                                        JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
                                    }
                                }
                            }; //Teste tela aguarde
                            t.start(); //Teste tela aguarde
                        }
                    }
                }
            }
        } else if (jRBt_SEMESTRAL.isSelected() == true) {
            if (tipoServidor == null || tipoServidor.equals("")) {
                JOptionPane.showMessageDialog(rootPane, "É necessário definir o parâmetro para o sistema operacional utilizado no servidor, (UBUNTU-LINUX ou WINDOWS SERVER).");
            } else if (tipoServidor.equals("Servidor Linux (Ubuntu)/MS-SQL Server")) {
                if (jDataPesqInicial.getDate() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a data inicial para pesquisa.");
                    jDataPesqInicial.requestFocus();
                } else {
                    if (jDataPesFinal.getDate() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a data final para pesquisa.");
                        jDataPesFinal.requestFocus();
                    } else {
                        if (jDataPesqInicial.getDate().after(jDataPesFinal.getDate())) {
                            JOptionPane.showMessageDialog(rootPane, "Data Inicial não pode ser maior que data final");
                        } else {
                            SimpleDateFormat formatoAmerica = new SimpleDateFormat("yyyy/MM/dd");
                            dataInicial = formatoAmerica.format(jDataPesqInicial.getDate().getTime());
                            dataFinal = formatoAmerica.format(jDataPesFinal.getDate().getTime());
                            final ViewAguarde carregando = new ViewAguarde(); //Teste tela aguarde
                            carregando.setVisible(true);//Teste tela aguarde
                            Thread t = new Thread() { //Teste tela aguarde
                                public void run() { //Teste tela aguarde
                                    try {
                                        conecta.abrirConexao();
                                        String path = "reports/Almoxarifado/ProgramacaoKitSemestral.jasper";
                                        conecta.executaSQL("SELECT * FROM PROGRAMACAO_PAGAMENTO_KITS_INTERNOS "
                                                + "INNER JOIN KITS_SEMESTRAL_INTERNOS "
                                                + "ON PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.IdPROG=KITS_SEMESTRAL_INTERNOS.IDREG_PROG "
                                                + "INNER JOIN PAVILHAO "
                                                + "ON PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.IdPav=PAVILHAO.IdPav "
                                                + "INNER JOIN PRONTUARIOSCRC "
                                                + "ON KITS_SEMESTRAL_INTERNOS.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                                                + "WHERE CONVERT(DATE,DataPrevisao) BETWEEN'" + dataInicial + "' "
                                                + "AND'" + dataFinal + "' "
                                                + "ORDER BY DataPrevisao");
                                        HashMap parametros = new HashMap();
                                        parametros.put("pDataInicial", dataInicial);
                                        parametros.put("pDataFinal", dataFinal);
                                        parametros.put("pUsuario", nameUser);
                                        parametros.put("pUnidade", descricaoUnidade);
                                        JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                                        JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                                        JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                                        jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                                        jv.setTitle("Relatório de Programação de Kit Semestral");
                                        jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                                        jv.toFront(); // Traz o relatorio para frente da aplicação   
                                        carregando.dispose(); //Teste tela aguarde
                                        conecta.desconecta();
                                    } catch (JRException e) {
                                        JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
                                    }
                                }
                            }; //Teste tela aguarde
                            t.start(); //Teste tela aguarde
                        } //Teste tela aguarde
                    }
                }
            } else if (tipoServidor.equals("Servidor Windows/MS-SQL Server")) {
                if (jDataPesqInicial.getDate() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a data inicial para pesquisa.");
                    jDataPesqInicial.requestFocus();
                } else {
                    if (jDataPesFinal.getDate() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a data final para pesquisa.");
                        jDataPesFinal.requestFocus();
                    } else {
                        if (jDataPesqInicial.getDate().after(jDataPesFinal.getDate())) {
                            JOptionPane.showMessageDialog(rootPane, "Data Inicial não pode ser maior que data final");
                        } else {
                            SimpleDateFormat formatoAmerica = new SimpleDateFormat("dd/MM/yyyy");
                            dataInicial = formatoAmerica.format(jDataPesqInicial.getDate().getTime());
                            dataFinal = formatoAmerica.format(jDataPesFinal.getDate().getTime());
                            final ViewAguarde carregando = new ViewAguarde(); //Teste tela aguarde
                            carregando.setVisible(true);//Teste tela aguarde
                            Thread t = new Thread() { //Teste tela aguarde
                                public void run() { //Teste tela aguarde
                                    try {
                                        conecta.abrirConexao();
                                        String path = "reports/Almoxarifado/ProgramacaoKitSemestral.jasper";
                                        conecta.executaSQL("SELECT * FROM PROGRAMACAO_PAGAMENTO_KITS_INTERNOS "
                                                + "INNER JOIN KITS_SEMESTRAL_INTERNOS "
                                                + "ON PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.IdPROG=KITS_SEMESTRAL_INTERNOS.IDREG_PROG "
                                                + "INNER JOIN PAVILHAO "
                                                + "ON PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.IdPav=PAVILHAO.IdPav "
                                                + "INNER JOIN PRONTUARIOSCRC "
                                                + "ON KITS_SEMESTRAL_INTERNOS.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                                                + "WHERE CONVERT(DATE,DataPrevisao) BETWEEN'" + dataInicial + "' "
                                                + "AND'" + dataFinal + "' "
                                                + "ORDER BY DataPrevisao");
                                        HashMap parametros = new HashMap();
                                        parametros.put("pDataInicial", dataInicial);
                                        parametros.put("pDataFinal", dataFinal);
                                        parametros.put("pUsuario", nameUser);
                                        parametros.put("pUnidade", descricaoUnidade);
                                        JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                                        JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                                        JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                                        jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                                        jv.setTitle("Relatório de Programação de Kit Semestral");
                                        jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                                        jv.toFront(); // Traz o relatorio para frente da aplicação    
                                        carregando.dispose(); //Teste tela aguarde
                                        conecta.desconecta();
                                    } catch (JRException e) {
                                        JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
                                    }
                                }
                            }; //Teste tela aguarde
                            t.start(); //Teste tela aguarde
                        }
                    }
                }
            }
        } else if (jRBt_ANUAL.isSelected() == true) {
            if (tipoServidor == null || tipoServidor.equals("")) {
                JOptionPane.showMessageDialog(rootPane, "É necessário definir o parâmetro para o sistema operacional utilizado no servidor, (UBUNTU-LINUX ou WINDOWS SERVER).");
            } else if (tipoServidor.equals("Servidor Linux (Ubuntu)/MS-SQL Server")) {
                if (jDataPesqInicial.getDate() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a data inicial para pesquisa.");
                    jDataPesqInicial.requestFocus();
                } else {
                    if (jDataPesFinal.getDate() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a data final para pesquisa.");
                        jDataPesFinal.requestFocus();
                    } else {
                        if (jDataPesqInicial.getDate().after(jDataPesFinal.getDate())) {
                            JOptionPane.showMessageDialog(rootPane, "Data Inicial não pode ser maior que data final");
                        } else {
                            SimpleDateFormat formatoAmerica = new SimpleDateFormat("yyyy/MM/dd");
                            dataInicial = formatoAmerica.format(jDataPesqInicial.getDate().getTime());
                            dataFinal = formatoAmerica.format(jDataPesFinal.getDate().getTime());
                            final ViewAguarde carregando = new ViewAguarde(); //Teste tela aguarde
                            carregando.setVisible(true);//Teste tela aguarde
                            Thread t = new Thread() { //Teste tela aguarde
                                public void run() { //Teste tela aguarde
                                    try {
                                        conecta.abrirConexao();
                                        String path = "reports/Almoxarifado/ProgramacaoKitAnual.jasper";
                                        conecta.executaSQL("SELECT * FROM PROGRAMACAO_PAGAMENTO_KITS_INTERNOS "
                                                + "INNER JOIN KITS_ANUAL_INTERNOS "
                                                + "ON PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.IdPROG=KITS_ANUAL_INTERNOS.IDREG_PROG "
                                                + "INNER JOIN PAVILHAO "
                                                + "ON PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.IdPav=PAVILHAO.IdPav "
                                                + "INNER JOIN PRONTUARIOSCRC "
                                                + "ON KITS_ANUAL_INTERNOS.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                                                + "WHERE CONVERT(DATE,DataPrevisao) BETWEEN'" + dataInicial + "' "
                                                + "AND'" + dataFinal + "' "
                                                + "ORDER BY DataPrevisao");
                                        HashMap parametros = new HashMap();
                                        parametros.put("pDataInicial", dataInicial);
                                        parametros.put("pDataFinal", dataFinal);
                                        parametros.put("pUsuario", nameUser);
                                        parametros.put("pUnidade", descricaoUnidade);
                                        JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                                        JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                                        JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                                        jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                                        jv.setTitle("Relatório de Programação de Kit Anual");
                                        jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                                        jv.toFront(); // Traz o relatorio para frente da aplicação   
                                        carregando.dispose(); //Teste tela aguarde
                                        conecta.desconecta();
                                    } catch (JRException e) {
                                        JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
                                    }
                                }
                            }; //Teste tela aguarde
                            t.start(); //Teste tela aguarde
                        } //Teste tela aguarde
                    }
                }
            } else if (tipoServidor.equals("Servidor Windows/MS-SQL Server")) {
                if (jDataPesqInicial.getDate() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a data inicial para pesquisa.");
                    jDataPesqInicial.requestFocus();
                } else {
                    if (jDataPesFinal.getDate() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a data final para pesquisa.");
                        jDataPesFinal.requestFocus();
                    } else {
                        if (jDataPesqInicial.getDate().after(jDataPesFinal.getDate())) {
                            JOptionPane.showMessageDialog(rootPane, "Data Inicial não pode ser maior que data final");
                        } else {
                            SimpleDateFormat formatoAmerica = new SimpleDateFormat("dd/MM/yyyy");
                            dataInicial = formatoAmerica.format(jDataPesqInicial.getDate().getTime());
                            dataFinal = formatoAmerica.format(jDataPesFinal.getDate().getTime());
                            final ViewAguarde carregando = new ViewAguarde(); //Teste tela aguarde
                            carregando.setVisible(true);//Teste tela aguarde
                            Thread t = new Thread() { //Teste tela aguarde
                                public void run() { //Teste tela aguarde
                                    try {
                                        conecta.abrirConexao();
                                        String path = "reports/Almoxarifado/ProgramacaoKitAnual.jasper";
                                        conecta.executaSQL("SELECT * FROM PROGRAMACAO_PAGAMENTO_KITS_INTERNOS "
                                                + "INNER JOIN KITS_ANUAL_INTERNOS "
                                                + "ON PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.IdPROG=KITS_ANUAL_INTERNOS.IDREG_PROG "
                                                + "INNER JOIN PAVILHAO "
                                                + "ON PROGRAMACAO_PAGAMENTO_KITS_INTERNOS.IdPav=PAVILHAO.IdPav "
                                                + "INNER JOIN PRONTUARIOSCRC "
                                                + "ON KITS_ANUAL_INTERNOS.IdInternoCrc=PRONTUARIOSCRC.IdInternoCrc "
                                                + "WHERE CONVERT(DATE,DataPrevisao) BETWEEN'" + dataInicial + "' "
                                                + "AND'" + dataFinal + "' "
                                                + "ORDER BY DataPrevisao");
                                        HashMap parametros = new HashMap();
                                        parametros.put("pDataInicial", dataInicial);
                                        parametros.put("pDataFinal", dataFinal);
                                        parametros.put("pUsuario", nameUser);
                                        parametros.put("pUnidade", descricaoUnidade);
                                        JRResultSetDataSource relatResul = new JRResultSetDataSource(conecta.rs); // Passa o resulSet Preenchido para o relatorio                                   
                                        JasperPrint jpPrint = JasperFillManager.fillReport(path, parametros, relatResul); // indica o caminmhodo relatório
                                        JasperViewer jv = new JasperViewer(jpPrint, false); // Cria instancia para impressao          
                                        jv.setExtendedState(JasperViewer.MAXIMIZED_BOTH); // Maximizar o relatório
                                        jv.setTitle("Relatório de Programação de Kit Anual");
                                        jv.setVisible(true); // Chama o relatorio para ser visualizado                                    
                                        jv.toFront(); // Traz o relatorio para frente da aplicação   
                                        carregando.dispose(); //Teste tela aguarde
                                        conecta.desconecta();
                                    } catch (JRException e) {
                                        JOptionPane.showMessageDialog(rootPane, "Erro ao chamar o Relatório \n\nERRO :" + e);
                                    }
                                }
                            }; //Teste tela aguarde
                            t.start(); //Teste tela aguarde
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jBtConfirmarActionPerformed

    private void jBtSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtSairActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jBtSairActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup grupoBotoesKit;
    private javax.swing.JButton jBtConfirmar;
    private javax.swing.JButton jBtSair;
    private com.toedter.calendar.JDateChooser jDataPesFinal;
    private com.toedter.calendar.JDateChooser jDataPesqInicial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRBt_ANUAL;
    private javax.swing.JRadioButton jRBt_DECENDIAL;
    private javax.swing.JRadioButton jRBt_MENSAL;
    private javax.swing.JRadioButton jRBt_QUINZENAL;
    private javax.swing.JRadioButton jRBt_SEMESTRAL;
    // End of variables declaration//GEN-END:variables
}
